<?php
/**
 * Memcached类声明文件,用于代码智能提示
 * 
 * @link http://php.net/manual/en/book.memcached.php
 * @author xianlinli@gmail.com
 * @package Alice
 */
class Memcached {
    /**
     * The operation was successful.
     */
    const RES_SUCCESS = 0;
    /**
     * The operation failed in some fashion.
     */
    const RES_FAILURE = 1;
    /**
     * DNS lookup failed.
     */
    const RES_HOST_LOOKUP_FAILURE = 2;
    /**
     * Failed to read network data.
     */
    const RES_UNKNOWN_READ_FAILURE = 7;
    /**
     * Bad command in memcached protocol.
     */
    const RES_PROTOCOL_ERROR = 8;
    /**
     * Error on the client side.
     */
    const RES_CLIENT_ERROR = 9;
    /**
     * Error on the server side.
     */
    const RES_SERVER_ERROR = 10;
    /**
     * Failed to write network data.
     */
    const RES_WRITE_FAILURE = 5;
    /**
     * Failed to do compare-and-swap: item you are trying to store has been modified since you last fetched it.
     */
    const RES_DATA_EXISTS = 12;
    /**
     * Item was not stored: but not because of an error. This normally means that either the condition for an "add" or a "replace" command wasn't met, or that the item is in a delete queue.
     */
    const RES_NOTSTORED = 14;
    /**
     * Item with this key was not found (with "get" operation or "cas" operations).
     */
    const RES_NOTFOUND = 16;
    /**
     * Partial network data read error.
     */
    const RES_PARTIAL_READ = 18;
    /**
     * Some errors occurred during multi-get.
     */
    const RES_SOME_ERRORS = 19;
    /**
     * Server list is empty.
     */
    const RES_NO_SERVERS = 20;
    /**
     * End of result set.
     */
    const RES_END = 21;
    /**
     * System error.
     */
    const RES_ERRNO = 26;
    /**
     * The operation was buffered.
     */
    const RES_BUFFERED = 32;
    /**
     * The operation timed out.
     */
    const RES_TIMEOUT = 31;
    /**
     * Bad key.
     */
    const RES_BAD_KEY_PROVIDED = 33;
    /**
     * Failed to create network socket.
     */
    const RES_CONNECTION_SOCKET_CREATE_FAILURE = 11;
    /**
     * Payload failure: could not compress/decompress or serialize/unserialize the value.
     */
    const RES_PAYLOAD_FAILURE = -1001;

    /**
     * Add an item under a new key
     * @param string $key The key under which to store the value.
     * @param mixed $value The value to store.
     * @param int $expiration The expiration time, defaults to 0.
     * @return bool Returns TRUE on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTSTORED if the key already exists.
     */
    public function add($key, $value, $expiration = 0) {

    }

    /**
     * Add a server to the server pool
     * @param string $host The hostname of the memcache server. If the hostname is invalid, data-related operations will set Memcached::RES_HOST_LOOKUP_FAILURE result code.
     * @param int $port The port on which memcache is running. Usually, this is 11211.
     * @param int $weight The weight of the server relative to the total weight of all the servers in the pool. This controls the probability of the server being selected for operations. This is used only with consistent distribution option and usually corresponds to the amount of memory available to memcache on that server.
     * @return bool Returns TRUE on success or FALSE on failure.
     */
    public function addServer($host, $port, $weight = 0) {

    }

    /**
     * Append data to an existing item
     * @param string $key The key under which to store the value.
     * @param string $value The string to append.
     * @return bool Returns TRUE on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTSTORED if the key does not exist.
     */
    public function append($key, $value) {

    }

    /**
     * Compare and swap an item
     * @param float $cas_token Unique value associated with the existing item. Generated by memcache.
     * @param string $key The key under which to store the value.
     * @param mixed $value The value to store.
     * @param int $expiration The expiration time, defaults to 0.
     * @return bool Returns TRUE on success or FALSE on failure.
     */
    public function cas($cas_token, $key, $value, $expiration = 0) {

    }

    /**
     * Decrement numeric item's value
     * @param string $key The key of the item to decrement.
     * @param int $offset The amount by which to decrement the item's value.
     * @return int/false Returns item's new value on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTFOUND if the key does not exist.
     */
    public function decrement($key, $offset = 1) {

    }

    /**
     * Delete an item
     * @param string $key The key to be deleted.
     * @param int $time The amount of time the server will wait to delete the item.
     * @return bool Returns TRUE on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTFOUND if the key does not exist.
     */
    public function delete($key, $time = 0) {

    }

    /**
     * Fetch the next result
     * @return Returns the next result or FALSE otherwise. The Memcached::getResultCode() will return Memcached::RES_END if result set is exhausted.
     */
    public function fetch() {

    }

    /**
     * Fetch all the remaining results
     * @return Returns the results or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function fetchAll() {

    }

    /**
     * Invalidate all items in the cache
     * @param int $delay Numer of seconds to wait before invalidating the items.
     * @return bool Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function flush($delay = 0) {

    }

    /**
     * Retrieve an item
     * @param string $key The key of the item to retrieve.
     * @param callback $cache_cb Read-through caching callback or NULL.
     * @param float $cas_token The variable to store the CAS token in.
     * @return mixed/false Returns the value stored in the cache or FALSE otherwise. The Memcached::getResultCode() will return Memcached::RES_NOTFOUND if the key does not exist.
     */
    public function get($key, $cache_cb = NULL, &$cas_token = NULL) {

    }

    /**
     * Request multiple items
     * @param array $keys Array of keys to request.
     * @param bool $with_cas Whether to request CAS token values also.
     * @param callback $value_cb The result callback or NULL.
     * @return bool Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function getDelayed($keys, $with_cas = NULL, $value_cb = NULL) {

    }

    /**
     * Retrieve multiple items
     * @param array $keys Array of keys to retrieve.
     * @param &array $cas_tokens The variable to store the CAS tokens for the found items.
     * @param int $flags The flags for the get operation.
     * @return array/false Returns the array of found items or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function getMulti($keys, &$cas_tokens = NULL, $flags = NULL) {

    }

    /**
     * Retrieve a Memcached option value
     * @param int $option One of the Memcached::OPT_* constants.
     * @return Returns the value of the requested option, or FALSE on error.
     */
    public function getOption($option) {

    }

    /**
     * Return the result code of the last operation
     * @return int Result code of the last Memcached operation.
     */
    public function getResultCode() {

    }

    /**
     * Return the message describing the result of the last operation
     * @return string Message describing the result of the last Memcached operation.
     */
    public function getResultMessage() {

    }

    /**
     * Get the list of the servers in the pool
     * @return array The list of all servers in the server pool.
     */
    public function getServerList() {

    }

    /**
     * Get server pool statistics
     * @return array Array of server statistics,one entry per server.
     */
    public function getStats() {

    }

    /**
     * Get server pool version info
     * @return array Array of server versions,one entry per server.
     */
    public function getVersion() {

    }

    /**
     * Increment numeric item's value
     * @param string $key The key of the item to increment.
     * @param int $offset The amount by which to increment the item's value.
     * @return int/false Returns new item's value on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTFOUND if the key does not exist.
     */
    public function increment($key, $offset = 1) {

    }

    /**
     * Prepend data to an existing item
     * @param string $key The key of the item to prepend the data to.
     * @param string $value The string to prepend.
     * @return bool Returns TRUE on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTSTORED if the key does not exist.
     */
    public function prepend($key, $value) {

    }

    /**
     * Replace the item under an existing key
     * @param string $key The key under which to store the value.
     * @param mixed $value The value to store.
     * @param int $expiration The expiration time, defaults to 0.
     * @return bool Returns TRUE on success or FALSE on failure. The Memcached::getResultCode() will return Memcached::RES_NOTSTORED if the key does not exist.
     */
    public function replace($key, $value, $expiration) {

    }

    /**
     * Store an item
     * @param string $key The key under which to store the value.
     * @param mixed $value The value to store.
     * @param int $expiration The expiration time, defaults to 0.
     * @return bool Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function set($key, $value, $expiration = 0) {

    }

    /**
     * Store multiple items
     * @param array $items An array of key/value pairs to store on the server.
     * @param int $expiration The expiration time, defaults to 0.
     * @return bool Returns TRUE on success or FALSE on failure. Use Memcached::getResultCode() if necessary.
     */
    public function setMulti($items, $expiration = 0) {

    }

    /**
     * Set a Memcached option
     * @param int $option
     * @param mixed $value
     * @return bool Returns TRUE on success or FALSE on failure.
     */
    public function setOption($option, $value) {
        
    }
}
?>