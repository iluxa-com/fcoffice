<?php
/**
 * 通用类
 *
 * @author xianlinli@gmail.com
 * @package Alice
 */
class Common {
    /**
     * 金币
     * @var int
     */
    const ITEM_SILVER = 7901;
    /**
     * 经验
     * @var int
     */
    const ITEM_EXP = 7902;
    /**
     * 体力
     * @var int
     */
    const ITEM_ENERGY = 7904;
    /**
     * FH币
     */
    const ITEM_GOLD = 7905;
    /**
     * 魅力
     * @var int
     */
    const ITEM_CHARM = 7907;
    /**
     * 爱心
     * @var int
     */
    const ITEM_HEART = 7908;
    /**
     * 缓存数组
     * @var array
     */
    private static $_cacheArr = array();

    /**
     * 获取Key后缀(用于数据互通)
     * @return string
     */
    public static function getKeySuffix() {
        $platform = strtolower(App::get('Platform'));
        if (in_array($platform, array('pengyou', 'qzone', 'txweibo'))) { // TX平台需要数据互通
            return '_' . $platform;
        }
        return '';
    }

    /**
     * 获取新手任务奖励
     * @param int $taskId 任务ID
     * @return array
     */
    public static function getInitTaskReward($taskId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(0 => array('id' => 7902, 'num' => 20,), 1 => array('id' => 7901, 'num' => 50,),), 2 => array(0 => array('id' => 7902, 'num' => 20,), 1 => array('id' => 7901, 'num' => 50,),),
                3 => array(0 => array('id' => 7902, 'num' => 40,), 1 => array('id' => 7901, 'num' => 100,),), 4 => array(0 => array('id' => 7902, 'num' => 40,), 1 => array('id' => 7901, 'num' => 100,),),
                5 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),), 6 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),),
                7 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),), 8 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),),
                9 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),), 10 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),),
                11 => array(0 => array('id' => 7902, 'num' => 60,), 1 => array('id' => 7901, 'num' => 150,),), 12 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),),
                13 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),), 14 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),),
                15 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),), 16 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),),
                17 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),), 18 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),),
                19 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),), 20 => array(0 => array('id' => 7902, 'num' => 80,), 1 => array('id' => 7901, 'num' => 200,),),
                21 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),), 22 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),),
                23 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),), 24 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),),
                25 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),), 26 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),),
                27 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),), 28 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 250,),),
                29 => array(0 => array('id' => 7902, 'num' => 120,), 1 => array('id' => 7901, 'num' => 300,),), 30 => array(0 => array('id' => 7902, 'num' => 120,), 1 => array('id' => 7901, 'num' => 300,),),
                31 => array(0 => array('id' => 7902, 'num' => 120,), 1 => array('id' => 7901, 'num' => 300,),), 32 => array(0 => array('id' => 7902, 'num' => 120,), 1 => array('id' => 7901, 'num' => 300,),),
                33 => array(0 => array('id' => 7902, 'num' => 120,), 1 => array('id' => 7901, 'num' => 300,),), 34 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),),
                35 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),), 36 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),),
                37 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),), 38 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),),
                39 => array(0 => array('id' => 7902, 'num' => 140,), 1 => array('id' => 7901, 'num' => 350,),), 40 => array(0 => array('id' => 7902, 'num' => 160,), 1 => array('id' => 7901, 'num' => 400,),),
                41 => array(0 => array('id' => 7902, 'num' => 160,), 1 => array('id' => 7901, 'num' => 400,),), 42 => array(0 => array('id' => 7902, 'num' => 160,), 1 => array('id' => 7901, 'num' => 400,),),
                43 => array(0 => array('id' => 7902, 'num' => 160,), 1 => array('id' => 7901, 'num' => 400,),), 44 => array(0 => array('id' => 7902, 'num' => 160,), 1 => array('id' => 7901, 'num' => 400,),),
                45 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),), 46 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),),
                47 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),), 48 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),),
                49 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),), 50 => array(0 => array('id' => 7902, 'num' => 180,), 1 => array('id' => 7901, 'num' => 450,),),
                51 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),), 52 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),),
                53 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),), 54 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),),
                55 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),), 56 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),),
                57 => array(0 => array('id' => 7902, 'num' => 200,), 1 => array('id' => 7901, 'num' => 500,),),
            );
        }
        if (isset(self::$_cacheArr[$key][$taskId])) {
            return self::$_cacheArr[$key][$taskId];
        }
        return array();
    }

    /**
     * 获取免费礼物
     * @return array/false
     */
    public static function getFreeGift() {
        $circleCacheModel = new CircleCacheModel(NULL, 'FREE_GIFT');
        $itemIdStr = $circleCacheModel->get();
        if (!empty($itemIdStr)) {
            return explode(',', $itemIdStr);
        }
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                //0 => array(3005, 3006, 3010),
                //1 => array(4001),
                //2 => array(
                //    5001, 5002, 5003, 5006, 5007, 5008, 5011, 5012, 5013, 5016, 5017, 5018, 5021, 5022, 5023,
                //    5026, 5027, 5028, 5031, 5032, 5033, 5036, 5037, 5038, 5041, 5042, 5043, 5046, 5047, 5048,
                //),
                3 => array(
                    7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7111, 7010,
                    7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020,
                    7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030,
                    7031, 7032, 7033, 7034, 7035, 7036, 7037, 7038, 7039, 7040,
                    7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050,
                    7051, 7052, 7053, 7054, 7055, 7056, 7057, 7058, 7059, 7060,
                    7061, 7062, 7063, 7064, 7065, 7066, 7067, 7068, 7069, 7070,
                    7071, 7072,
                ),
            );
        }
        $itemIdArr = array(3005, 3006, 3010, 4001);
//        $indexArr = array_rand(self::$_cacheArr[$key][2], 7);
//        foreach ($indexArr as $index) {
//            $itemIdArr[] = self::$_cacheArr[$key][2][$index];
//        }
        $indexArr = array_rand(self::$_cacheArr[$key][3], 10);
        foreach ($indexArr as $index) {
            $itemIdArr[] = self::$_cacheArr[$key][3][$index];
        }
        if ($circleCacheModel->setnx(implode(',', $itemIdArr)) === false) {
            $itemIdStr = $circleCacheModel->get();
            $itemIdArr = explode(',', $itemIdStr);
        } else {
            // 明天00:00:00
            $tomorrow = strtotime('today', CURRENT_TIME) + 86400;
            if ($circleCacheModel->expireAt($tomorrow) === false) {
                $circleCacheModel->delete();
            }
        }
        return $itemIdArr;
    }

    /**
     * 判断指定的道具ID是否是免费礼物
     * @param int $itemId 道具ID
     * @return bool
     */
    public static function isFreeGift($itemId) {
        $itemIdArr = self::getFreeGift();
        return (is_array($itemIdArr) && in_array($itemId, $itemIdArr));
    }

    /**
     * 获取指定等级升级所需的累计经验
     * @param int $grade 玩家等级(2表示升2级所需的累计经验,3表示升3级所需的累计经验,...)
     * @return int/false 成功时返回int,否则返回false
     */
    public static function getExpByGrade($grade) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            if (App::get('Platform') === '4399') {
                self::$_cacheArr[$key] = array(
                    1 => 0, 2 => 60, 3 => 280, 4 => 600, 5 => 1140, 6 => 1950, 7 => 3140, 8 => 4820, 9 => 7210, 10 => 10360,
                    11 => 15060, 12 => 21790, 13 => 30690, 14 => 42040, 15 => 56390, 16 => 73890, 17 => 95130, 18 => 120680, 19 => 151890, 20 => 188450,
                    21 => 231150, 22 => 281680, 23 => 339590, 24 => 405400, 25 => 480080, 26 => 563620, 27 => 657310, 28 => 762080, 29 => 878760, 30 => 1008040,
                    31 => 1146650, 32 => 1299490, 33 => 1467490, 34 => 1651450, 35 => 1852720, 36 => 2065890, 37 => 2297910, 38 => 2550050, 39 => 2823450, 40 => 3119080,
                    41 => 3430140, 42 => 3765610, 43 => 4126750, 44 => 4514640, 45 => 4931050, 46 => 5366260, 47 => 5832010, 48 => 6329970, 49 => 6861620, 50 => 7428230,
                    51 => 8018120, 52 => 8645750, 53 => 9312750, 54 => 10020510, 55 => 10771240, 56 => 11549510, 57 => 12373330, 58 => 13244770, 59 => 14165680, 60 => 15137680,
                    61 => 16142760, 62 => 17202360, 63 => 18318490, 64 => 19492910, 65 => 20728290, 66 => 22001980, 67 => 23339820, 68 => 24744320, 69 => 26217740, 70 => 27762080,
                    71 => 29351420, 72 => 31015820, 73 => 32757700, 74 => 34579200, 75 => 36483510, 76 => 38439150, 77 => 40481430, 78 => 42613360, 79 => 44837630, 80 => 47156640,
                    81 => 49534940, 82 => 52012890, 83 => 54593370, 84 => 57278940, 85 => 60073350, 86 => 62934540, 87 => 65909100, 88 => 69000560, 89 => 72212100, 90 => 75546540,
                    91 => 78957090, 92 => 82496290, 93 => 86167510, 94 => 89973760, 95 => 93919380, 96 => 97949890, 97 => 102125080, 98 => 106449020, 99 => 110925420, 100 => 115557560,
                    101 => 999999999,
                );
            } else {
                self::$_cacheArr[$key] = array(
                    1 => 0, 2 => 60, 3 => 290, 4 => 630, 5 => 1190, 6 => 2040, 7 => 3300, 8 => 5070, 9 => 7610, 10 => 10960,
                    11 => 15980, 12 => 23200, 13 => 32780, 14 => 45040, 15 => 60600, 16 => 79650, 17 => 102850, 18 => 130870, 19 => 165220, 20 => 205600,
                    21 => 252930, 22 => 309140, 23 => 373790, 24 => 447530, 25 => 531500, 26 => 625760, 27 => 731840, 28 => 850880, 29 => 983900, 30 => 1131790,
                    31 => 1290900, 32 => 1466930, 33 => 1661080, 34 => 1874390, 35 => 2108550, 36 => 2357380, 37 => 2629100, 38 => 2925360, 39 => 3247650, 40 => 3597280,
                    41 => 3966340, 42 => 4365640, 43 => 4796870, 44 => 5261530, 45 => 5761930, 46 => 6286560, 47 => 6849780, 48 => 7453830, 49 => 8100740, 50 => 8792330,
                    51 => 9514550, 52 => 10285330, 53 => 11106940, 54 => 11981410, 55 => 12911770, 56 => 13879150, 57 => 14906200, 58 => 15995840, 59 => 17150750, 60 => 18373320,
                    61 => 19641190, 62 => 20981740, 63 => 22397900, 64 => 23892320, 65 => 25468830, 66 => 27098880, 67 => 28815890, 68 => 30623560, 69 => 32525280, 70 => 34524120,
                    71 => 36586960, 72 => 38753210, 73 => 41026580, 74 => 43410410, 75 => 45909450, 76 => 48482850, 77 => 51177560, 78 => 53998160, 79 => 56948860, 80 => 60033480,
                    81 => 63205390, 82 => 66518980, 83 => 69978810, 84 => 73589010, 85 => 77355350, 86 => 81221760, 87 => 85251820, 88 => 89451080, 89 => 93824670, 90 => 98377270,
                    91 => 103045660, 92 => 107902450, 93 => 112953150, 94 => 118202800, 95 => 123658300, 96 => 129245100, 97 => 135046820, 98 => 141070110, 99 => 147321130, 100 => 153805510,
                    101 => 999999999,
                );
            }
        }
        if (isset(self::$_cacheArr[$key][$grade])) {
            return self::$_cacheArr[$key][$grade];
        }
        return false;
    }

    /**
     * 根据经验获取等级
     * @param int $exp 经验
     * @return int/false
     */
    public static function getGradeByExp($exp) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            if (App::get('Platform') === '4399') {
                self::$_cacheArr[$key] = array(
                    0 => 1, 60 => 2, 280 => 3, 600 => 4, 1140 => 5, 1950 => 6, 3140 => 7, 4820 => 8, 7210 => 9, 10360 => 10,
                    15060 => 11, 21790 => 12, 30690 => 13, 42040 => 14, 56390 => 15, 73890 => 16, 95130 => 17, 120680 => 18, 151890 => 19, 188450 => 20,
                    231150 => 21, 281680 => 22, 339590 => 23, 405400 => 24, 480080 => 25, 563620 => 26, 657310 => 27, 762080 => 28, 878760 => 29, 1008040 => 30,
                    1146650 => 31, 1299490 => 32, 1467490 => 33, 1651450 => 34, 1852720 => 35, 2065890 => 36, 2297910 => 37, 2550050 => 38, 2823450 => 39, 3119080 => 40,
                    3430140 => 41, 3765610 => 42, 4126750 => 43, 4514640 => 44, 4931050 => 45, 5366260 => 46, 5832010 => 47, 6329970 => 48, 6861620 => 49, 7428230 => 50,
                    8018120 => 51, 8645750 => 52, 9312750 => 53, 10020510 => 54, 10771240 => 55, 11549510 => 56, 12373330 => 57, 13244770 => 58, 14165680 => 59, 15137680 => 60,
                    16142760 => 61, 17202360 => 62, 18318490 => 63, 19492910 => 64, 20728290 => 65, 22001980 => 66, 23339820 => 67, 24744320 => 68, 26217740 => 69, 27762080 => 70,
                    29351420 => 71, 31015820 => 72, 32757700 => 73, 34579200 => 74, 36483510 => 75, 38439150 => 76, 40481430 => 77, 42613360 => 78, 44837630 => 79, 47156640 => 80,
                    49534940 => 81, 52012890 => 82, 54593370 => 83, 57278940 => 84, 60073350 => 85, 62934540 => 86, 65909100 => 87, 69000560 => 88, 72212100 => 89, 75546540 => 90,
                    78957090 => 91, 82496290 => 92, 86167510 => 93, 89973760 => 94, 93919380 => 95, 97949890 => 96, 102125080 => 97, 106449020 => 98, 110925420 => 99, 115557560 => 100,
                    999999999 => 101,
                );
            } else {
                self::$_cacheArr[$key] = array(
                    0 => 1, 60 => 2, 290 => 3, 630 => 4, 1190 => 5, 2040 => 6, 3300 => 7, 5070 => 8, 7610 => 9, 10960 => 10,
                    15980 => 11, 23200 => 12, 32780 => 13, 45040 => 14, 60600 => 15, 79650 => 16, 102850 => 17, 130870 => 18, 165220 => 19, 205600 => 20,
                    252930 => 21, 309140 => 22, 373790 => 23, 447530 => 24, 531500 => 25, 625760 => 26, 731840 => 27, 850880 => 28, 983900 => 29, 1131790 => 30,
                    1290900 => 31, 1466930 => 32, 1661080 => 33, 1874390 => 34, 2108550 => 35, 2357380 => 36, 2629100 => 37, 2925360 => 38, 3247650 => 39, 3597280 => 40,
                    3966340 => 41, 4365640 => 42, 4796870 => 43, 5261530 => 44, 5761930 => 45, 6286560 => 46, 6849780 => 47, 7453830 => 48, 8100740 => 49, 8792330 => 50,
                    9514550 => 51, 10285330 => 52, 11106940 => 53, 11981410 => 54, 12911770 => 55, 13879150 => 56, 14906200 => 57, 15995840 => 58, 17150750 => 59, 18373320 => 60,
                    19641190 => 61, 20981740 => 62, 22397900 => 63, 23892320 => 64, 25468830 => 65, 27098880 => 66, 28815890 => 67, 30623560 => 68, 32525280 => 69, 34524120 => 70,
                    36586960 => 71, 38753210 => 72, 41026580 => 73, 43410410 => 74, 45909450 => 75, 48482850 => 76, 51177560 => 77, 53998160 => 78, 56948860 => 79, 60033480 => 80,
                    63205390 => 81, 66518980 => 82, 69978810 => 83, 73589010 => 84, 77355350 => 85, 81221760 => 86, 85251820 => 87, 89451080 => 88, 93824670 => 89, 98377270 => 90,
                    103045660 => 91, 107902450 => 92, 112953150 => 93, 118202800 => 94, 123658300 => 95, 129245100 => 96, 135046820 => 97, 141070110 => 98, 147321130 => 99, 153805510 => 100,
                    999999999 => 101,
                );
            }
        }
        if (isset(self::$_cacheArr[$key])) {
            foreach (self::$_cacheArr[$key] as $expMax => $grade) {
                if ($exp < $expMax) {
                    return $grade - 1;
                } else if ($exp == $expMax) {
                    return $grade;
                }
            }
        }
        return false;
    }

    /**
     * 获取升级奖励数据
     * @param int $grade 玩家等级(2表示1级升2级的奖励,3表示2级升3级的奖励,...)
     * @return array/false
     */
    public static function getGradeUpReward($grade) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                2 => array(0 => array('id' => 7901, 'num' => 200,), 1 => array('id' => 3002, 'num' => 5,),), 3 => array(0 => array('id' => 7901, 'num' => 280,), 1 => array('id' => 3004, 'num' => 5,),), 4 => array(0 => array('id' => 7901, 'num' => 360,), 1 => array('id' => 4001, 'num' => 5,),), 5 => array(0 => array('id' => 7901, 'num' => 440,), 1 => array('id' => 4002, 'num' => 5,),), 6 => array(0 => array('id' => 7901, 'num' => 520,), 1 => array('id' => 3075, 'num' => 5,),),
                7 => array(0 => array('id' => 7901, 'num' => 600,), 1 => array('id' => 3017, 'num' => 5,),), 8 => array(0 => array('id' => 7901, 'num' => 680,), 1 => array('id' => 7902, 'num' => 300,),), 9 => array(0 => array('id' => 7901, 'num' => 760,), 1 => array('id' => 3078, 'num' => 5,),), 10 => array(0 => array('id' => 7901, 'num' => 840,), 1 => array('id' => 3022, 'num' => 5,),), 11 => array(0 => array('id' => 7901, 'num' => 920,), 1 => array('id' => 7907, 'num' => 50,),),
                12 => array(0 => array('id' => 7901, 'num' => 1000,), 1 => array('id' => 3029, 'num' => 5,),), 13 => array(0 => array('id' => 7901, 'num' => 1080,), 1 => array('id' => 3027, 'num' => 5,),), 14 => array(0 => array('id' => 7901, 'num' => 1160,), 1 => array('id' => 7907, 'num' => 50,),), 15 => array(0 => array('id' => 7901, 'num' => 1240,), 1 => array('id' => 7907, 'num' => 50,),), 16 => array(0 => array('id' => 7901, 'num' => 1320,), 1 => array('id' => 7907, 'num' => 50,),),
                17 => array(0 => array('id' => 7901, 'num' => 1400,), 1 => array('id' => 7907, 'num' => 50,),), 18 => array(0 => array('id' => 7901, 'num' => 1480,), 1 => array('id' => 7907, 'num' => 50,),), 19 => array(0 => array('id' => 7901, 'num' => 1560,), 1 => array('id' => 3088, 'num' => 5,),), 20 => array(0 => array('id' => 7901, 'num' => 1640,), 1 => array('id' => 7907, 'num' => 5,),), 21 => array(0 => array('id' => 7901, 'num' => 1720,), 1 => array('id' => 7907, 'num' => 5,),),
                22 => array(0 => array('id' => 7901, 'num' => 1800,), 1 => array('id' => 3009, 'num' => 5,),), 23 => array(0 => array('id' => 7901, 'num' => 1880,), 1 => array('id' => 7907, 'num' => 50,),), 24 => array(0 => array('id' => 7901, 'num' => 1960,), 1 => array('id' => 7907, 'num' => 50,),), 25 => array(0 => array('id' => 7901, 'num' => 2040,), 1 => array('id' => 7907, 'num' => 50,),), 26 => array(0 => array('id' => 7901, 'num' => 2120,), 1 => array('id' => 3064, 'num' => 5,),),
                27 => array(0 => array('id' => 7901, 'num' => 2200,), 1 => array('id' => 7907, 'num' => 50,),), 28 => array(0 => array('id' => 7901, 'num' => 2280,), 1 => array('id' => 7907, 'num' => 50,),), 29 => array(0 => array('id' => 7901, 'num' => 2360,), 1 => array('id' => 7907, 'num' => 50,),), 30 => array(0 => array('id' => 7901, 'num' => 2440,), 1 => array('id' => 7907, 'num' => 50,),), 31 => array(0 => array('id' => 7901, 'num' => 2520,), 1 => array('id' => 3087, 'num' => 5,),),
                32 => array(0 => array('id' => 7901, 'num' => 2600,), 1 => array('id' => 7907, 'num' => 100,),), 33 => array(0 => array('id' => 7901, 'num' => 2680,), 1 => array('id' => 7907, 'num' => 100,),), 34 => array(0 => array('id' => 7901, 'num' => 2760,), 1 => array('id' => 7907, 'num' => 100,),), 35 => array(0 => array('id' => 7901, 'num' => 2840,), 1 => array('id' => 7907, 'num' => 100,),), 36 => array(0 => array('id' => 7901, 'num' => 2920,), 1 => array('id' => 7907, 'num' => 100,),),
                37 => array(0 => array('id' => 7901, 'num' => 3000,), 1 => array('id' => 7907, 'num' => 100,),), 38 => array(0 => array('id' => 7901, 'num' => 3080,), 1 => array('id' => 7907, 'num' => 100,),), 39 => array(0 => array('id' => 7901, 'num' => 3160,), 1 => array('id' => 7907, 'num' => 100,),), 40 => array(0 => array('id' => 7901, 'num' => 3240,), 1 => array('id' => 7907, 'num' => 100,),), 41 => array(0 => array('id' => 7901, 'num' => 3320,), 1 => array('id' => 7907, 'num' => 100,),),
                42 => array(0 => array('id' => 7901, 'num' => 3400,), 1 => array('id' => 7907, 'num' => 100,),), 43 => array(0 => array('id' => 7901, 'num' => 3480,), 1 => array('id' => 7907, 'num' => 100,),), 44 => array(0 => array('id' => 7901, 'num' => 3560,), 1 => array('id' => 7907, 'num' => 100,),), 45 => array(0 => array('id' => 7901, 'num' => 3640,), 1 => array('id' => 7907, 'num' => 100,),), 46 => array(0 => array('id' => 7901, 'num' => 3720,), 1 => array('id' => 7907, 'num' => 100,),),
                47 => array(0 => array('id' => 7901, 'num' => 3800,), 1 => array('id' => 7907, 'num' => 100,),), 48 => array(0 => array('id' => 7901, 'num' => 3880,), 1 => array('id' => 7907, 'num' => 100,),), 49 => array(0 => array('id' => 7901, 'num' => 3960,), 1 => array('id' => 7907, 'num' => 100,),), 50 => array(0 => array('id' => 7901, 'num' => 4040,), 1 => array('id' => 7907, 'num' => 100,),), 51 => array(0 => array('id' => 7901, 'num' => 4120,), 1 => array('id' => 7907, 'num' => 100,),),
                52 => array(0 => array('id' => 7901, 'num' => 4200,), 1 => array('id' => 7907, 'num' => 100,),), 53 => array(0 => array('id' => 7901, 'num' => 4280,), 1 => array('id' => 7907, 'num' => 100,),), 54 => array(0 => array('id' => 7901, 'num' => 4360,), 1 => array('id' => 7907, 'num' => 100,),), 55 => array(0 => array('id' => 7901, 'num' => 4440,), 1 => array('id' => 7907, 'num' => 100,),), 56 => array(0 => array('id' => 7901, 'num' => 4520,), 1 => array('id' => 7907, 'num' => 100,),),
                57 => array(0 => array('id' => 7901, 'num' => 4600,), 1 => array('id' => 7907, 'num' => 100,),), 58 => array(0 => array('id' => 7901, 'num' => 4680,), 1 => array('id' => 7907, 'num' => 100,),), 59 => array(0 => array('id' => 7901, 'num' => 4760,), 1 => array('id' => 7907, 'num' => 100,),), 60 => array(0 => array('id' => 7901, 'num' => 4840,), 1 => array('id' => 7907, 'num' => 100,),), 61 => array(0 => array('id' => 7901, 'num' => 4920,), 1 => array('id' => 7907, 'num' => 100,),),
                62 => array(0 => array('id' => 7901, 'num' => 5000,), 1 => array('id' => 7907, 'num' => 100,),), 63 => array(0 => array('id' => 7901, 'num' => 5080,), 1 => array('id' => 7907, 'num' => 100,),), 64 => array(0 => array('id' => 7901, 'num' => 5160,), 1 => array('id' => 7907, 'num' => 100,),), 65 => array(0 => array('id' => 7901, 'num' => 5240,), 1 => array('id' => 7907, 'num' => 100,),), 66 => array(0 => array('id' => 7901, 'num' => 5320,), 1 => array('id' => 7907, 'num' => 100,),),
                67 => array(0 => array('id' => 7901, 'num' => 5400,), 1 => array('id' => 7907, 'num' => 100,),), 68 => array(0 => array('id' => 7901, 'num' => 5480,), 1 => array('id' => 7907, 'num' => 100,),), 69 => array(0 => array('id' => 7901, 'num' => 5560,), 1 => array('id' => 7907, 'num' => 100,),), 70 => array(0 => array('id' => 7901, 'num' => 5640,), 1 => array('id' => 7907, 'num' => 100,),), 71 => array(0 => array('id' => 7901, 'num' => 5720,), 1 => array('id' => 7907, 'num' => 100,),),
                72 => array(0 => array('id' => 7901, 'num' => 5800,), 1 => array('id' => 7907, 'num' => 100,),), 73 => array(0 => array('id' => 7901, 'num' => 5880,), 1 => array('id' => 7907, 'num' => 100,),), 74 => array(0 => array('id' => 7901, 'num' => 5960,), 1 => array('id' => 7907, 'num' => 100,),), 75 => array(0 => array('id' => 7901, 'num' => 6040,), 1 => array('id' => 7907, 'num' => 100,),), 76 => array(0 => array('id' => 7901, 'num' => 6120,), 1 => array('id' => 7907, 'num' => 100,),),
                77 => array(0 => array('id' => 7901, 'num' => 6200,), 1 => array('id' => 7907, 'num' => 100,),), 78 => array(0 => array('id' => 7901, 'num' => 6280,), 1 => array('id' => 7907, 'num' => 100,),), 79 => array(0 => array('id' => 7901, 'num' => 6360,), 1 => array('id' => 7907, 'num' => 100,),), 80 => array(0 => array('id' => 7901, 'num' => 6440,), 1 => array('id' => 7907, 'num' => 100,),), 81 => array(0 => array('id' => 7901, 'num' => 6520,), 1 => array('id' => 7907, 'num' => 100,),),
                82 => array(0 => array('id' => 7901, 'num' => 6600,), 1 => array('id' => 7907, 'num' => 100,),), 83 => array(0 => array('id' => 7901, 'num' => 6680,), 1 => array('id' => 7907, 'num' => 100,),), 84 => array(0 => array('id' => 7901, 'num' => 6760,), 1 => array('id' => 7907, 'num' => 100,),), 85 => array(0 => array('id' => 7901, 'num' => 6840,), 1 => array('id' => 7907, 'num' => 100,),), 86 => array(0 => array('id' => 7901, 'num' => 6920,), 1 => array('id' => 7907, 'num' => 100,),),
                87 => array(0 => array('id' => 7901, 'num' => 7000,), 1 => array('id' => 7907, 'num' => 100,),), 88 => array(0 => array('id' => 7901, 'num' => 7080,), 1 => array('id' => 7907, 'num' => 100,),), 89 => array(0 => array('id' => 7901, 'num' => 7160,), 1 => array('id' => 7907, 'num' => 100,),), 90 => array(0 => array('id' => 7901, 'num' => 7240,), 1 => array('id' => 7907, 'num' => 100,),), 91 => array(0 => array('id' => 7901, 'num' => 7320,), 1 => array('id' => 7907, 'num' => 100,),),
                92 => array(0 => array('id' => 7901, 'num' => 7400,), 1 => array('id' => 7907, 'num' => 100,),), 93 => array(0 => array('id' => 7901, 'num' => 7480,), 1 => array('id' => 7907, 'num' => 100,),), 94 => array(0 => array('id' => 7901, 'num' => 7560,), 1 => array('id' => 7907, 'num' => 100,),), 95 => array(0 => array('id' => 7901, 'num' => 7640,), 1 => array('id' => 7907, 'num' => 100,),), 96 => array(0 => array('id' => 7901, 'num' => 7720,), 1 => array('id' => 7907, 'num' => 100,),),
                97 => array(0 => array('id' => 7901, 'num' => 7800,), 1 => array('id' => 7907, 'num' => 100,),), 98 => array(0 => array('id' => 7901, 'num' => 7880,), 1 => array('id' => 7907, 'num' => 100,),), 99 => array(0 => array('id' => 7901, 'num' => 7960,), 1 => array('id' => 7907, 'num' => 100,),), 100 => array(0 => array('id' => 7901, 'num' => 8040,), 1 => array('id' => 7907, 'num' => 100,),), 101 => array(0 => array('id' => 7901, 'num' => 8120,), 1 => array('id' => 7907, 'num' => 100,),),
            );
        }
        if (isset(self::$_cacheArr[$key][$grade])) {
            return self::$_cacheArr[$key][$grade];
        }
        return false;
    }

    /**
     * 获取指定等级的体力上限
     * @param int $exp 玩家经验
     * @return int 体力上限
     */
    public static function getMaxEnergyByExp($exp) {
        return round(20 + (self::getGradeByExp($exp) - 1) * 1.3);
    }

    /**
     * 获取指定等级的体力消耗
     * @param int $exp 玩家经验
     * @return int 体力消耗
     */
    public static function getNeedEnergyByExp($exp) {
        $grade = self::getGradeByExp($exp);
        if ($grade < 3) {
            return 1;
        }
        return floor(3 + self::getGradeByExp($exp) / 6);
    }

    /**
     * 获取指定地区进入所需的等级
     * @param int $areaId 地区ID
     * @return int/false 成功时返回int,否则返回false
     */
    public static function getNeedGradeByAreaId($areaId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => 1, 2 => 4, 3 => 7, 4 => 10, 5 => 14,
                6 => 16, 7 => 18, 8 => 21, 9 => 26, 10 => 35,
                11 => 40, 12 => 45, 13 => 50, 14 => 55, 15 => 60,
                16 => 65, 17 => 70, 18 => 75, 19 => 80, 20 => 85,
                21 => 90, 22 => 95, 23 => 100,
            );
        }
        if (isset(self::$_cacheArr[$key][$areaId])) {
            return self::$_cacheArr[$key][$areaId];
        }
        return false;
    }

    /**
     * 获取指定地区的节点数
     * @param int $areaId 地区ID
     * @return int/false 成功时返回int,否则返回false
     */
    public static function getNodeCountByAreaId($areaId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => 20, 2 => 20, 3 => 20, 4 => 20, 5 => 20,
                6 => 20, 7 => 20, 8 => 20, 9 => 20, 10 => 30,
                11 => 30, 12 => 30, 13 => 30, 14 => 30, 15 => 30,
                16 => 30, 17 => 30, 18 => 30,
            );
        }
        if (isset(self::$_cacheArr[$key][$areaId])) {
            return self::$_cacheArr[$key][$areaId];
        }
        return false;
    }

    /**
     * 获取闯关奖励道具ID
     * @param int $itemLevel 道具等级[1,12]
     * @param int $areaId 地区ID
     * @return array/false
     */
    public static function getLevelRewardItem($itemLevel, $areaId) {
        if (in_array($itemLevel, array(1, 7, 8, 4))) {
            return self::getLevelRewardItem2($itemLevel, $areaId);
        }
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                2 => array(7000 => array('id' => 7901, 'num' => 1,), 9000 => array('id' => 7901, 'num' => 5,), 9500 => array('id' => 7901, 'num' => 10,), 9750 => array('id' => 7901, 'num' => 30,), 9870 => array('id' => 7901, 'num' => 50,), 9930 => array('id' => 7901, 'num' => 80,), 9970 => array('id' => 7901, 'num' => 100,), 9990 => array('id' => 7901, 'num' => 150,), 10000 => array('id' => 7901, 'num' => 200,),),
                3 => array(7500 => array('id' => 7902, 'num' => 1,), 9000 => array('id' => 7902, 'num' => 2,), 9500 => array('id' => 7902, 'num' => 5,), 9800 => array('id' => 7902, 'num' => 10,), 9900 => array('id' => 7902, 'num' => 15,), 9970 => array('id' => 7902, 'num' => 20,), 9990 => array('id' => 7902, 'num' => 25,), 10000 => array('id' => 7902, 'num' => 50,),),
                5 => array(),
                6 => array(),
                9 => array(),
                10 => array(),
                11 => array(),
                12 => array(10000 => array('id' => 7906, 'num' => 1)),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            if (!empty(self::$_cacheArr[$key][$itemLevel])) {
                return self::getChanceConfig(self::$_cacheArr[$key][$itemLevel]);
            }
        }
        return false;
    }

    /**
     * 获取闯关随机奖励道具ID
     * @param int $itemLevel 道具等级[1,11]
     * @param int $areaId 地区ID
     * @return array/false
     */
    public static function getLevelRewardItem2($itemLevel, $areaId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(1 => array(7027, 7001, 7002, 7003, 7006), 7 => array(5001, 5002, 5003, 5004, 5005), 8 => array(4001, 4002), 4 => array(3002, 3004),),
                2 => array(1 => array(7007, 7008, 7011, 7012, 7090), 7 => array(5006, 5007, 5008, 5009, 5010), 8 => array(4001, 4002), 4 => array(3004, 3075),),
                3 => array(1 => array(7017, 7018, 7089, 7079, 7041), 7 => array(5006, 5007, 5008, 5009, 5010), 8 => array(4001, 4002), 4 => array(3075, 3078),),
                4 => array(1 => array(7042, 7019, 7020, 7021, 7091), 7 => array(5011, 5012, 5013, 5014, 5015), 8 => array(4001, 4002), 4 => array(3078, 3022),),
                5 => array(1 => array(7046, 7083, 7082, 7069, 7110), 7 => array(5016, 5017, 5018, 5019, 5020), 8 => array(4001, 4002), 4 => array(3078, 3022),),
                6 => array(1 => array(7107, 7038, 7093, 7097, 7092), 7 => array(5016, 5017, 5018, 5019, 5020), 8 => array(4001, 4002), 4 => array(3022, 3009),),
                7 => array(1 => array(7037, 7103, 7066, 7065, 7111), 7 => array(5023, 5021, 5022, 5024, 5025), 8 => array(4001, 4002), 4 => array(3022, 3009),),
                8 => array(1 => array(7101, 7100, 7102, 7057, 7099, 7098), 7 => array(5023, 5021, 5022, 5024, 5025), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                9 => array(1 => array(7081, 7105, 7080, 7063, 7104, 2093), 7 => array(5026, 5027, 5028, 5029, 5030), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                10 => array(1 => array(7117, 7118, 7119, 7120, 7121), 7 => array(5031, 5032, 5033, 5034, 5035), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                11 => array(1 => array(7112, 7113, 7114, 7115, 7116), 7 => array(5031, 5032, 5033, 5034, 5035), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                12 => array(1 => array(7122, 7123, 7124, 7125, 7126), 7 => array(5036, 5037, 5038, 5039, 5040), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                13 => array(1 => array(7127, 7128, 7129, 7130, 7131), 7 => array(5041, 5042, 5043, 5044, 5045), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
                14 => array(1 => array(7132, 7133, 7134, 7135, 7136), 7 => array(5046, 5047, 5048, 5049, 5050), 8 => array(4001, 4002, 4003), 4 => array(3022, 3009),),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            if (!empty(self::$_cacheArr[$key][$areaId][$itemLevel])) {
                $index = array_rand(self::$_cacheArr[$key][$areaId][$itemLevel]);
                $itemId = self::$_cacheArr[$key][$areaId][$itemLevel][$index];
                return array('id' => $itemId, 'num' => 1);
            }
        }
        return false;
    }

    /**
     * 获取闯关奖励合成材料道具ID
     * @param int $areaId 地区ID[1,9999]
     * @param int $node 节点编号[1-50]
     * @return array/false
     */
    public static function getLevelRewardMaterialItem($areaId, $node) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                '1-1' => array(0 => 7203, 1 => 7207,), '1-2' => array(0 => 7203, 1 => 7204,), '1-3' => array(0 => 7203, 1 => 7204, 2 => 7213,), '1-4' => array(0 => 7203, 1 => 7204, 2 => 7213,), '1-6' => array(0 => 7202, 1 => 7207, 2 => 7213,), '1-7' => array(0 => 7202, 1 => 7207, 2 => 7213,), '1-8' => array(0 => 7202, 1 => 7204,), '1-9' => array(0 => 7202, 1 => 7207,), '1-11' => array(0 => 7212, 1 => 7204,), '1-12' => array(0 => 7212, 1 => 7210, 2 => 7213,), '1-13' => array(0 => 7212, 1 => 7210,), '1-14' => array(0 => 7212, 1 => 7204, 2 => 7213,), '1-16' => array(0 => 7212, 1 => 7210, 2 => 7213,), '1-17' => array(0 => 7212, 1 => 7210, 2 => 7213,), '1-18' => array(0 => 7203, 1 => 7210, 2 => 7213,), '1-19' => array(0 => 7203, 1 => 7207, 2 => 7213,),
                '2-1' => array(0 => 7212, 1 => 7210,), '2-2' => array(0 => 7212, 1 => 7210,), '2-3' => array(0 => 7212, 1 => 7210,), '2-4' => array(0 => 7212, 1 => 7210,), '2-6' => array(0 => 7211, 1 => 7210,), '2-7' => array(0 => 7211, 1 => 7210,), '2-8' => array(0 => 7211, 1 => 7210, 2 => 7213,), '2-9' => array(0 => 7211, 1 => 7210, 2 => 7213,), '2-11' => array(0 => 7212, 1 => 7210,), '2-12' => array(0 => 7212, 1 => 7210,), '2-13' => array(0 => 7212, 1 => 7210,), '2-14' => array(0 => 7212, 1 => 7210,), '2-16' => array(0 => 7211, 1 => 7210,), '2-17' => array(0 => 7211, 1 => 7210,), '2-18' => array(0 => 7211, 1 => 7210, 2 => 7213,), '2-19' => array(0 => 7211, 1 => 7210, 2 => 7213,),
                '3-1' => array(0 => 7206, 1 => 7200,), '3-2' => array(0 => 7206, 1 => 7200,), '3-3' => array(0 => 7206, 1 => 7200,), '3-4' => array(0 => 7206, 1 => 7200,), '3-6' => array(0 => 7208, 1 => 7200,), '3-7' => array(0 => 7208, 1 => 7200,), '3-8' => array(0 => 7208, 1 => 7200,), '3-9' => array(0 => 7208, 1 => 7200,), '3-11' => array(0 => 7206, 1 => 7200,), '3-12' => array(0 => 7206, 1 => 7200,), '3-13' => array(0 => 7206, 1 => 7200,), '3-14' => array(0 => 7206, 1 => 7200,), '3-16' => array(0 => 7208, 1 => 7200,), '3-17' => array(0 => 7208, 1 => 7200,), '3-18' => array(0 => 7208, 1 => 7200,), '3-19' => array(0 => 7208, 1 => 7200,),
                '4-1' => array(0 => 7209, 1 => 7201, 2 => 7213,), '4-2' => array(0 => 7209, 1 => 7207, 2 => 7213,), '4-3' => array(0 => 7209, 1 => 7207, 2 => 0,), '4-4' => array(0 => 7209, 1 => 7201,), '4-6' => array(0 => 7208, 1 => 7201,), '4-7' => array(0 => 7208, 1 => 7201,), '4-8' => array(0 => 7208, 1 => 7201, 2 => 7213,), '4-9' => array(0 => 7208, 1 => 7201, 2 => 7213,), '4-11' => array(0 => 7209, 1 => 7201, 2 => 7213,), '4-12' => array(0 => 7209, 1 => 7207, 2 => 7213,), '4-13' => array(0 => 7209, 1 => 7207, 2 => 0,), '4-14' => array(0 => 7209, 1 => 7201,), '4-16' => array(0 => 7208, 1 => 7201,), '4-17' => array(0 => 7208, 1 => 7201,), '4-18' => array(0 => 7208, 1 => 7201, 2 => 7213,), '4-19' => array(0 => 7208, 1 => 7201, 2 => 7213,),
                '5-1' => array(0 => 7212, 1 => 7204,), '5-2' => array(0 => 7212, 1 => 7207,), '5-3' => array(0 => 7212, 1 => 7204,), '5-4' => array(0 => 7212, 1 => 7207, 2 => 7213,), '5-6' => array(0 => 7206, 1 => 7204,), '5-7' => array(0 => 7206, 1 => 7204,), '5-8' => array(0 => 7206, 1 => 7210, 2 => 7213,), '5-9' => array(0 => 7206, 1 => 7210, 2 => 7213,), '5-11' => array(0 => 7212, 1 => 7204,), '5-12' => array(0 => 7212, 1 => 7207,), '5-13' => array(0 => 7212, 1 => 7204,), '5-14' => array(0 => 7212, 1 => 7207, 2 => 7213,), '5-16' => array(0 => 7206, 1 => 7204,), '5-17' => array(0 => 7206, 1 => 7204,), '5-18' => array(0 => 7206, 1 => 7210, 2 => 7213,), '5-19' => array(0 => 7206, 1 => 7210, 2 => 7213,),
                '6-1' => array(0 => 7211, 1 => 7200,), '6-2' => array(0 => 7211, 1 => 7207,), '6-3' => array(0 => 7211, 1 => 7200, 2 => 7213,), '6-4' => array(0 => 7211, 1 => 7207, 2 => 7213,), '6-6' => array(0 => 7202, 1 => 7200,), '6-7' => array(0 => 7202, 1 => 7200,), '6-8' => array(0 => 7202, 1 => 7207, 2 => 7213,), '6-9' => array(0 => 7202, 1 => 7207, 2 => 7213,), '6-11' => array(0 => 7211, 1 => 7200,), '6-12' => array(0 => 7211, 1 => 7207,), '6-13' => array(0 => 7211, 1 => 7200, 2 => 7213,), '6-14' => array(0 => 7211, 1 => 7207, 2 => 7213,), '6-16' => array(0 => 7202, 1 => 7200,), '6-17' => array(0 => 7202, 1 => 7200,), '6-18' => array(0 => 7202, 1 => 7207, 2 => 7213,), '6-19' => array(0 => 7202, 1 => 7207, 2 => 7213,),
                '7-1' => array(0 => 7208, 1 => 7201,), '7-2' => array(0 => 7208, 1 => 7207,), '7-3' => array(0 => 7208, 1 => 7201, 2 => 7213,), '7-4' => array(0 => 7208, 1 => 7207, 2 => 7213,), '7-6' => array(0 => 7209, 1 => 7201,), '7-7' => array(0 => 7209, 1 => 7201, 2 => 7213,), '7-8' => array(0 => 7209, 1 => 7204,), '7-9' => array(0 => 7209, 1 => 7204, 2 => 7213,), '7-11' => array(0 => 7208, 1 => 7201,), '7-12' => array(0 => 7208, 1 => 7207,), '7-13' => array(0 => 7208, 1 => 7201, 2 => 7213,), '7-14' => array(0 => 7208, 1 => 7207, 2 => 7213,), '7-16' => array(0 => 7209, 1 => 7201,), '7-17' => array(0 => 7209, 1 => 7201, 2 => 7213,), '7-18' => array(0 => 7209, 1 => 7204,), '7-19' => array(0 => 7209, 1 => 7204, 2 => 7213,),
                '8-1' => array(0 => 7203, 1 => 7210,), '8-2' => array(0 => 7203, 1 => 7210, 2 => 7213,), '8-3' => array(0 => 7203, 1 => 7210,), '8-4' => array(0 => 7203, 1 => 7210, 2 => 7213,), '8-6' => array(0 => 7211, 1 => 7204,), '8-7' => array(0 => 7211, 1 => 7210,), '8-8' => array(0 => 7211, 1 => 7204, 2 => 7213,), '8-9' => array(0 => 7211, 1 => 7210, 2 => 7213,), '8-11' => array(0 => 7203, 1 => 7210,), '8-12' => array(0 => 7203, 1 => 7210, 2 => 7213,), '8-13' => array(0 => 7203, 1 => 7210,), '8-14' => array(0 => 7203, 1 => 7210, 2 => 7213,), '8-16' => array(0 => 7211, 1 => 7204,), '8-17' => array(0 => 7211, 1 => 7210,), '8-18' => array(0 => 7211, 1 => 7204, 2 => 7213,), '8-19' => array(0 => 7211, 1 => 7210, 2 => 7213,),
                '9-1' => array(0 => 7206, 1 => 7201,), '9-2' => array(0 => 7206, 1 => 7201, 2 => 7213,), '9-3' => array(0 => 7206, 1 => 7201,), '9-4' => array(0 => 7206, 1 => 7201, 2 => 7213,), '9-6' => array(0 => 7203, 1 => 7207,), '9-7' => array(0 => 7203, 1 => 7207, 2 => 7213,), '9-8' => array(0 => 7203, 1 => 7207,), '9-9' => array(0 => 7203, 1 => 7207, 2 => 7213,), '9-11' => array(0 => 7206, 1 => 7201,), '9-12' => array(0 => 7206, 1 => 7201, 2 => 7213,), '9-13' => array(0 => 7206, 1 => 7201,), '9-14' => array(0 => 7206, 1 => 7201, 2 => 7213,), '9-16' => array(0 => 7203, 1 => 7207,), '9-17' => array(0 => 7203, 1 => 7207, 2 => 7213,), '9-18' => array(0 => 7203, 1 => 7207,), '9-19' => array(0 => 7203, 1 => 7207, 2 => 7213,),
                '10-1' => array(0 => 7208, 1 => 7207, 2 => 7204,), '10-2' => array(0 => 7206, 1 => 7200, 2 => 7213,), '10-3' => array(0 => 7201, 1 => 7210, 2 => 7213,), '10-4' => array(0 => 7203, 1 => 7213, 2 => 7204,), '10-5' => array(0 => 7208, 1 => 7203, 2 => 7213,), '10-6' => array(0 => 7207, 1 => 7209, 2 => 7213,), '10-7' => array(0 => 7208, 1 => 7211, 2 => 7204,), '10-8' => array(0 => 7200, 1 => 7203, 2 => 7204,), '10-9' => array(0 => 7206, 1 => 7204, 2 => 7207,), '10-10' => array(0 => 7206, 1 => 7207, 2 => 7204,), '10-11' => array(0 => 7208, 1 => 7207, 2 => 7204,), '10-12' => array(0 => 7206, 1 => 7200, 2 => 7213,), '10-13' => array(0 => 7201, 1 => 7210, 2 => 7213,), '10-14' => array(0 => 7203, 1 => 7213, 2 => 7204,), '10-15' => array(0 => 7208, 1 => 7203, 2 => 7213,), '10-16' => array(0 => 7207, 1 => 7209, 2 => 7213,), '10-17' => array(0 => 7208, 1 => 7211, 2 => 7204,), '10-18' => array(0 => 7200, 1 => 7203, 2 => 7204,), '10-19' => array(0 => 7206, 1 => 7204, 2 => 7207,), '10-20' => array(0 => 7206, 1 => 7207, 2 => 7204,), '10-21' => array(0 => 7208, 1 => 7207, 2 => 7204,), '10-22' => array(0 => 7206, 1 => 7200, 2 => 7213,), '10-23' => array(0 => 7201, 1 => 7210, 2 => 7213,), '10-24' => array(0 => 7203, 1 => 7213, 2 => 7204,), '10-25' => array(0 => 7208, 1 => 7203, 2 => 7213,), '10-26' => array(0 => 7207, 1 => 7209, 2 => 7213,), '10-27' => array(0 => 7208, 1 => 7211, 2 => 7204,), '10-28' => array(0 => 7200, 1 => 7203, 2 => 7204,), '10-29' => array(0 => 7206, 1 => 7204, 2 => 7207,), '10-30' => array(0 => 7206, 1 => 7207, 2 => 7204,),
                '11-1' => array(0 => 7208, 1 => 7207, 2 => 7204,), '11-2' => array(0 => 7206, 1 => 7200, 2 => 7213,), '11-3' => array(0 => 7201, 1 => 7210, 2 => 7213,), '11-4' => array(0 => 7203, 1 => 7213, 2 => 7204,), '11-5' => array(0 => 7208, 1 => 7203, 2 => 7213,), '11-6' => array(0 => 7207, 1 => 7209, 2 => 7213,), '11-7' => array(0 => 7208, 1 => 7211, 2 => 7204,), '11-8' => array(0 => 7200, 1 => 7203, 2 => 7204,), '11-9' => array(0 => 7206, 1 => 7204, 2 => 7207,), '11-10' => array(0 => 7206, 1 => 7207, 2 => 7204,), '11-11' => array(0 => 7208, 1 => 7207, 2 => 7204,), '11-12' => array(0 => 7206, 1 => 7200, 2 => 7213,), '11-13' => array(0 => 7201, 1 => 7210, 2 => 7213,), '11-14' => array(0 => 7203, 1 => 7213, 2 => 7204,), '11-15' => array(0 => 7208, 1 => 7203, 2 => 7213,), '11-16' => array(0 => 7207, 1 => 7209, 2 => 7213,), '11-17' => array(0 => 7208, 1 => 7211, 2 => 7204,), '11-18' => array(0 => 7200, 1 => 7203, 2 => 7204,), '11-19' => array(0 => 7206, 1 => 7204, 2 => 7207,), '11-20' => array(0 => 7206, 1 => 7207, 2 => 7204,), '11-21' => array(0 => 7208, 1 => 7207, 2 => 7204,), '11-22' => array(0 => 7206, 1 => 7200, 2 => 7213,), '11-23' => array(0 => 7201, 1 => 7210, 2 => 7213,), '11-24' => array(0 => 7203, 1 => 7213, 2 => 7204,), '11-25' => array(0 => 7208, 1 => 7203, 2 => 7213,), '11-26' => array(0 => 7207, 1 => 7209, 2 => 7213,), '11-27' => array(0 => 7208, 1 => 7211, 2 => 7204,), '11-28' => array(0 => 7200, 1 => 7203, 2 => 7204,), '11-29' => array(0 => 7206, 1 => 7204, 2 => 7207,), '11-30' => array(0 => 7206, 1 => 7207, 2 => 7204,),
                '12-1' => array(0 => 7208, 1 => 7207, 2 => 7204,), '12-2' => array(0 => 7206, 1 => 7200, 2 => 7213,), '12-3' => array(0 => 7201, 1 => 7210, 2 => 7213,), '12-4' => array(0 => 7203, 1 => 7213, 2 => 7204,), '12-5' => array(0 => 7208, 1 => 7203, 2 => 7213,), '12-6' => array(0 => 7207, 1 => 7209, 2 => 7213,), '12-7' => array(0 => 7208, 1 => 7211, 2 => 7204,), '12-8' => array(0 => 7200, 1 => 7203, 2 => 7204,), '12-9' => array(0 => 7206, 1 => 7204, 2 => 7207,), '12-10' => array(0 => 7206, 1 => 7207, 2 => 7204,), '12-11' => array(0 => 7208, 1 => 7207, 2 => 7204,), '12-12' => array(0 => 7206, 1 => 7200, 2 => 7213,), '12-13' => array(0 => 7201, 1 => 7210, 2 => 7213,), '12-14' => array(0 => 7203, 1 => 7213, 2 => 7204,), '12-15' => array(0 => 7208, 1 => 7203, 2 => 7213,), '12-16' => array(0 => 7207, 1 => 7209, 2 => 7213,), '12-17' => array(0 => 7208, 1 => 7211, 2 => 7204,), '12-18' => array(0 => 7200, 1 => 7203, 2 => 7204,), '12-19' => array(0 => 7206, 1 => 7204, 2 => 7207,), '12-20' => array(0 => 7206, 1 => 7207, 2 => 7204,), '12-21' => array(0 => 7208, 1 => 7207, 2 => 7204,), '12-22' => array(0 => 7206, 1 => 7200, 2 => 7213,), '12-23' => array(0 => 7201, 1 => 7210, 2 => 7213,), '12-24' => array(0 => 7203, 1 => 7213, 2 => 7204,), '12-25' => array(0 => 7208, 1 => 7203, 2 => 7213,), '12-26' => array(0 => 7207, 1 => 7209, 2 => 7213,), '12-27' => array(0 => 7208, 1 => 7211, 2 => 7204,), '12-28' => array(0 => 7200, 1 => 7203, 2 => 7204,), '12-29' => array(0 => 7206, 1 => 7204, 2 => 7207,), '12-30' => array(0 => 7206, 1 => 7207, 2 => 7204,),
                '13-1' => array(0 => 7208, 1 => 7207, 2 => 7204,), '13-2' => array(0 => 7206, 1 => 7200, 2 => 7213,), '13-3' => array(0 => 7201, 1 => 7210, 2 => 7213,), '13-4' => array(0 => 7203, 1 => 7213, 2 => 7204,), '13-5' => array(0 => 7208, 1 => 7203, 2 => 7213,), '13-6' => array(0 => 7207, 1 => 7209, 2 => 7213,), '13-7' => array(0 => 7208, 1 => 7211, 2 => 7204,), '13-8' => array(0 => 7200, 1 => 7203, 2 => 7204,), '13-9' => array(0 => 7206, 1 => 7204, 2 => 7207,), '13-10' => array(0 => 7206, 1 => 7207, 2 => 7204,), '13-11' => array(0 => 7208, 1 => 7207, 2 => 7204,), '13-12' => array(0 => 7206, 1 => 7200, 2 => 7213,), '13-13' => array(0 => 7201, 1 => 7210, 2 => 7213,), '13-14' => array(0 => 7203, 1 => 7213, 2 => 7204,), '13-15' => array(0 => 7208, 1 => 7203, 2 => 7213,), '13-16' => array(0 => 7207, 1 => 7209, 2 => 7213,), '13-17' => array(0 => 7208, 1 => 7211, 2 => 7204,), '13-18' => array(0 => 7200, 1 => 7203, 2 => 7204,), '13-19' => array(0 => 7206, 1 => 7204, 2 => 7207,), '13-20' => array(0 => 7206, 1 => 7207, 2 => 7204,), '13-21' => array(0 => 7208, 1 => 7207, 2 => 7204,), '13-22' => array(0 => 7206, 1 => 7200, 2 => 7213,), '13-23' => array(0 => 7201, 1 => 7210, 2 => 7213,), '13-24' => array(0 => 7203, 1 => 7213, 2 => 7204,), '13-25' => array(0 => 7208, 1 => 7203, 2 => 7213,), '13-26' => array(0 => 7207, 1 => 7209, 2 => 7213,), '13-27' => array(0 => 7208, 1 => 7211, 2 => 7204,), '13-28' => array(0 => 7200, 1 => 7203, 2 => 7204,), '13-29' => array(0 => 7206, 1 => 7204, 2 => 7207,), '13-30' => array(0 => 7206, 1 => 7207, 2 => 7204,),
                '14-1' => array(0 => 7208, 1 => 7207, 2 => 7204,), '14-2' => array(0 => 7206, 1 => 7200, 2 => 7213,), '14-3' => array(0 => 7201, 1 => 7210, 2 => 7213,), '14-4' => array(0 => 7203, 1 => 7213, 2 => 7204,), '14-5' => array(0 => 7208, 1 => 7203, 2 => 7213,), '14-6' => array(0 => 7207, 1 => 7209, 2 => 7213,), '14-7' => array(0 => 7208, 1 => 7211, 2 => 7204,), '14-8' => array(0 => 7200, 1 => 7203, 2 => 7204,), '14-9' => array(0 => 7206, 1 => 7204, 2 => 7207,), '14-10' => array(0 => 7206, 1 => 7207, 2 => 7204,), '14-11' => array(0 => 7208, 1 => 7207, 2 => 7204,), '14-12' => array(0 => 7206, 1 => 7200, 2 => 7213,), '14-13' => array(0 => 7201, 1 => 7210, 2 => 7213,), '14-14' => array(0 => 7203, 1 => 7213, 2 => 7204,), '14-15' => array(0 => 7208, 1 => 7203, 2 => 7213,), '14-16' => array(0 => 7207, 1 => 7209, 2 => 7213,), '14-17' => array(0 => 7208, 1 => 7211, 2 => 7204,), '14-18' => array(0 => 7200, 1 => 7203, 2 => 7204,), '14-19' => array(0 => 7206, 1 => 7204, 2 => 7207,), '14-20' => array(0 => 7206, 1 => 7207, 2 => 7204,), '14-21' => array(0 => 7208, 1 => 7207, 2 => 7204,), '14-22' => array(0 => 7206, 1 => 7200, 2 => 7213,), '14-23' => array(0 => 7201, 1 => 7210, 2 => 7213,), '14-24' => array(0 => 7203, 1 => 7213, 2 => 7204,), '14-25' => array(0 => 7208, 1 => 7203, 2 => 7213,), '14-26' => array(0 => 7207, 1 => 7209, 2 => 7213,), '14-27' => array(0 => 7208, 1 => 7211, 2 => 7204,), '14-28' => array(0 => 7200, 1 => 7203, 2 => 7204,), '14-29' => array(0 => 7206, 1 => 7204, 2 => 7207,), '14-30' => array(0 => 7206, 1 => 7207, 2 => 7204,),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            $subKey = $areaId . '-' . $node;
            if (isset(self::$_cacheArr[$key][$subKey])) {
                $chanceArr = array(
                    2000 => 0,
                    2800 => 1,
                    3200 => 2,
                    10000 => 3,
                );
                $materialLevel = self::getChanceConfig($chanceArr);
                if (isset(self::$_cacheArr[$key][$subKey][$materialLevel])) {
                    return array('id' => self::$_cacheArr[$key][$subKey][$materialLevel], 'num' => 1);
                }
            }
        }
        return false;
    }

    /**
     * 获取关卡任务道具
     * @param int $areaId 地区ID
     * @return int
     */
    public static function getLevelTaskItem($areaId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(7025, 7028, 7027, 7036, 7001, 7002, 7003, 7006,),
                2 => array(7026, 7029, 7039, 7007, 7008, 7011, 7012, 7090,),
                3 => array(7040, 7047, 7017, 7018, 7089, 7079, 7095, 7041,),
                4 => array(7033, 7034, 7042, 7019, 7020, 7021, 7087, 7091,),
                5 => array(7030, 7043, 7045, 7046, 7083, 7082, 7069, 7110,),
                6 => array(7107, 7038, 7031, 7048, 7093, 7097, 7092, 7044,),
                7 => array(7064, 7058, 7037, 7103, 7068, 7066, 7065, 7111,),
                8 => array(7101, 7070, 7100, 7102, 7061, 7057, 7099, 7098,),
                9 => array(7081, 7063, 7105, 7080, 7067, 7106, 7071, 7104,),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            if (isset(self::$_cacheArr[$key][$areaId])) {
                $index = array_rand(self::$_cacheArr[$key][$areaId]);
                return self::$_cacheArr[$key][$areaId][$index];
            }
        }
        return false;
    }

    /**
     * 随机隐藏关卡解锁道具
     * @param int $areaId 地区ID
     * @return int/false
     */
    public static function randHiddenLevelUnlockItem($areaId) {
        $valArr = array(
            0 => 0,
            1 => 1,
            2 => 2,
            3 => 3,
        );
        $keyArr = array(
            0 => 0,
            1 => 0,
            2 => 0,
            3 => 10000,
        );
        $x = 3 / (28 * pow(1.2, $areaId - 1));
        $y = $x + 0.02;
        $z = $y + 0.02;
        $m = ($x + $y + $z) / $x;
        $keyArr[2] = round($x / $m * 10000);
        $keyArr[1] = round($y / $m * 10000);
        $keyArr[0] = round($z / $m * 10000);
        // 累加起来
        $keyArr[1] += $keyArr[0];
        $keyArr[2] += $keyArr[1];
        $configArr = array_combine($keyArr, $valArr);
        // 返回节点编号(3表示得不到东西)
        $node = self::getChanceConfig($configArr);
        if ($node >= 3) {
            return false;
        }
        return 6001 + ($areaId - 1) * 3 + $node;
    }

    /**
     * 获取关卡奖励金币数
     * @param int $areaId 地区ID
     * @return int
     */
    public static function getLevelRewardSilver($areaId) {
        return 100 + 30 * $areaId;
    }

    /**
     * 获取关卡奖励经验
     * @param int $areaId 地区ID
     * @param int $node 节点编号[0,19]
     * @param int $grade 玩家的等级
     * @param bool $flag 递归时是否保留小数部分
     * @return int 经验
     */
    public static function getLevelRewardExp($areaId, $node, $grade, $flag = false) {
        $needGrade = self::getNeedGradeByAreaId($areaId);
        if ($grade < $needGrade) { // 理论上是不会进到这里
            return max(10, round(self::getLevelRewardExp($areaId, $node, $needGrade) - ($needGrade - $grade) * 4));
        } else if ($grade == $needGrade) {
            return $areaId * 15 + 20 + ceil($node / 5) * 2;
        } else if ($grade > $needGrade) {
            $needGrade2 = self::getNeedGradeByAreaId($areaId + 1);
            $lastGradeExp = self::getLevelRewardExp($areaId, $node, $grade - 1, true);
            if ($grade < $needGrade2) {
                return $lastGradeExp + 4;
            } else {
                if ($flag) {
                    return max(10, $lastGradeExp - 2 * ($grade - $needGrade) / 3);
                } else {
                    return max(10, round($lastGradeExp - 2 * ($grade - $needGrade) / 3));
                }
            }
        }
    }

    /**
     * 获取关卡奖励道具等级
     * @param int $areaId 地区ID
     * @return array
     */
    public static function getLevelRewardItemLevel($areaId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                //1001 => 10000, // 任务道具
                1002 => 10000, // 任务道具
                1003 => 10000, // 任务道具
                10 => 10000, // 合成道具
                8 => 200, // RMB道具
                7 => round((25 - $areaId) / 7 * 500), // 收藏品道具
                3 => 9500, // 经验值道具
                2 => 9500, // 金币道具
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            $count = rand(2, 6); // 泡泡个数
            $num = $count;
            $itemLevelArr = array();
            foreach (self::$_cacheArr[$key] as $itemLevel => $max) {
                if ($num <= 0) {
                    break;
                }
                $rand = rand(1, 10000);
                if ($rand <= $max) {
                    $itemLevelArr[] = $itemLevel;
                    --$num;
                }
            }
            while (count($itemLevelArr) < 6) {
                $itemLevel = rand(2, 3);
                $itemLevelArr[] = $itemLevel;
            }
            return $itemLevelArr;
        }
        return false;
    }

    /**
     * 获取关卡翻牌奖励配置
     * @return array/false
     */
    public static function getFinalLevelChestConfig() {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                2000 => array('id' => 7901, 'num' => 20,),
                3500 => array('id' => 7901, 'num' => 10,),
                5000 => array('id' => 7902, 'num' => 10,),
                6000 => array('id' => 7902, 'num' => 5,),
                6100 => array('id' => 5004, 'num' => 1,),
                6150 => array('id' => 5005, 'num' => 1,),
                6200 => array('id' => 5009, 'num' => 1,),
                6230 => array('id' => 5010, 'num' => 1,),
                6255 => array('id' => 5014, 'num' => 1,),
                6270 => array('id' => 5015, 'num' => 1,),
                6285 => array('id' => 5019, 'num' => 1,),
                6295 => array('id' => 5020, 'num' => 1,),
                6299 => array('id' => 5024, 'num' => 1,),
                6300 => array('id' => 5025, 'num' => 1,),
                7100 => array('id' => 4001, 'num' => 1,),
                7300 => array('id' => 4002, 'num' => 1,),
                7400 => array('id' => 4003, 'num' => 1,),
                7500 => array('id' => 4004, 'num' => 1,),
                7600 => array('id' => 4005, 'num' => 1,),
                9600 => array('id' => '7001,7002,7003,7006,7007,7008,7111,7011,7012,7017,7018,7019,7020,7021,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7079,7080,7081,7082,7083,7086,7087,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7110,7111', 'num' => 1,),
                9800 => array('id' => '3002,3004,3075,3078,3029,3017,3027,3009,3064,3022,3087,3088', 'num' => 1,),
                10000 => array('id' => '7203,7202,7206,7208,7209,7211,7212,7200,7201,7204,7207,7210,7205,7213', 'num' => 1,),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            $tempArr = self::getChanceConfig(self::$_cacheArr[$key]);
            if (!is_numeric($tempArr['id'])) {
                $itemIdArr = explode(',', $tempArr['id']);
                $tempArr['id'] = $itemIdArr[array_rand($itemIdArr)];
            }
            return $tempArr;
        }
        return false;
    }

    /**
     * 获取概率配置
     * @param array $dataArr 数据数组
     * @param int $randMax 最大随机数
     * @return array
     */
    public static function getChanceConfig($dataArr, $randMax = 10000) {
        $nodeId = rand(1, $randMax);
        foreach ($dataArr as $nodeIdMax => $configArr) { // 数据必须分$randMax份定义,相同数据合并成段
            if ($nodeId <= $nodeIdMax) {
                return $configArr;
            }
        }
        throw new UserException(UserException::ERROR_SYSTEM, 'CHANCE_CONFIG_ERROR', $nodeId);
    }

    /**
     * 获取第一次系统奖励
     * @param int $offset 偏移
     * @return array/false
     */
    public static function getFirstReward($offset) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                11 => array(array('id' => 7907, 'num' => 3,), array('id' => 7901, 'num' => 20,),),
                12 => array(array('id' => 7908, 'num' => 5,), array('id' => 7901, 'num' => 20,),),
                7 => array(array('id' => 7902, 'num' => 100,), array('id' => 7901, 'num' => 20,),),
                5 => array(array('id' => 7907, 'num' => 5,), array('id' => 7908, 'num' => 5,),),
                10 => array(array('id' => 7908, 'num' => 5,), array('id' => 7901, 'num' => 20,),),
                4 => array(array('id' => 7902, 'num' => 50,), array('id' => 7901, 'num' => 20,),),
                13 => array(array('id' => 7907, 'num' => 50,), array('id' => 7901, 'num' => 20,),),
                14 => array(array('id' => 7907, 'num' => 30,), array('id' => 7901, 'num' => 20,),),
                15 => array(array('id' => 7907, 'num' => 30,), array('id' => 7901, 'num' => 20,),),
                16 => array(array('id' => 7908, 'num' => 20,), array('id' => 7901, 'num' => 20,),),
            );
        }
        if (isset(self::$_cacheArr[$key][$offset])) {
            return self::$_cacheArr[$key][$offset];
        }
        return false;
    }

    /**
     * 获取兑换组数据
     * @param int $groupId 兑换组ID
     * @return array/false 取到时返回array,没取到时返回false
     */
    public static function getExchangeConfig($groupId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('item_ids' => array(5001, 5002, 5003, 5004, 5005), 'reward' => array(array('id' => 7901, 'num' => 3000,), array('id' => 7902, 'num' => 500,), array('id' => 7907, 'num' => 100,),),),
                2 => array('item_ids' => array(5006, 5007, 5008, 5009, 5010), 'reward' => array(array('id' => 7901, 'num' => 5000,), array('id' => 7902, 'num' => 800,), array('id' => 7907, 'num' => 200,),),),
                3 => array('item_ids' => array(5011, 5012, 5013, 5014, 5015), 'reward' => array(array('id' => 7901, 'num' => 8000,), array('id' => 7902, 'num' => 1000,), array('id' => 7907, 'num' => 300,),),),
                4 => array('item_ids' => array(5016, 5017, 5018, 5019, 5020), 'reward' => array(array('id' => 7901, 'num' => 10000,), array('id' => 7902, 'num' => 5000,), array('id' => 7907, 'num' => 500,),),),
                5 => array('item_ids' => array(5021, 5022, 5023, 5024, 5025), 'reward' => array(array('id' => 7901, 'num' => 15000,), array('id' => 7902, 'num' => 8000,), array('id' => 7907, 'num' => 700,),),),
                6 => array('item_ids' => array(5026, 5027, 5028, 5029, 5030), 'reward' => array(array('id' => 7901, 'num' => 20000,), array('id' => 7902, 'num' => 9000,), array('id' => 7907, 'num' => 1000,),),),
                7 => array('item_ids' => array(5031, 5032, 5033, 5034, 5035), 'reward' => array(array('id' => 7901, 'num' => 25000,), array('id' => 7902, 'num' => 10000,), array('id' => 7907, 'num' => 1200,),),),
                8 => array('item_ids' => array(5036, 5037, 5038, 5039, 5040), 'reward' => array(array('id' => 7901, 'num' => 30000,), array('id' => 7902, 'num' => 11000,), array('id' => 7907, 'num' => 1500,),),),
                9 => array('item_ids' => array(5041, 5042, 5043, 5044, 5045), 'reward' => array(array('id' => 7901, 'num' => 35000,), array('id' => 7902, 'num' => 12000,), array('id' => 7907, 'num' => 1800,),),),
                10 => array('item_ids' => array(5046, 5047, 5048, 5049, 5050), 'reward' => array(array('id' => 7901, 'num' => 40000,), array('id' => 7902, 'num' => 13000,), array('id' => 7907, 'num' => 2000,),),),
            );
        }
        if (isset(self::$_cacheArr[$key][$groupId])) {
            return self::$_cacheArr[$key][$groupId];
        }
        return false;
    }

    /**
     * 获取套装数据
     * @param int $suitId 套装ID
     * @return array/false 取到时返回array,没取到时返回false
     */
    public static function getSuitConfig($suitId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                8001 => array(1171, 1174, 1173, 1175),
                8002 => array(1061, 1062, 1063, 1064, 1065),
                8003 => array(1066, 1067, 1068, 1069, 1070),
                8004 => array(1125, 1126, 1127, 1128),
                8005 => array(1129, 1130, 1131, 1132, 1133),
                8006 => array(1149, 1150, 1151, 1152),
                8007 => array(1153, 1154, 1155, 1156, 1157),
                8008 => array(1158, 1159, 1160, 1161),
                8009 => array(1162, 1163, 1164, 1165),
                8010 => array(1177, 1180, 1181),
            );
        }
        if (isset(self::$_cacheArr[$key][$suitId])) {
            return self::$_cacheArr[$key][$suitId];
        }
        return false;
    }

    /**
     * 获取称号配置
     * @param int $titleId
     * @return array/false
     */
    public static function getTitleConfig($titleId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('ref' => User::CREDIT_LEVEL_CHALLENGE, 'times' => 100, 'reward' => array(array('id' => 7901, 'num' => 10))),
                2 => array('ref' => User::CREDIT_LEVEL_CHALLENGE, 'times' => 300, 'reward' => array(array('id' => 7901, 'num' => 30))),
                3 => array('ref' => User::CREDIT_LEVEL_CHALLENGE, 'times' => 600, 'reward' => array(array('id' => 7901, 'num' => 50))),
                4 => array('ref' => User::CREDIT_LEVEL_CHALLENGE, 'times' => 1000, 'reward' => array(array('id' => 7901, 'num' => 100))),
                //
                5 => array('ref' => User::CREDIT_COLLECTION_EXCHANGE, 'times' => 10, 'reward' => array(array('id' => 7901, 'num' => 50))),
                6 => array('ref' => User::CREDIT_COLLECTION_EXCHANGE, 'times' => 30, 'reward' => array(array('id' => 7901, 'num' => 100))),
                7 => array('ref' => User::CREDIT_COLLECTION_EXCHANGE, 'times' => 60, 'reward' => array(array('id' => 7901, 'num' => 300))),
                8 => array('ref' => User::CREDIT_COLLECTION_EXCHANGE, 'times' => 100, 'reward' => array(array('id' => 7901, 'num' => 500))),
                //
                9 => array('ref' => User::CREDIT_BLESS_FRIEND, 'times' => 100, 'reward' => array(array('id' => 7902, 'num' => 1))),
                10 => array('ref' => User::CREDIT_BLESS_FRIEND, 'times' => 300, 'reward' => array(array('id' => 7902, 'num' => 2))),
                11 => array('ref' => User::CREDIT_BLESS_FRIEND, 'times' => 600, 'reward' => array(array('id' => 7902, 'num' => 3))),
                12 => array('ref' => User::CREDIT_BLESS_FRIEND, 'times' => 1000, 'reward' => array(array('id' => 7902, 'num' => 4))),
                //
                13 => array('ref' => User::CREDIT_BLESSED_BY_FRIEND, 'times' => 100, 'reward' => array(array('id' => 7901, 'num' => 50))),
                14 => array('ref' => User::CREDIT_BLESSED_BY_FRIEND, 'times' => 300, 'reward' => array(array('id' => 7901, 'num' => 100))),
                15 => array('ref' => User::CREDIT_BLESSED_BY_FRIEND, 'times' => 600, 'reward' => array(array('id' => 7901, 'num' => 150))),
                16 => array('ref' => User::CREDIT_BLESSED_BY_FRIEND, 'times' => 1000, 'reward' => array(array('id' => 7901, 'num' => 200))),
                //
                17 => array('ref' => User::CREDIT_VISIST_FRIEND, 'times' => 100, 'reward' => array(array('id' => 4001, 'num' => 1))),
                18 => array('ref' => User::CREDIT_VISIST_FRIEND, 'times' => 300, 'reward' => array(array('id' => 4001, 'num' => 2))),
                19 => array('ref' => User::CREDIT_VISIST_FRIEND, 'times' => 600, 'reward' => array(array('id' => 4001, 'num' => 3))),
                20 => array('ref' => User::CREDIT_VISIST_FRIEND, 'times' => 1000, 'reward' => array(array('id' => 4001, 'num' => 4))),
                //
                21 => array('ref' => User::CREDIT_LEVEL_FAIL, 'times' => 100, 'reward' => array(array('id' => 7901, 'num' => 10))),
                22 => array('ref' => User::CREDIT_LEVEL_FAIL, 'times' => 300, 'reward' => array(array('id' => 7901, 'num' => 30))),
                23 => array('ref' => User::CREDIT_LEVEL_FAIL, 'times' => 600, 'reward' => array(array('id' => 7901, 'num' => 50))),
                24 => array('ref' => User::CREDIT_LEVEL_FAIL, 'times' => 1000, 'reward' => array(array('id' => 7901, 'num' => 100))),
            );
        }
        if (isset(self::$_cacheArr[$key][$titleId])) {
            return self::$_cacheArr[$key][$titleId];
        }
        return false;
    }

    /**
     * 获取新手礼包奖励
     * @param int $grade 等级
     * @return array/false
     */
    public static function getNoviceGiftReward($grade) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                3 => array('offset' => 0, 'items' => array(array('id' => 4002, 'num' => 5))),
                5 => array('offset' => 1, 'items' => array(array('id' => 3002, 'num' => 4))),
                10 => array('offset' => 2, 'items' => array(array('id' => 7901, 'num' => 200))),
                15 => array('offset' => 3, 'items' => array(array('id' => 7907, 'num' => 20))),
            );
        }
        if (isset(self::$_cacheArr[$key][$grade])) {
            return self::$_cacheArr[$key][$grade];
        }
        return false;
    }

    /**
     * 获取宝箱奖励
     * @param int $index 宝箱编号
     * @return array/fasle
     */
    public static function getChestRewardConfig($index) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(array('id' => 7901, 'num' => 400), array('id' => 7902, 'num' => 500), array('id' => 7908, 'num' => 200)),
            );
        }
        if (isset(self::$_cacheArr[$key][$index])) {
            return self::$_cacheArr[$key][$index];
        }
        return false;
    }

    /**
     * 随机生成分享任务道具数量
     * @return int
     */
    public static function randSlotTaskItemNum() {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                3500 => 1,
                7000 => 2,
                10000 => 3,
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            return self::getChanceConfig(self::$_cacheArr[$key]);
        }
        return 3;
    }

    /**
     * 随机发布任务状态
     * @param int $grade 玩家等级
     * @return array/false
     */
    public static function randSlotTaskReward($grade) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                343 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7907, 'num' => 1,),),
                686 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7907, 'num' => 5,),),
                1029 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7907, 'num' => 10,),),
                1372 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7907, 'num' => 1,),),
                1715 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7907, 'num' => 5,),),
                2058 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7907, 'num' => 10,),),
                2401 => array(0 => array('id' => 7908, 'num' => 20,), 1 => array('id' => 7907, 'num' => 10,),),
                2744 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7902, 'num' => 50,),),
                3087 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7902, 'num' => 100,),),
                3430 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7902, 'num' => 50,),),
                3773 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7902, 'num' => 100,),),
                3873 => array(0 => array('id' => 7908, 'num' => 20,), 1 => array('id' => 7902, 'num' => 400,),),
                4216 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7901, 'num' => 200,),),
                4559 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7901, 'num' => 800,),),
                4902 => array(0 => array('id' => 7908, 'num' => 3,), 1 => array('id' => 7901, 'num' => 2000,),),
                5245 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7901, 'num' => 200,),),
                5588 => array(0 => array('id' => 7908, 'num' => 8,), 1 => array('id' => 7901, 'num' => 800,),),
                5688 => array(0 => array('id' => 7908, 'num' => 20,), 1 => array('id' => 7901, 'num' => 2000,),),
                6031 => array(0 => array('id' => 7907, 'num' => 1,), 1 => array('id' => 7902, 'num' => 50,),),
                6374 => array(0 => array('id' => 7907, 'num' => 1,), 1 => array('id' => 7902, 'num' => 100,),),
                6717 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7902, 'num' => 50,),),
                7060 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7902, 'num' => 100,),),
                7160 => array(0 => array('id' => 7907, 'num' => 10,), 1 => array('id' => 7902, 'num' => 400,),),
                7503 => array(0 => array('id' => 7907, 'num' => 1,), 1 => array('id' => 7901, 'num' => 200,),),
                7846 => array(0 => array('id' => 7907, 'num' => 1,), 1 => array('id' => 7901, 'num' => 800,),),
                8189 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7901, 'num' => 200,),),
                8532 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7901, 'num' => 800,),),
                8875 => array(0 => array('id' => 7902, 'num' => 50,), 1 => array('id' => 7901, 'num' => 200,),),
                9218 => array(0 => array('id' => 7902, 'num' => 50,), 1 => array('id' => 7901, 'num' => 800,),),
                9561 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 200,),),
                9904 => array(0 => array('id' => 7902, 'num' => 100,), 1 => array('id' => 7901, 'num' => 800,),),
                10004 => array(0 => array('id' => 7902, 'num' => 400,), 1 => array('id' => 7901, 'num' => 2000,),),
                10054 => array(0 => array('id' => 7902, 'num' => 600,), 1 => array('id' => 7901, 'num' => 800,),),
                10104 => array(0 => array('id' => 7902, 'num' => 600,), 1 => array('id' => 7907, 'num' => 5,),),
                10154 => array(0 => array('id' => 7902, 'num' => 600,), 1 => array('id' => 7908, 'num' => 3,),),
                10204 => array(0 => array('id' => 7902, 'num' => 800,), 1 => array('id' => 7901, 'num' => 200,),),
                10254 => array(0 => array('id' => 7902, 'num' => 800,), 1 => array('id' => 7907, 'num' => 20,),),
                10304 => array(0 => array('id' => 7902, 'num' => 800,), 1 => array('id' => 7908, 'num' => 20,),),
                10354 => array(0 => array('id' => 7907, 'num' => 20,), 1 => array('id' => 7901, 'num' => 2000,),),
                10404 => array(0 => array('id' => 7907, 'num' => 10,), 1 => array('id' => 7901, 'num' => 800,),),
                10454 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7908, 'num' => 10,),),
                10504 => array(0 => array('id' => 7907, 'num' => 20,), 1 => array('id' => 7908, 'num' => 20,),),
                10554 => array(0 => array('id' => 7902, 'num' => 1200,), 1 => array('id' => 7901, 'num' => 2000,),),
                10604 => array(0 => array('id' => 7902, 'num' => 1200,), 1 => array('id' => 7907, 'num' => 1,),),
                10654 => array(0 => array('id' => 7902, 'num' => 1200,), 1 => array('id' => 7908, 'num' => 3,),),
                10704 => array(0 => array('id' => 7902, 'num' => 1600,), 1 => array('id' => 7901, 'num' => 2000,),),
                10754 => array(0 => array('id' => 7902, 'num' => 1600,), 1 => array('id' => 7907, 'num' => 10,),),
                10804 => array(0 => array('id' => 7902, 'num' => 1600,), 1 => array('id' => 7908, 'num' => 20,),),
                10854 => array(0 => array('id' => 7907, 'num' => 5,), 1 => array('id' => 7908, 'num' => 10,),),
                10904 => array(0 => array('id' => 7907, 'num' => 10,), 1 => array('id' => 7901, 'num' => 2000,),),
                10954 => array(0 => array('id' => 7907, 'num' => 20,), 1 => array('id' => 7901, 'num' => 4000,),),
                11004 => array(0 => array('id' => 7907, 'num' => 30,), 1 => array('id' => 7908, 'num' => 30,),),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            if ($grade <= 10) {
                $randMax = 10004;
            } else if ($grade <= 20) {
                $randMax = 10504;
            } else {
                $randMax = 11004;
            }
            return self::getChanceConfig(self::$_cacheArr[$key], $randMax);
        }
        return false;
    }

    /**
     * 获取邀请奖励配置
     * @return array/false
     */
    public static function getInviteRewardConfig() {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(array('id' => 7902, 'num' => 10), array('id' => 7901, 'num' => 20)),
                10 => array(array('id' => 7902, 'num' => 300), array('id' => 6001, 'num' => 1), array('id' => 7901, 'num' => 300), array('id' => 4001, 'num' => 10)),
                30 => array(array('id' => 7902, 'num' => 1000), array('id' => 6001, 'num' => 1), array('id' => 7901, 'num' => 1000), array('id' => 4002, 'num' => 12)),
                50 => array(array('id' => 7902, 'num' => 2000), array('id' => 6001, 'num' => 1), array('id' => 7901, 'num' => 2000), array('id' => 4003, 'num' => 15)),
                80 => array(array('id' => 7902, 'num' => 4000), array('id' => 6001, 'num' => 1), array('id' => 7901, 'num' => 3600), array('id' => 4004, 'num' => 20)),
                100 => array(array('id' => 7902, 'num' => 8000), array('id' => 6001, 'num' => 1), array('id' => 7901, 'num' => 5000), array('id' => 4005, 'num' => 30)),
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            return self::$_cacheArr[$key];
        }
        return false;
    }

    /**
     * 问号兑换奖励
     */
    public static function getQuestionRewardConfig() {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(
                    3600 => array('id' => 7901, 'num' => 1000),
                    6100 => array('id' => 7901, 'num' => 2000),
                    8100 => array('id' => 7901, 'num' => 4000),
                    9390 => array('id' => 7901, 'num' => 8000),
                    10000 => array('id' => 7901, 'num' => 16000),
                ),
                2 => array(
                    3000 => array('id' => 4002, 'num' => 1),
                    5500 => array('id' => 4002, 'num' => 2),
                    7500 => array('id' => 4002, 'num' => 3),
                    8500 => array('id' => 4002, 'num' => 4),
                    10000 => array('id' => 4002, 'num' => 8),
                ),
                3 => array(
                    3000 => array('id' => 7902, 'num' => 100),
                    5500 => array('id' => 7902, 'num' => 150),
                    7500 => array('id' => 7902, 'num' => 200),
                    9000 => array('id' => 7902, 'num' => 250),
                    10000 => array('id' => 7902, 'num' => 500),
                ),
            );
        }
        $itemArr = array();
        foreach (self::$_cacheArr[$key] as $val) {
            $itemArr[] = self::getChanceConfig($val);
        }
        return $itemArr;
    }

    /**
     * 获取每日任务相关配置
     * @param int $taskId 任务ID
     * @return array/false
     */
    public static function getDayTaskConfig($taskId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('num' => 10, 'reward' => array(array('id' => 7908, 'num' => 10))),
                2 => array('num' => 10, 'reward' => array(array('id' => 7901, 'num' => 20))),
                3 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 100))),
                4 => array('num' => 20, 'reward' => array(array('id' => 7902, 'num' => 200))),
                5 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 100))),
                6 => array('num' => 1, 'reward' => array(array('id' => 7902, 'num' => 100))),
                7 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 100))),
                8 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 100))),
                9 => array('num' => 1, 'reward' => array(array('id' => 7902, 'num' => 150))),
                10 => array('num' => 3, 'reward' => array(array('id' => 7908, 'num' => 5))),
                11 => array('num' => 3, 'reward' => array(array('id' => 7908, 'num' => 10))),
                12 => array('num' => 10, 'reward' => array(array('id' => 7907, 'num' => 5))),
                13 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 100))),
                14 => array('num' => 3, 'reward' => array(array('id' => 7902, 'num' => 200))),
            );
        }
        if (isset(self::$_cacheArr[$key][$taskId])) {
            return self::$_cacheArr[$key][$taskId];
        }
        return false;
    }

    /**
     * 获取每日任务积分奖励配置
     * @param int $taskId 任务ID(101=30积分,102=60积分,103=100积分)
     * @return array/false
     */
    public static function getDayTaskPointReward($taskId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                101 => array(
                    2500 => array(array('id' => 7902, 'num' => 400)),
                    5000 => array(array('id' => 7901, 'num' => 200)),
                    7500 => array(array('id' => 7907, 'num' => 20)),
                    10000 => array(array('id' => '7203,7206,7208,7209,7212,7211,7202', 'num' => 1)),
                ),
                102 => array(
                    1000 => array(array('id' => '7207,7200,7201,7204,7210', 'num' => 1)),
                    2000 => array(array('id' => '7205,7213', 'num' => 1)),
                    4000 => array(array('id' => 4002, 'num' => 1)),
                    6000 => array(array('id' => 7500, 'num' => 1)),
                    8000 => array(array('id' => 7902, 'num' => 600)),
                    10000 => array(array('id' => 7904, 'num' => 20)),
                ),
                103 => array(
                    2000 => array(array('id' => 7902, 'num' => 1000)),
                    4000 => array(array('id' => 7901, 'num' => 500,)),
                    6000 => array(array('id' => 7907, 'num' => 60)),
                    8000 => array(array('id' => 7904, 'num' => 40)),
                    10000 => array(array('id' => 7904, 'num' => 60)),
                ),
            );
        }
        if (isset(self::$_cacheArr[$key][$taskId])) {
            $tempArr = self::getChanceConfig(self::$_cacheArr[$key][$taskId]);
            foreach ($tempArr as &$item) {
                if (!is_numeric($item['id'])) {
                    $arr = explode(',', $item['id']);
                    $item['id'] = $arr[array_rand($arr)];
                }
            }
            return $tempArr;
        }
        return false;
    }

    /**
     * 获取每日任务相关配置
     * @param int $signTimes 连续签到次数
     * @return array/false
     */
    public static function getSignReward($signTimes) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(array('id' => 7901, 'num' => 20)),
                2 => array(array('id' => 7902, 'num' => 50)),
                3 => array(array('id' => 7907, 'num' => 3)),
                4 => array(array('id' => 7908, 'num' => 10)),
                5 => array(array('id' => 7901, 'num' => 50)),
                6 => array(array('id' => 4002, 'num' => 1), array('id' => 3002, 'num' => 1)),
                7 => array(array('id' => 7902, 'num' => 150)),
                8 => array(array('id' => 7907, 'num' => 8)),
                9 => array(array('id' => 7901, 'num' => 100)),
                10 => array(array('id' => 7902, 'num' => 300)),
                11 => array(array('id' => 7908, 'num' => 100)),
                12 => array(array('id' => 4003, 'num' => 2), array('id' => 3075, 'num' => 1)),
            );
        }
        if (isset(self::$_cacheArr[$key][$signTimes])) {
            return self::$_cacheArr[$key][$signTimes];
        }
        return false;
    }

    /**
     * 获取果树配置
     * @param int $level 果树等级
     * @return array/false
     */
    public static function getTreeConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 5, 'max' => 2, 'cd' => 1800, 'need' => array(0 => array('id' => 7901, 'num' => 1000,),),),
                2 => array('grade' => 10, 'max' => 3, 'cd' => 1620, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),),),
                3 => array('grade' => 15, 'max' => 4, 'cd' => 1440, 'need' => array(0 => array('id' => 7901, 'num' => 4000,),),),
                4 => array('grade' => 20, 'max' => 6, 'cd' => 1260, 'need' => array(0 => array('id' => 7901, 'num' => 12000,),),),
                5 => array('grade' => 25, 'max' => 8, 'cd' => 1020, 'need' => array(0 => array('id' => 7901, 'num' => 36000,),),),
                6 => array('grade' => 30, 'max' => 10, 'cd' => 780, 'need' => array(0 => array('id' => 7901, 'num' => 72000,),),),
                7 => array('grade' => 40, 'max' => 12, 'cd' => 540, 'need' => array(0 => array('id' => 7901, 'num' => 144000,),),),
                8 => array('grade' => 50, 'max' => 15, 'cd' => 300, 'need' => array(0 => array('id' => 7901, 'num' => 432000,),),),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取果树果子随机奖励
     * @param int $level 果树等级
     * @return array/false
     */
    public static function getFruitRandReward($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(3333 => array(0 => array('id' => 7902, 'num' => 100,),), 6666 => array(0 => array('id' => 7901, 'num' => 50,),), 10000 => array(0 => array('id' => 7904, 'num' => 3,),),),
                2 => array(3333 => array(0 => array('id' => 7902, 'num' => 200,),), 6666 => array(0 => array('id' => 7901, 'num' => 100,),), 10000 => array(0 => array('id' => 7904, 'num' => 4,),),),
                3 => array(3333 => array(0 => array('id' => 7902, 'num' => 400,),), 6666 => array(0 => array('id' => 7901, 'num' => 150,),), 10000 => array(0 => array('id' => 7904, 'num' => 5,),),),
                4 => array(3333 => array(0 => array('id' => 7902, 'num' => 600,),), 6666 => array(0 => array('id' => 7901, 'num' => 200,),), 10000 => array(0 => array('id' => 7904, 'num' => 6,),),),
                5 => array(3333 => array(0 => array('id' => 7902, 'num' => 1000,),), 6666 => array(0 => array('id' => 7901, 'num' => 400,),), 10000 => array(0 => array('id' => 7904, 'num' => 8,),),),
                6 => array(3333 => array(0 => array('id' => 7902, 'num' => 1500,),), 6666 => array(0 => array('id' => 7901, 'num' => 800,),), 10000 => array(0 => array('id' => 7904, 'num' => 10,),),),
                7 => array(3333 => array(0 => array('id' => 7902, 'num' => 2000,),), 6666 => array(0 => array('id' => 7901, 'num' => 1200,),), 10000 => array(0 => array('id' => 7904, 'num' => 12,),),),
                8 => array(3333 => array(0 => array('id' => 7902, 'num' => 4000,),), 6666 => array(0 => array('id' => 7901, 'num' => 1500,),), 10000 => array(0 => array('id' => 7904, 'num' => 15,),),),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::getChanceConfig(self::$_cacheArr[$key][$level]);
        }
        return false;
    }

    /**
     * 获取合成配置数据
     * @staticvar array $configArr
     * @param int $id 合成公式编号
     * @return array/false
     */
    public static function getMergeItemConfig($mergeId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('need' => array(7203 => 3, 7202 => 2, 7200 => 1, 7205 => 1,), 'final' => 3022, 'rate' => 20,), //扫把
                2 => array('need' => array(7204 => 1, 7201 => 2, 7205 => 1,), 'final' => 3075, 'rate' => 40,), //弹簧
                3 => array('need' => array(7200 => 1, 7202 => 1, 7204 => 1, 7205 => 1,), 'final' => 3002, 'rate' => 85,), //小木板
                4 => array('need' => array(7200 => 2, 7201 => 1, 7205 => 1,), 'final' => 3004, 'rate' => 85,), //大木箱
                5 => array('need' => array(7200 => 2, 7204 => 1, 7202 => 2, 7205 => 1,), 'final' => 3078, 'rate' => 40,), //弹弓
                6 => array('need' => array(7206 => 2, 7208 => 1, 7205 => 1,), 'final' => 3017, 'rate' => 85,), //小蘑菇
                7 => array('need' => array(7207 => 1, 7206 => 2, 7209 => 1, 7205 => 1,), 'final' => 3009, 'rate' => 20,), //小旋风
                8 => array('need' => array(3009 => 1, 7209 => 3, 7205 => 1,), 'final' => 3064, 'rate' => 10,), //大旋风
                9 => array('need' => array(7208 => 1, 7206 => 2, 7205 => 1,), 'final' => 3088, 'rate' => 40), //杀虫剂
                10 => array('need' => array(7209 => 1, 7203 => 2, 7205 => 1,), 'final' => 3087, 'rate' => 40), //火把
                11 => array('need' => array(7212 => 1, 7206 => 1, 7208 => 1, 7205 => 1,), 'final' => 3029, 'rate' => 85,), // 过期热狗
                12 => array('need' => array(7209 => 1, 7206 => 2, 7205 => 1,), 'final' => 3027, 'rate' => 40,), //骨头
                13 => array('need' => array(7212 => 2, 7211 => 1,), 'final' => 4002, 'rate' => 85), // 甜甜圈
                14 => array('need' => array(4002 => 2, 7212 => 1,), 'final' => 4003, 'rate' => 40), //巧克力面包
                15 => array('need' => array(4003 => 1, 7213 => 1,), 'final' => 4004, 'rate' => 20), //杏仁面包
                16 => array('need' => array(4004 => 1, 7207 => 2,), 'final' => 4005, 'rate' => 10), //抹茶泡芙
            );
        }
        if (isset(self::$_cacheArr[$key][$mergeId])) {
            return self::$_cacheArr[$key][$mergeId];
        }
        return false;
    }

    /**
     * 获取精灵工坊配置
     * @param int $level 精灵工坊等级
     * @return array/false
     */
    public static function getWorkshopConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(
                    'grade' => 5, 'spirit' => 0, 'need' => array(array('id' => 7901, 'num' => 2000)),
                    'stoveId' => 1, 'maxSkill' => 3, 'successExp' => 1, 'failExp' => 0, 'mergeId' => array(3, 4, 6, 11, 13),
                ),
                2 => array(
                    'grade' => 15, 'spirit' => 1, 'need' => array(array('id' => 7901, 'num' => 4000)),
                    'stoveId' => 2, 'maxSkill' => 4, 'successExp' => 2, 'failExp' => 1, 'mergeId' => array(3, 4, 6, 11, 13),
                ),
                3 => array(
                    'grade' => 20, 'spirit' => 1, 'need' => array(array('id' => 7901, 'num' => 8000)),
                    'stoveId' => 3, 'maxSkill' => 5, 'successExp' => 3, 'failExp' => 1, 'mergeId' => array(2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14),
                ),
                4 => array(
                    'grade' => 25, 'spirit' => 2, 'need' => array(array('id' => 7901, 'num' => 24000)),
                    'stoveId' => 4, 'maxSkill' => 6, 'successExp' => 4, 'failExp' => 2, 'mergeId' => array(2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14),
                ),
                5 => array(
                    'grade' => 30, 'spirit' => 2, 'need' => array(array('id' => 7901, 'num' => 48000)),
                    'stoveId' => 5, 'maxSkill' => 7, 'successExp' => 5, 'failExp' => 2, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15),
                ),
                6 => array(
                    'grade' => 35, 'spirit' => 3, 'need' => array(array('id' => 7901, 'num' => 96000)),
                    'stoveId' => 6, 'maxSkill' => 8, 'successExp' => 6, 'failExp' => 3, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15),
                ),
                7 => array(
                    'grade' => 40, 'spirit' => 3, 'need' => array(array('id' => 7901, 'num' => 192000)),
                    'stoveId' => 7, 'maxSkill' => 9, 'successExp' => 7, 'failExp' => 3, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                ),
                8 => array(
                    'grade' => 50, 'spirit' => 4, 'need' => array(array('id' => 7901, 'num' => 384000)),
                    'stoveId' => 8, 'maxSkill' => 10, 'successExp' => 8, 'failExp' => 4, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                ),
                9 => array(
                    'grade' => 60, 'spirit' => 5, 'need' => array(array('id' => 7901, 'num' => 768000)),
                    'stoveId' => 8, 'maxSkill' => 10, 'successExp' => 9, 'failExp' => 4, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                ),
                10 => array(
                    'grade' => 70, 'spirit' => 6, 'need' => array(array('id' => 7901, 'num' => 1152000)),
                    'stoveId' => 8, 'maxSkill' => 10, 'successExp' => 10, 'failExp' => 5, 'mergeId' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
                ),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取魔法蜂巢配置
     * @param int $level 魔法蜂巢等级
     * @return array/false
     */
    public static function getHoneybeeConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 5, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),), 'max' => 1,),
                2 => array('grade' => 15, 'need' => array(0 => array('id' => 7901, 'num' => 4000,),), 'max' => 2,),
                3 => array('grade' => 20, 'need' => array(0 => array('id' => 7901, 'num' => 8000,),), 'max' => 3,),
                4 => array('grade' => 25, 'need' => array(0 => array('id' => 7901, 'num' => 24000,),), 'max' => 5,),
                5 => array('grade' => 30, 'need' => array(0 => array('id' => 7901, 'num' => 48000,),), 'max' => 6,),
                6 => array('grade' => 40, 'need' => array(0 => array('id' => 7901, 'num' => 96000,),), 'max' => 7,),
                7 => array('grade' => 50, 'need' => array(0 => array('id' => 7901, 'num' => 192000,),), 'max' => 8,),
                8 => array('grade' => 60, 'need' => array(0 => array('id' => 7901, 'num' => 576000,),), 'max' => 10,),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 根据合成技能熟练度获取等级
     * @param int $exp 精灵工坊熟练度
     * @return int/false
     */
    public static function getSkillGradeByExp($exp) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                0 => 0,7 => 1, 32 => 2, 130 => 3, 508 => 4, 1669 => 5, 3748 => 6, 8272 => 7, 16897 => 8, 29392 => 9, 46777 => 10, 999999999 => 11,
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            foreach (self::$_cacheArr[$key] as $expMax => $grade) {
                if ($exp < $expMax) {
                    return $grade - 1;
                } else if ($exp == $expMax) {
                    return $grade;
                }
            }
        }
        return false;
    }

    /**
     * 根据合成技能等级获取熟练度
     * @param int $level 精灵工坊等级
     * @return int/false
     */
    public static function getSkillExpByGrade($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                0 => 1, 1 => 7, 2 => 32, 3 => 130, 4 => 508, 5 => 1669, 6 => 3748, 7 => 8272, 8 => 16897, 9 => 29392, 10 => 46777, 11 => 999999999,
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 合成技能等级配制数据
     * @param int $level 合成技能等级
     * @return array/false
     */
    public static function getSkillConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                0 => array('cd' => 60, 'rate' => 0, 'luckyRate' => 0),
                1 => array('cd' => 60, 'rate' => 5, 'luckyRate' => 0),
                2 => array('cd' => 60, 'rate' => 8, 'luckyRate' => 5,),
                3 => array('cd' => 60, 'rate' => 11, 'luckyRate' => 10,),
                4 => array('cd' => 60, 'rate' => 15, 'luckyRate' => 16,),
                5 => array('cd' => 60, 'rate' => 19, 'luckyRate' => 23,),
                6 => array('cd' => 60, 'rate' => 23, 'luckyRate' => 31,),
                7 => array('cd' => 60, 'rate' => 29, 'luckyRate' => 40,),
                8 => array('cd' => 60, 'rate' => 35, 'luckyRate' => 50,),
                9 => array('cd' => 60, 'rate' => 41, 'luckyRate' => 61,),
                10 => array('cd' => 60, 'rate' => 50, 'luckyRate' => 73,),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取磨坊(农田)配置
     * @param int $level 农田等级
     * @return array/false
     */
    public static function getFarmConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 3, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),), 'result' => array(1 => array('id' => 7901, 'num' => 40,), 2 => array('id' => 7901, 'num' => 200,), 3 => array('id' => 7901, 'num' => 340,), 4 => array('id' => 7901, 'num' => 860,), 5 => array('id' => 7901, 'num' => 1460,), 6 => array('id' => 7901, 'num' => 2480,),),),
                2 => array('grade' => 13, 'need' => array(0 => array('id' => 7901, 'num' => 4000,),), 'result' => array(1 => array('id' => 7901, 'num' => 60,), 2 => array('id' => 7901, 'num' => 300,), 3 => array('id' => 7901, 'num' => 510,), 4 => array('id' => 7901, 'num' => 1300,), 5 => array('id' => 7901, 'num' => 2210,), 6 => array('id' => 7901, 'num' => 3750,),),),
                3 => array('grade' => 18, 'need' => array(0 => array('id' => 7901, 'num' => 8000,),), 'result' => array(1 => array('id' => 7901, 'num' => 90,), 2 => array('id' => 7901, 'num' => 450,), 3 => array('id' => 7901, 'num' => 760,), 4 => array('id' => 7901, 'num' => 1930,), 5 => array('id' => 7901, 'num' => 3280,), 6 => array('id' => 7901, 'num' => 5570,),),),
                4 => array('grade' => 23, 'need' => array(0 => array('id' => 7901, 'num' => 24000,),), 'result' => array(1 => array('id' => 7901, 'num' => 130,), 2 => array('id' => 7901, 'num' => 660,), 3 => array('id' => 7901, 'num' => 1120,), 4 => array('id' => 7901, 'num' => 2850,), 5 => array('id' => 7901, 'num' => 4840,), 6 => array('id' => 7901, 'num' => 8220,),),),
                5 => array('grade' => 28, 'need' => array(0 => array('id' => 7901, 'num' => 48000,),), 'result' => array(1 => array('id' => 7901, 'num' => 190,), 2 => array('id' => 7901, 'num' => 960,), 3 => array('id' => 7901, 'num' => 1630,), 4 => array('id' => 7901, 'num' => 4150,), 5 => array('id' => 7901, 'num' => 7050,), 6 => array('id' => 7901, 'num' => 11980,),),),
                6 => array('grade' => 35, 'need' => array(0 => array('id' => 7901, 'num' => 96000,),), 'result' => array(1 => array('id' => 7901, 'num' => 280,), 2 => array('id' => 7901, 'num' => 1420,), 3 => array('id' => 7901, 'num' => 2410,), 4 => array('id' => 7901, 'num' => 6140,), 5 => array('id' => 7901, 'num' => 10430,), 6 => array('id' => 7901, 'num' => 17730,),),),
                7 => array('grade' => 45, 'need' => array(0 => array('id' => 7901, 'num' => 192000,),), 'result' => array(1 => array('id' => 7901, 'num' => 420,), 2 => array('id' => 7901, 'num' => 2140,), 3 => array('id' => 7901, 'num' => 3630,), 4 => array('id' => 7901, 'num' => 9250,), 5 => array('id' => 7901, 'num' => 15720,), 6 => array('id' => 7901, 'num' => 26720,),),),
                8 => array('grade' => 55, 'need' => array(0 => array('id' => 7901, 'num' => 576000,),), 'result' => array(1 => array('id' => 7901, 'num' => 630,), 2 => array('id' => 7901, 'num' => 3210,), 3 => array('id' => 7901, 'num' => 5450,), 4 => array('id' => 7901, 'num' => 13890,), 5 => array('id' => 7901, 'num' => 23610,), 6 => array('id' => 7901, 'num' => 40130,),),),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取作物成熟时间配置
     * @param int $cropId 作物ID
     * @return int/false
     */
    public static function getCropTimeConfig($cropId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => 300, 2 => 1800, 3 => 3600, 4 => 10800, 5 => 21600, 6 => 43200,
            );
        }
        if (isset(self::$_cacheArr[$key][$cropId])) {
            return self::$_cacheArr[$key][$cropId];
        }
        return false;
    }

    /**
     * 获取马房配置数据
     * @param int $level 马房等级
     * @return array/false
     */
    public static function getHorseConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 3, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),),),
                2 => array('grade' => 13, 'need' => array(0 => array('id' => 7901, 'num' => 4000,),),),
                3 => array('grade' => 18, 'need' => array(0 => array('id' => 7901, 'num' => 8000,),),),
                4 => array('grade' => 23, 'need' => array(0 => array('id' => 7901, 'num' => 24000,),),),
                5 => array('grade' => 28, 'need' => array(0 => array('id' => 7901, 'num' => 72000,),),),
                6 => array('grade' => 35, 'need' => array(0 => array('id' => 7901, 'num' => 216000,),),),
                7 => array('grade' => 45, 'need' => array(0 => array('id' => 7901, 'num' => 648000,),),),
                8 => array('grade' => 55, 'need' => array(0 => array('id' => 7901, 'num' => 1944000,),),),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取马车贸易奖励金币
     * @param int $horseLevel 马房等级
     * @param int $type 贸易类型
     * @param int $friendUserGrade 好友用户ID
     * @return int/false
     */
    public static function getHorseTradeReward($horseLevel, $type, $friendUserGrade) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array(1 => 320, 2 => 810, 3 => 1370, 4 => 2320, 5 => 3940, 6 => 6690,),
                2 => array(1 => 400, 2 => 1020, 3 => 1730, 4 => 2940, 5 => 4990, 6 => 8480,),
                3 => array(1 => 500, 2 => 1270, 3 => 2150, 4 => 3650, 5 => 6200, 6 => 10540,),
                4 => array(1 => 620, 2 => 1580, 3 => 2680, 4 => 4550, 5 => 7730, 6 => 13140,),
                5 => array(1 => 770, 2 => 1960, 3 => 3330, 4 => 5660, 5 => 9620, 6 => 16350,),
                6 => array(1 => 960, 2 => 2440, 3 => 4140, 4 => 7030, 5 => 11950, 6 => 20310,),
                7 => array(1 => 1200, 2 => 3060, 3 => 5200, 4 => 8840, 5 => 15020, 6 => 25530,),
                8 => array(1 => 1500, 2 => 3820, 3 => 6490, 4 => 11030, 5 => 18750, 6 => 31870,),
            );
        }
        if (isset(self::$_cacheArr[$key][$horseLevel][$type])) {
            return self::$_cacheArr[$key][$horseLevel][$type];
//            $rewardSilver = self::$_cacheArr[$key][$horseLevel][$type];
//            return round((1 + $friendUserGrade / 100) * $rewardSilver);
        }
        return false;
    }

    /**
     * 获取马车贸易时间
     * @param int $type 贸易类型
     * @return int/false
     */
    public static function getHorseTradeTime($type) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => 3600, 2 => 10800, 3 => 21600, 4 => 43200, 5 => 86400, 6 => 172800,
            );
        }
        if (isset(self::$_cacheArr[$key][$type])) {
            return self::$_cacheArr[$key][$type];
        }
        return false;
    }

    /**
     * 获取房子配置数据
     * @param int $level 房子等级
     * @return array/false
     */
    public static function getHouseConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 5, 'need' => array(0 => array('id' => 7901, 'num' => 1000,),), 'silver_rate' => 0.2, 'energy_incr' => 2,),
                2 => array('grade' => 10, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),), 'silver_rate' => 0.4, 'energy_incr' => 3,),
                3 => array('grade' => 15, 'need' => array(0 => array('id' => 7901, 'num' => 4000,),), 'silver_rate' => 0.6, 'energy_incr' => 4,),
                4 => array('grade' => 20, 'need' => array(0 => array('id' => 7901, 'num' => 12000,),), 'silver_rate' => 0.8, 'energy_incr' => 5,),
                5 => array('grade' => 25, 'need' => array(0 => array('id' => 7901, 'num' => 36000,),), 'silver_rate' => 1.2, 'energy_incr' => 6,),
                6 => array('grade' => 30, 'need' => array(0 => array('id' => 7901, 'num' => 72000,),), 'silver_rate' => 1.6, 'energy_incr' => 7,),
                7 => array('grade' => 40, 'need' => array(0 => array('id' => 7901, 'num' => 144000,),), 'silver_rate' => 2, 'energy_incr' => 8,),
                8 => array('grade' => 50, 'need' => array(0 => array('id' => 7901, 'num' => 432000,),), 'silver_rate' => 2.5, 'energy_incr' => 9,),
                9 => array('grade' => 60, 'need' => array(0 => array('id' => 7901, 'num' => 720000,),), 'silver_rate' => 3, 'energy_incr' => 10,),
                10 => array('grade' => 70, 'need' => array(0 => array('id' => 7901, 'num' => 864000,),), 'silver_rate' => 5, 'energy_incr' => 11,),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取炉子配置数据
     * @param int $level 炉子等级
     * @return array/false
     */
    public static function getStoveConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('gold' => 5),
                2 => array('gold' => 15),
                3 => array('gold' => 25),
                4 => array('gold' => 35),
                5 => array('gold' => 45),
                6 => array('gold' => 55),
                7 => array('gold' => 65),
                8 => array('gold' => 75),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取精灵屋配置数据
     * @param int $level 精灵屋等级
     * @return array/false
     */
    public static function getSpiritConfig($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => array('grade' => 10, 'need' => array(0 => array('id' => 7901, 'num' => 2000,),), 'silver' => 500,),
                2 => array('grade' => 20, 'need' => array(0 => array('id' => 7901, 'num' => 6000,),), 'silver' => 700,),
                3 => array('grade' => 30, 'need' => array(0 => array('id' => 7901, 'num' => 18000,),), 'silver' => 900,),
                4 => array('grade' => 40, 'need' => array(0 => array('id' => 7901, 'num' => 54000,),), 'silver' => 1100,),
                5 => array('grade' => 50, 'need' => array(0 => array('id' => 7901, 'num' => 168000,),), 'silver' => 1300,),
                6 => array('grade' => 60, 'need' => array(0 => array('id' => 7901, 'num' => 504000,),), 'silver' => 1500,),
                7 => array('grade' => 70, 'need' => array(0 => array('id' => 7901, 'num' => 1008000,),), 'silver' => 1700,),
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return false;
    }

    /**
     * 获取房子增加的体力上限点数
     * @param int $level 房子等级
     * @return int
     */
    public static function getHouseEnergy($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                1 => 2, 2 => 5, 3 => 9, 4 => 14, 5 => 20, 6 => 27, 7 => 35, 8 => 44, 9 => 54, 10 => 65,
            );
        }
        if (isset(self::$_cacheArr[$key][$level])) {
            return self::$_cacheArr[$key][$level];
        }
        return 0;
    }

    /**
     *  获取精灵技能配置
     * @param int $skillId 精灵技能编号
     * @return array/false
     */
    public static function getSpiritSkillConfig($skillId) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                // 普通精灵(不带任何效果)
                0 => array(
                    'data' => array('type' => 0, 'time' => 600),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 10, 'step' => 1,),
                ),
                //赤精灵
                /* 有10-100%的几率增加人物闯关的基础经验10-100%，持续10分钟 */
                1 => array(
                    'data' => array('type' => 1, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 10, 'max' => 100, 'step' => 10,),
                ),
                /* 在关卡中有10-100%几率拾取到的经验值额外增加0.1-1.5倍，持续10分钟 */
                2 => array(
                    'data' => array('type' => 1, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 10, 'max' => 100, 'step' => 10),
                ),
                /* 当每次闯关获得的经验少于50点时，有10-100%单次补偿玩家50-1000点经验，持续10分钟 */
                3 => array(
                    'data' => array('type' => 1, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 50, 'max' => 300, 'step' => 50,),
                ),
                /* 当挑战关卡获得三星及以上评价时，有10-100%几率额外增加人物50-1000点经验，持续10分钟 */
                4 => array(
                    'data' => array('type' => 1, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 50, 'max' => 300, 'step' => 50,),
                ),
                /* 额外增加基础经验10-150%，并附加人物经验50-1000点，持续10分钟 */
                5 => array(
                    'data' => array('type' => 1, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 150, 'step' => 10,),
                    'rate2' => array('min' => 50, 'max' => 300, 'step' => 50,),
                ),
                //橙精灵
                /* 在闯关过程中，有10-100%的几率增加金币10-100点，持续10分钟 */
                6 => array(
                    'data' => array('type' => 2, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 10, 'max' => 100, 'step' => 10,),
                ),
                /* 在闯关过程中，有10-100%的几率额外增加金币10-120%，持续10分钟 */
                7 => array(
                    'data' => array('type' => 2, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 10, 'max' => 120, 'step' => 10,),
                ),
                /* 每次闯关评价分数高于10000时，单次补偿玩家10-200点金币，持续10分钟 */
                8 => array(
                    'data' => array('type' => 2, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 10, 'max' => 200, 'step' => 10,),
                ),
                /* 挑战关卡获得三星及以上评价时，额外增加人物10-200点金币，持续10分钟 */
                9 => array(
                    'data' => array('type' => 2, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 10, 'max' => 200, 'step' => 10,),
                ),
                /* 闯关每次直接增加金币10-500点，持续10分钟 */
                10 => array(
                    'data' => array('type' => 2, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 10, 'max' => 500, 'step' => 10,),
                ),
                //黄精灵
                /* 有10-100%的几率增加5点魅力值，持续10分钟 */
                11 => array(
                    'data' => array('type' => 3, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 1, 'max' => 5, 'step' => 1,),
                ),
                /* 当每次闯关评价分数高于10000时，单次增加玩家1-15点魅力值，持续10分钟 */
                12 => array(
                    'data' => array('type' => 3, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 15, 'step' => 1,),
                ),
                /* 当玩家闯关获得的泡泡个数少于3个时，单次增加玩家魅力值1-20点，持续10分钟 */
                13 => array(
                    'data' => array('type' => 3, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 20, 'step' => 1,),
                ),
                /* 当玩家闯关消耗的道具少于三个时，单次增加魅力值1-20点，持续10分钟 */
                14 => array(
                    'data' => array('type' => 3, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 20, 'step' => 1,),
                ),
                /* 闯关每次直接增加魅力值1-30点，持续10分钟 */
                15 => array(
                    'data' => array('type' => 3, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 30, 'step' => 1,),
                ),
                //绿精灵
                /* 有10-100%的几率增加1-5点体力值，持续10分钟 */
                16 => array(
                    'data' => array('type' => 4, 'time' => 600,),
                    'rate1' => array('min' => 10, 'max' => 100, 'step' => 10,),
                    'rate2' => array('min' => 1, 'max' => 5, 'step' => 1,),
                ),
                /* 当玩家闯关获得体力值，就额外增加体力值1-20点，持续10分钟。 */
                17 => array(
                    'data' => array('type' => 4, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 10, 'step' => 1,),
                ),
                /* 当玩家获得的经验少于50时，单次补偿玩家体力值1-10点，持续10分钟。 */
                18 => array(
                    'data' => array('type' => 4, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 10, 'step' => 1,),
                ),
                /* 当玩家耗时评分高于10000时，增加玩家体力值1-10点。 */
                19 => array(
                    'data' => array('type' => 4, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 10, 'step' => 1,),
                ),
                /* 闯关每次直接增加体力值1-10点，持续10分钟 */
                20 => array(
                    'data' => array('type' => 4, 'time' => 600,),
                    'rate1' => array('min' => 100, 'max' => 100, 'step' => 100,),
                    'rate2' => array('min' => 1, 'max' => 10, 'step' => 1,),
                ),
            );
        }
        if (isset(self::$_cacheArr[$key][$skillId])) {
            return self::$_cacheArr[$key][$skillId];
        }
        return false;
    }

    /**
     * 随机生成精灵技能效果的值
     * @param array $configArr 配置数组(必须包含min,max,step字段)
     * @return int/float
     */
    public static function randSpiritVal($configArr) {
        if ($configArr['min'] == $configArr['max']) {
            return $configArr['min'];
        }
        $sum = 0;
        $chanceArr = array();
        for ($i = $configArr['min']; $i <= $configArr['max']; $i += $configArr['step']) {
            $sum += $i;
            $chanceArr[$sum] = $configArr['max'] + $configArr['step'] - $i;
        }
        return self::getChanceConfig($chanceArr, $sum);
    }

    /**
     * 随机精灵(固定为三只)
     * @param int $level 精灵屋等级
     */
    public static function randSpirit($level) {
        $key = __FUNCTION__;
        if (!isset(self::$_cacheArr[$key])) {
            self::$_cacheArr[$key] = array(
                10000 => 0,
                10500 => 1,
                10950 => 2,
                11400 => 3,
                11850 => 4,
                12150 => 5,
                12550 => 6,
                12900 => 7,
                13200 => 8,
                13450 => 9,
                13650 => 10,
                14000 => 11,
                14300 => 12,
                14550 => 13,
                14750 => 14,
                14900 => 15,
                15150 => 16,
                15300 => 17,
                15450 => 18,
                15550 => 19,
                15600 => 20,
                15850 => 21,
                16050 => 22,
                16200 => 23,
                16300 => 24,
                16350 => 25,
                16600 => 26,
                16800 => 27,
                16950 => 28,
                17050 => 29,
                17100 => 30,
                17350 => 31,
                17550 => 32,
                17700 => 33,
                17800 => 34,
                17850 => 35,
            );
        }
        if (isset(self::$_cacheArr[$key])) {
            $spiritArr = array();
            $maxRandArr = array(
                0 => 10000,
                1 => 12150,
                2 => 13650,
                3 => 14900,
                4 => 15600,
                5 => 10000, //16350,(暂未开放,先用普通的顶替)
                6 => 10000, //17100,(暂未开放,先用普通的顶替)
                7 => 10000, //17850,(暂未开放,先用普通的顶替)
            );
            while (count($spiritArr) < 3) {
                $skillId = self::getChanceConfig(self::$_cacheArr[$key], $maxRandArr[$level]);
                $skillConfig = self::getSpiritSkillConfig($skillId);
                $dataArr = $skillConfig['data'];
                $dataArr['skill'] = $skillId;
                $dataArr['rate1'] = self::randSpiritVal($skillConfig['rate1']);
                $dataArr['rate2'] = self::randSpiritVal($skillConfig['rate2']);
                $spiritArr[] = $dataArr;
            }
            return $spiritArr;
        }
        return false;
    }
}
?>