[root@bogon gearmand-0.26]# ./configure  --help
`configure' configures gearmand 0.26 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/gearmand]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-fat-binaries   Enable fat binary support on OSX [default=off]
  --enable-silent-rules          less verbose build output (undo: `make V=1')
  --disable-silent-rules         verbose build output (undo: `make V=0')
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --disable-64bit         Build 64 bit binary [default=on]
  --disable-largefile     omit support for large files
  --disable-assert        Turn off assertions
  --enable-gcc-profile-mode
                          Toggle gcc profile mode [default=off]
  --enable-profiling      Toggle profiling [default=off]
  --enable-coverage       Toggle coverage [default=off]
  --disable-dtrace        Build with support for the DTRACE. [default=on]
  --enable-umem           Enable linking with libumem [default=off]
  --enable-tcmalloc       Enable linking with tcmalloc [default=off]
  --disable-mtmalloc      Enable linking with mtmalloc [default=on]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-static-boost   Prefer the static boost libraries over the shared
                          ones [no]
  --disable-libmemcached  Build with libmemcached support [default=on]
  --disable-libdrizzle    Build with libdrizzle support [default=on]
  --disable-rpath         do not hardcode runtime library paths
  --disable-libpq         Build with libpq support [default=on]
  --disable-libtokyocabinet
                          Build with libtokyocabinet support [default=on]
  --disable-hires         Build with hires support [default=on]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-debug            Add debug code/turns off optimizations (yes|no)
                          [default=no]
  --with-lib-prefix[=DIR] search for libraries in DIR/include and DIR/lib
  --without-lib-prefix    don't search for libraries in includedir and libdir
  --with-valgrind         Add additional valgrind code for testing with
                          valgrind.
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot=DIR Search for dependent libraries within DIR
                        (or the compiler's sysroot if not specified).
  --with-boost=DIR        prefix of Boost 1.39 [guess]
  --with-memcached=[PATH]
                          absolute path to memcached executable
  --with-memcached_sasl=[PATH]
                          absolute path to memcached_sasl executable
  --with-drizzled=[PATH]
                          absolute path to drizzled executable
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libevent-prefix[=DIR]  search for libevent in DIR/include and DIR/lib
  --without-libevent-prefix     don't search for libevent in includedir and libdir
  --with-libuuid-prefix[=DIR]  search for libuuid in DIR/include and DIR/lib
  --without-libuuid-prefix     don't search for libuuid in includedir and libdir
  --with-sqlite3=[ARG]    use SQLite 3 library [default=yes], optionally
                          specify the prefix for sqlite3 library
  --with-libpq-prefix[=DIR]  search for libpq in DIR/include and DIR/lib
  --without-libpq-prefix     don't search for libpq in includedir and libdir
  --with-libtokyocabinet-prefix[=DIR]  search for libtokyocabinet in DIR/include and DIR/lib
  --without-libtokyocabinet-prefix     don't search for libtokyocabinet in includedir and libdir
  --with-libhiredis-prefix[=DIR]  search for libhiredis in DIR/include and DIR/lib
  --without-libhiredis-prefix     don't search for libhiredis in includedir and libdir

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  BOOST_ROOT  Location of Boost installation
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  libmemcached_CFLAGS
              C compiler flags for libmemcached, overriding pkg-config
  libmemcached_LIBS
              linker flags for libmemcached, overriding pkg-config
  MEMCACHED_BINARY
              Absolute path to memcached executable
  MEMCACHED_SASL_BINARY
              Absolute path to memcached_sasl executable
  DRIZZLED_BINARY
              Absolute path to drizzled executable
  libdrizzle_CFLAGS
              C compiler flags for libdrizzle, overriding pkg-config
  libdrizzle_LIBS
              linker flags for libdrizzle, overriding pkg-config
  LIBTOKYOCABINET_CFLAGS
              C compiler flags for LIBTOKYOCABINET, overriding pkg-config
  LIBTOKYOCABINET_LIBS
              linker flags for LIBTOKYOCABINET, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <https://bugs.launchpad.net/gearmand>.
gearmand home page: <http://gearman.info/>.