string
-------------------------------------------
str1 = 'abc'
str1.index('a') 
str1.rindex('a')
str1.find('a')
str1.rfind('a')
str1.count('a')

工厂方法:
str2 = str(str1)

切片操作:
>>> str1[:]
'abc'
>>> str1[::-1]
'cba'
>>> str1[1:2]
'b'
>>> str1[1:4:1]
'bc'
>>> str1[1:4:-1]
''
>>> str1[1:10:]
'bc'


模板方法：
>>> from string import Template
>>> s = Template('$who is $what')
>>> s.substitute(who='TED',what='UD')
'TED is UD'

填充
	
center(width[, fillchar]) ,
ljust(width[, fillchar]),
rjust(width[, fillchar]),
zfill(width),
expandtabs([tabsize])
	
l         fillchar 参数指定了用以填充的字符，默认为空格
l         顾名思义，zfill()即是以字符0进行填充，在输出数值时比较常用
l         expandtabs()的tabsize 参数默认为8。它的功能是把字符串中的制表符（tab）转换为适当数量的空格。
删减
	
strip([chars]),
lstrip([chars]),
rstrip([chars])
	
*strip()函数族用以去除字符串两端的空白符，空白符由string.whitespace常量定义。
变形
	
lower(),
upper(),
capitalize(),
swapcase(),
title()
	
title()函数是比较特别的，它的功能是将每一个单词的首字母大写，并将单词中的非首字母转换为小写（英文文章的标题通常是这种格式）。
>>> 'hello wORld!'.title()
'Hello World!'
因为title() 函数并不去除字符串两端的空白符也不会把连续的空白符替换为一个空格，所以建议使用string 模块中的capwords(s)函数，它能够去除两端的空白符，再将连续的空白符用一个空格代替。
>>> ' hello   world!'.title()
' Hello   World!'
>>> string.capwords(' hello   world!')
'Hello World!'
分切
	
partition(sep),
rpartition(sep),
splitlines([keepends]),
split([sep [,maxsplit]]),
rsplit([sep[,maxsplit]])
	
l         *partition ()函数族是2.5版本新增的方法。它接受一个字符串参数，并返回一个3个元素的 tuple 对象。如果sep没出现在母串中，返回值是 (sep, ‘’, ‘’)；否则，返回值的第一个元素是 sep 左端的部分，第二个元素是 sep 自身，第三个元素是 sep 右端的部分。
l         参数 maxsplit 是分切的次数，即最大的分切次数，所以返回值最多有 maxsplit+1 个元素。
l         s.split() 和 s.split(‘ ‘)的返回值不尽相同
>>> ' hello   world!'.split()
['hello', 'world!']
>>> ' hello   world!'.split(' ')
['', '', 'hello', '', '', 'world!']
产生差异的原因在于当忽略 sep 参数或sep参数为 None 时与明确给 sep 赋予字符串值时 split() 采用两种不同的算法。对于前者，split() 先去除字符串两端的空白符，然后以任意长度的空白符串作为界定符分切字符串（即连续的空白符串被当作单一的空白符看待）；对于后者则认为两个连续的 sep 之间存在一个空字符串。因此对于空字符串（或空白符串），它们的返回值也是不同的：
>>> ''.split()
[]
>>> ''.split(' ')
['']
连接
	
join(seq)
	
join() 函数的高效率（相对于循环相加而言），使它成为最值得关注的字符串方法之一。它的功用是将可迭代的字符串序列连接成一条长字符串，如：
>>> conf = {'host':'127.0.0.1',
...     'db':'spam',
...     'user':'sa',
...     'passwd':'eggs'}
>>> ';'.join("%s=%s"%(k, v) for k, v in conf.iteritems())
'passswd=eggs;db=spam;user=sa;host=127.0.0.1'
判定
	
isalnum(),
isalpha(),
isdigit(),
islower(),
isupper(),
isspace(),
istitle(),
startswith(prefix[, start[, end]]),
endswith(suffix[,start[, end]])
	
这些函数都比较简单，顾名知义。需要注意的是*with()函数族可以接受可选的 start, end 参数，善加利用，可以优化性能。
另，自 Py2.5 版本起，*with() 函数族的 prefix 参数可以接受 tuple 类型的实参，当实参中的某人元素能够匹配，即返回 True。
查找
	
count( sub[, start[, end]]),
find( sub[, start[, end]]),
index( sub[, start[, end]]),
rfind( sub[, start[,end]]),
rindex( sub[, start[, end]])
	
find()函数族找不到时返回-1，index()函数族则抛出ValueError异常
另，也可以用 in 和 not in 操作符来判断字符串中是否存在某个模板。
替换
	
replace(old, new[,count]),
translate(table[,deletechars])
	
l         replace()函数的 count 参数用以指定最大替换次数
l         translate() 的参数 table 可以由 string.maketrans(frm, to) 生成
l         translate() 对 unicode 对象的支持并不完备，建议不要使用。
编码
	
encode([encoding[,errors]]),
decode([encoding[,errors]])
	
这是一对互逆操作的方法，用以编码和解码字符串。因为str是平台相关的，它使用的内码依赖于操作系统环境，而unicode是平台无关的，是Python 内部的字符串存储方式。unicode可以通过编码（encode）成为特定编码的str，而str也可以通过解码（decode）成为unicode。
-------------------------------------------
list

append( item ) 	在列表末尾插入（item ）
count( element ) 	返回element在列表中出现的次数
extend( newlist ) 	将newlist的元素插入列表末尾
index( element ) 返回element在列表中的索引，如果不存在，则引发ValueError异常
insert( index , item ) 	在index位置插入item
pop( [index] ) 	index参数为可选的。如无参调用，则会删除并返回列表最后一个元素。如指定index参数，则删除并返回位置index的元素
remove( element ) 	删除首次在列表中出现的element，如果列表不存在element，则引发ValueError异常
reverse( ) 	当场反转列表内容（不创建反转列表的拷贝）
sort 	当场对列表内容排序。可选参数compare-function是一个函数，它指定了比较条件,compare-function取得列表的任意两个元素（x和y）。如果x应出现在y之前，就范围-1；如果x和y的顺序无关紧要，返回0；如果x应出现在y之后，则返回1



支持切片(浅复制):
>>> list1 = ['a', 'b', 'c', 'd', '123', ['x', 'y', 'z', '123']]
>>> list2 = list1[:]
>>> list2
['a', 'b', 'c', 'd', '123', ['x', 'y', 'z', '123']]

工厂方法(也是浅复制):
>>> list3 = list(list1)
>>> list3
['a', 'b', 'c', 'd', '123', ['x', 'y', 'z', '123']]

如果对list3[5]的list(可变对象)操作，则list1的相应成员也会发生变化.

-------------------------------------------

dict

clear( )
	
从字典删除所有项
copy( )
	
创建并返回字典的浅拷贝（新字典元素为原始字典的引用）
get(key [ ,returnvalue] )
	
返回key的值，若无key而指定了returnvalue，则返回returnvalue值，若无此值则返回None
has_key( key )
	
如果key存在于字典中，就返回1（真）；否则返回0（假）
items( )
	
返回一个由元组构成的列表，每个元组包含一对键-值对
keys( )
	
返回一个由字典所有键构成的列表
popitem( )
	
删除任意键-值对，并作为两个元素的元组返回。如字典为空，则返回KeyError异常
setdefault( key [,dummvalue])
	
具有与get方法类似的行为。如key不在字典中，同时指定了dummvalue，就将键（key）和指定的值（dummvalue）插入字典，如果没有指定dummvalue，则值为None
update( newDictionary )
	
将来自newDictionary的所有键-值添加到当前字典，并覆盖同名键的值
values( )
	
返回字典所有值组成的一个列表
iterkeys( )
	
返回字典键的一个迭代器
iteritems( )
	
返回字典键-值对的一个迭代器
itervalues( )
	
返回字典值的一个迭代器


排序
>>> for x in sorted(dict3):print x,dict1[x]
1 bbc
1 abc
age 111
name falcon
-------------------------------------------