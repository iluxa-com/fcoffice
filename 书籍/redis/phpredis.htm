<!DOCTYPE html>
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms no-csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths mozilla"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
        <title>nicolasff/phpredis - GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="https://github.com/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">

    
    

    <meta content="authenticity_token" name="csrf-param">
<meta content="7cde06bd14811e92fd76517e9a4458a7988974ac" name="csrf-token">

    <link href="phpredis_files/github-ed04e8b8be3e88286d2fedb5ade5607df0599719.css" media="screen" rel="stylesheet" type="text/css">
    

    <script src="phpredis_files/jquery-0afaa9d8025004af7fc6f2a561837057d3f21298.js" type="text/javascript"></script>
    <script src="phpredis_files/github-b1872f46a080aa92c45573ca095de24a21d5f9ff.js" type="text/javascript"></script><script src="phpredis_files/ga.js" async="" type="text/javascript"></script>
    

      <link rel="permalink" href="https://github.com/nicolasff/phpredis/tree/c9914377683f54f36efaa8a70717929fb19b2b67">
    

    <meta name="description" content="phpredis - A PHP extension for Redis">
  <link href="https://github.com/nicolasff/phpredis/commits/master.atom" rel="alternate" title="Recent Commits to phpredis:master" type="application/atom+xml">

  </head>


  <body class="logged_out  windows env-production ">
    


    

    <div id="main">
      <div id="header" class="true">
          <a class="logo" href="https://github.com/">
            <img alt="github" class="default svg" src="phpredis_files/logov6.svg" height="45">
            <img alt="github" class="default png" src="phpredis_files/logov6.png" height="45">
            <!--[if (gt IE 8)|!(IE)]><!-->
            <img alt="github" class="hover svg" src="phpredis_files/logov6-hover.svg" height="45">
            <img alt="github" class="hover png" src="phpredis_files/logov6-hover.png" height="45">
            <!--<![endif]-->
          </a>

        <div class="topsearch">
    <!--
      make sure to use fully qualified URLs here since this nav
      is used on error pages on other domains
    -->
    <ul class="nav logged_out">
        <li class="pricing"><a href="https://github.com/plans">Signup and Pricing</a></li>
        <li class="explore"><a href="https://github.com/explore">Explore GitHub</a></li>
      <li class="features"><a href="https://github.com/features">Features</a></li>
        <li class="blog"><a href="https://github.com/blog">Blog</a></li>
      <li class="login"><a href="https://github.com/login?return_to=%2Fnicolasff%2Fphpredis">Login</a></li>
    </ul>
</div>

      </div>

      
            <div class="site">
      <div class="pagehead repohead vis-public fork  instapaper_ignore readability-menu">


      <div class="title-actions-bar">
        <h1>
          <a href="https://github.com/nicolasff">nicolasff</a> /
          <strong><a href="https://github.com/nicolasff/phpredis" class="js-current-repository">phpredis</a></strong>
            <span class="fork-flag">
              <span class="text">forked from <a href="https://github.com/owlient/phpredis">owlient/phpredis</a></span>
            </span>
        </h1>
        



            <ul class="pagehead-actions">

        <li class="js-toggler-container watch-button-container ">
          <a title="You must be logged in to use this feature" href="https://github.com/nicolasff/phpredis/toggle_watch" class="minibutton btn-watch watch-button js-toggler-target entice" data-method="post" data-remote="true"><span><span class="icon"></span>Watch</span></a>
          <a href="https://github.com/nicolasff/phpredis/toggle_watch" class="minibutton btn-watch unwatch-button js-toggler-target" data-method="post" data-remote="true"><span><span class="icon"></span>Unwatch</span></a>
        </li>
            <li><a title="You must be logged in to use this feature" href="https://github.com/nicolasff/phpredis/fork" class="minibutton btn-fork fork-button entice" data-method="post"><span><span class="icon"></span>Fork</span></a></li>

      <li class="repostats">
        <ul class="repo-stats">
          <li class="watchers ">
            <a href="https://github.com/nicolasff/phpredis/watchers" title="Watchers" class="tooltipped downwards">
              279
            </a>
          </li>
          <li class="forks">
            <a href="https://github.com/nicolasff/phpredis/network" title="Forks" class="tooltipped downwards">
              42
            </a>
          </li>
        </ul>
      </li>
    </ul>

      </div>

        

  <ul class="tabs with-details-box">
    <li><a href="https://github.com/nicolasff/phpredis" class="selected" highlight="repo_sourcerepo_downloadsrepo_commitsrepo_tagsrepo_branches">Code</a></li>
    <li><a href="https://github.com/nicolasff/phpredis/network" highlight="repo_networkrepo_fork_queue">Network</a>
    </li><li><a href="https://github.com/nicolasff/phpredis/pulls" highlight="repo_pulls">Pull Requests <span class="counter">2</span></a></li>

      <li><a href="https://github.com/nicolasff/phpredis/issues" highlight="repo_issues">Issues <span class="counter">23</span></a></li>


    <li><a href="https://github.com/nicolasff/phpredis/graphs" highlight="repo_graphsrepo_contributors">Stats &amp; Graphs</a></li>

  </ul>

      <div id="repo_details" class="metabox clearfix
        not-editable">
      <div id="repo_details_loader" class="metabox-loader" style="display:none">Sending Request…</div>

      <div class="repo-desc-homepage">
        <div id="repository_description" class="repository-description">
    <p>A PHP extension for Redis
      <span id="read_more" style="">— <a href="#readme">Read more</a></span>
    </p>
</div>


<div class="repository-homepage" id="repository_homepage">
  <p><a href="http:///" rel="nofollow"></a></p>
</div>


      </div>

      <div class="edit-repo-desc-homepage" style="display:none">
<form action="/nicolasff/phpredis/admin/update_meta" id="js-update-repo-meta-form" method="post"><div style="margin:0;padding:0"><input name="_method" value="put" type="hidden"><input name="authenticity_token" value="7cde06bd14811e92fd76517e9a4458a7988974ac" type="hidden"></div>          <p class="error" style="display:none">Sorry, but there was a problem saving your changes.</p>

          <div class="placeholder-field description-field-wrap js-placeholder-field">
            <label style="display: none;" class="placeholder" for="repository-description-field" data-placeholder-mode="sticky">Add a description to this repository</label>
            <input id="repository-description-field" class="description-field" name="repo_description" value="A PHP extension for Redis" type="text">
          </div>

          <div class="placeholder-field homepage-field-wrap js-placeholder-field">
            <label style="display: block;" class="placeholder" for="repository-homepage-field" data-placeholder-mode="sticky">Add a website to this repository</label>
            <input id="repository-homepage-field" class="homepage-field" name="repo_homepage" type="text">
          </div>

          <button type="submit" class="classy save-button"><span>Save Changes</span></button>
          <p class="cancel"><a href="#" class="danger">Cancel</a></p>
</form>      </div>

      
<div class="url-box">
  <ul class="native-clones">
      <li><a href="https://github.com/nicolasff/phpredis/zipball/master" class="minibutton btn-download " title="Download this repository as a zip file"><span><span class="icon"></span>ZIP</span></a>
  </li></ul>

  <ul class="clone-urls">
      <li class="http_clone_url selected"><a href="https://github.com/nicolasff/phpredis.git" data-permissions="Read-Only">HTTP</a></li>
      <li class="public_clone_url"><a href="git://github.com/nicolasff/phpredis.git" data-permissions="Read-Only">Git Read-Only</a></li>
  </ul>
  <input value="https://github.com/nicolasff/phpredis.git" spellcheck="false" class="url-field" type="text">
        <span style="display:none" id="clippy_699" class="clippy-text">https://github.com/nicolasff/phpredis.git</span>
      <span id="clippy_tooltip_clippy_699" class="clippy-tooltip tooltipped" title="copy to clipboard">
      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" class="clippy" id="clippy" height="14" width="14">
      <param name="movie" value="https://a248.e.akamai.net/assets.github.com/flash/clippy.swf?v5">
      <param name="allowScriptAccess" value="always">
      <param name="quality" value="high">
      <param name="scale" value="noscale">
      <param name="FlashVars" value="id=clippy_699&amp;copied=copied!&amp;copyto=copy to clipboard">
      <param name="bgcolor" value="#FFFFFF">
      <param name="wmode" value="opaque">
      <embed src="phpredis_files/clippy.swf" name="clippy" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id=clippy_699&amp;copied=copied!&amp;copyto=copy to clipboard" bgcolor="#FFFFFF" wmode="opaque" height="14" width="14">
      </object>
      </span>

  <p class="url-description"><strong>Read-Only</strong> access</p>
</div>

    </div>

<div class="frame frame-center tree-finder" style="display:none" data-tree-list-url="/nicolasff/phpredis/tree-list/c9914377683f54f36efaa8a70717929fb19b2b67" data-blob-url-prefix="/nicolasff/phpredis/blob/c9914377683f54f36efaa8a70717929fb19b2b67">

  <div class="breadcrumb">
    <b><a href="https://github.com/nicolasff/phpredis">phpredis</a></b> /
    <input class="tree-finder-input" name="query" autocomplete="off" spellcheck="false" type="text">
  </div>

    <div class="octotip">
      <p>
        <a href="https://github.com/nicolasff/phpredis/dismiss-tree-finder-help" class="dismiss js-dismiss-tree-list-help" title="Hide this notice forever">Dismiss</a>
        <strong>Octotip:</strong> You've activated the <em>file finder</em>
        by pressing <span class="kbd">t</span> Start typing to filter the
        file list. Use <span class="kbd badmono">↑</span> and
        <span class="kbd badmono">↓</span> to navigate,
        <span class="kbd">enter</span> to view files.
      </p>
    </div>

  <table class="tree-browser" cellpadding="0" cellspacing="0">
    <tbody><tr class="js-header"><th>&nbsp;</th><th>name</th></tr>
    <tr class="js-no-results no-results" style="display: none;">
      <th colspan="2">No matching files</th>
    </tr>
    </tbody><tbody class="js-results-list">
    </tbody>
  </table>
</div>

<div id="jump-to-line" style="display:none">
  <h2>Jump to Line</h2>
  <form>
    <input class="textfield" type="text">
    <div class="full-button">
      <button type="submit" class="classy">
        <span>Go</span>
      </button>
    </div>
  </form>
</div>


<div class="subnav-bar">

  <ul class="actions">
    
      <li class="switcher">

        <div class="context-menu-container js-menu-container">
          <span class="text">Current branch:</span>
          <a href="#" class="minibutton bigger switcher context-menu-button js-menu-target js-commitish-button btn-branch repo-tree" data-master-branch="master" data-ref="master">
            <span><span class="icon"></span>master</span>
          </a>

          <div class="context-pane commitish-context js-menu-content">
            <a href="javascript:;" class="close js-menu-close"></a>
            <div class="title">Switch Branches/Tags</div>
            <div class="body pane-selector commitish-selector js-filterable-commitishes">
              <div class="filterbar">
                <div class="placeholder-field js-placeholder-field">
                  <label style="display: block;" class="placeholder" for="context-commitish-filter-field" data-placeholder-mode="sticky">Filter branches/tags</label>
                  <input id="context-commitish-filter-field" class="commitish-filter" type="text">
                </div>

                <ul class="tabs with-details-box">
                  <li><a href="#" data-filter="branches" class="selected">Branches</a></li>
                  <li><a href="#" data-filter="tags">Tags</a></li>
                </ul>
              </div>

                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/1.1" data-name="1.1">1.1</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/master" data-name="master">master</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/multi" data-name="multi">multi</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/pecl" data-name="pecl">pecl</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/refactor" data-name="refactor">refactor</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/serializer" data-name="serializer">serializer</a>
                  </h4>
                </div>
                <div class="commitish-item branch-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/variadic" data-name="variadic">variadic</a>
                  </h4>
                </div>

                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.1.3" data-name="2.1.3">2.1.3</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.1.2" data-name="2.1.2">2.1.2</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.1.1" data-name="2.1.1">2.1.1</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.1.0" data-name="2.1.0">2.1.0</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.12" data-name="2.0.12">2.0.12</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.11" data-name="2.0.11">2.0.11</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.10" data-name="2.0.10">2.0.10</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.9" data-name="2.0.9">2.0.9</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.8" data-name="2.0.8">2.0.8</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.7" data-name="2.0.7">2.0.7</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.6" data-name="2.0.6">2.0.6</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.5" data-name="2.0.5">2.0.5</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.4" data-name="2.0.4">2.0.4</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.3" data-name="2.0.3">2.0.3</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.2" data-name="2.0.2">2.0.2</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.1" data-name="2.0.1">2.0.1</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/2.0.0" data-name="2.0.0">2.0.0</a>
                  </h4>
                </div>
                <div style="display: none;" class="commitish-item tag-commitish selector-item">
                  <h4>
                      <a href="https://github.com/nicolasff/phpredis/tree/1.2.0" data-name="1.2.0">1.2.0</a>
                  </h4>
                </div>

              <div class="no-results" style="display:none">Nothing to show</div>
            </div>
          </div><!-- /.commitish-context-context -->
        </div>

      </li>
  </ul>

  <ul class="subnav">
    <li><a href="https://github.com/nicolasff/phpredis" class="selected" highlight="repo_source">Files</a></li>
    <li><a href="https://github.com/nicolasff/phpredis/commits/master" highlight="repo_commits">Commits</a></li>
    <li><a href="https://github.com/nicolasff/phpredis/branches" class="" highlight="repo_branches">Branches <span class="counter">7</span></a></li>
    <li><a href="https://github.com/nicolasff/phpredis/tags" class="" highlight="repo_tags">Tags <span class="counter">18</span></a></li>
    <li><a href="https://github.com/nicolasff/phpredis/downloads" class="" highlight="repo_downloads">Downloads <span class="counter">2</span></a></li>
  </ul>

</div>

  
  
  


        

      </div><!-- /.pagehead -->

      




    <p class="last-commit locked">Browsing ref <tt>c991437768</tt></p>

<div class="commit commit-tease js-details-container">
  <p class="commit-title ">
      <a href="https://github.com/nicolasff/phpredis/commit/c9914377683f54f36efaa8a70717929fb19b2b67" class="message">Formatting changes in documentation.</a>
      <a href="javascript:;" class="minibutton expander-minibutton js-details-target"><span>…</span></a>
  </p>
    <div class="commit-desc"><pre>Fixes issue <a href="https://github.com/nicolasff/phpredis/issues/83" class="issue-link" title="Problem in documentation with hDel">#83</a>.</pre></div>
  <div class="commit-meta">
    <a href="https://github.com/nicolasff/phpredis/commit/c9914377683f54f36efaa8a70717929fb19b2b67" class="sha-block">commit <span class="sha">c991437768</span></a>

    <div class="authorship">
      <img class="gravatar" src="phpredis_files/52bfb33c135632c6b6c2f6645247ace5.jpeg" height="20" width="20">
      <span class="author-name"><a href="https://github.com/nicolasff">nicolasff</a></span>
      authored <time class="js-relative-date" datetime="2011-11-20T09:08:25-08:00" title="2011-11-20 09:08:25">about 21 hours ago</time>

    </div>
  </div>
</div>


  <div id="slider">
      <div class="breadcrumb" data-path="/">
        <b><a href="https://github.com/nicolasff/phpredis" class="js-rewrite-sha">phpredis</a></b> / 
      </div>

        

  <div class="frames">
    <div class="frame frame-center" data-path="/" data-permalink-url="/nicolasff/phpredis/tree/c9914377683f54f36efaa8a70717929fb19b2b67" data-title="nicolasff/phpredis - GitHub" data-type="tree" data-cached-commit-url="/nicolasff/phpredis/cache/commits/c9914377683f54f36efaa8a70717929fb19b2b67?commit_sha=c9914377683f54f36efaa8a70717929fb19b2b67&amp;path=">
      <table class="tree-browser" cellpadding="0" cellspacing="0">
        <tbody><tr class="header">
          <th></th>
          <th>name</th>
          <th>age</th>
          <th>
            <div class="history">
              <a href="https://github.com/nicolasff/phpredis/commits/master/">history</a>
            </div>
            message
          </th>
        </tr>


          <tr class="alt">
            <td class="icon"> <img alt="directory" src="phpredis_files/dir.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/tree/master/debian" class="js-slide-to js-rewrite-sha" id="911a4a5524dd8916bff4039b815a7ed8969cda79">debian/</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2010-11-30T00:21:17-08:00" title="2010-11-30 00:21:17">November 30, 2010</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/9ab0c0dcd60c45bf757ccd7eb285838b538f2034" class="message">only new changelog entry that this was merged</a> [<a href="https://github.com/plista">plista</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="directory" src="phpredis_files/dir.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/tree/master/igbinary" class="js-slide-to js-rewrite-sha" id="091c71c2b8deea3f0021fb88b0d6bc4759777350">igbinary/</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-06-30T07:17:23-07:00" title="2011-06-30 07:17:23">June 30, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/c9a6ce2cf4c15e7c0324da3bfc17cc28017fc157" class="message">Build fix for win32 (phpredis 2.1.3)</a> [Charles] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="directory" src="phpredis_files/dir.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/tree/master/rpm" class="js-slide-to js-rewrite-sha" id="fa52accae714562a0b394e361d3dbe39ccc09afb">rpm/</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-07-28T07:32:02-07:00" title="2011-07-28 07:32:02">July 28, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/848873f437d40ed2db000ede78be884099b7987e" class="message">Added spec-file to build rpm</a> [<a href="https://github.com/unicast">unicast</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="directory" src="phpredis_files/dir.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/tree/master/tests" class="js-slide-to js-rewrite-sha" id="7c09166256d0723d6ca4cce3f8aec6f6dae3e1ba">tests/</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-11-09T05:33:27-08:00" title="2011-11-09 05:33:27">November 09, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/90a82d3d9cfe2f46d586a220195fc75d52aa3f0e" class="message">Fixed issue with ZSCORE in MULTI/EXEC context.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/COPYING" class="js-slide-to js-rewrite-sha" id="3cc8b777b77259046155b82f23e189d4c5c56d6e">COPYING</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-05-20T12:47:19-07:00" title="2011-05-20 12:47:19">May 21, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/120ffee41cb8b2939bbf286f6e22e5db7a58a107" class="message">Making sure licensing is clear.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/CREDITS" class="js-slide-to js-rewrite-sha" id="5959659911b620690ea09ed5a30734b8e4f09cfb">CREDITS</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2009-11-13T02:39:33-08:00" title="2009-11-13 02:39:33">November 13, 2009</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/637b1c40f5989dc78f198e0155f1e0e4506a226e" class="message">Initial commit</a> [<a href="https://github.com/owlient">owlient</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/README.markdown" class="js-slide-to js-rewrite-sha" id="c25a082a155b5e74d14ecf22e17601fa912315e7">README.markdown</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-11-20T09:08:25-08:00" title="2011-11-20 09:08:25">about 21 hours ago</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/c9914377683f54f36efaa8a70717929fb19b2b67" class="message">Formatting changes in documentation.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/arrays.markdown" class="js-slide-to js-rewrite-sha" id="e43ca6ffeab2ba5941e99a46c2b89eb9584772a5">arrays.markdown</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-09-18T11:18:53-07:00" title="2011-09-18 11:18:53">September 19, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/5a6a1d3f914219b9ca84a0e9f0a37939c8057ea9" class="message">Small documentation changes</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/common.h" class="js-slide-to js-rewrite-sha" id="41d44db841fa5cad527057d8ee71f0507383f92d">common.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-06-30T07:17:23-07:00" title="2011-06-30 07:17:23">June 30, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/c9a6ce2cf4c15e7c0324da3bfc17cc28017fc157" class="message">Build fix for win32 (phpredis 2.1.3)</a> [Charles] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/config.m4" class="js-slide-to js-rewrite-sha" id="51a1cad85a75ed1b3dcd57bcb06fbb954047bc5e">config.m4</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-08-19T05:18:59-07:00" title="2011-08-19 05:18:59">August 19, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/3564d8fb2f0ee8a092ed2d0118854b63f2d20f9b" class="message">Refactoring</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/config.w32" class="js-slide-to js-rewrite-sha" id="8b39af9057d5a4be31ae736ccd9e637d2afe5e37">config.w32</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-06-30T07:17:23-07:00" title="2011-06-30 07:17:23">June 30, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/c9a6ce2cf4c15e7c0324da3bfc17cc28017fc157" class="message">Build fix for win32 (phpredis 2.1.3)</a> [Charles] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/debian.control" class="js-slide-to js-rewrite-sha" id="9cd940e2a1de2c464e9c669fc5b9b83f8c64a7fd">debian.control</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2009-11-13T02:39:33-08:00" title="2009-11-13 02:39:33">November 13, 2009</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/637b1c40f5989dc78f198e0155f1e0e4506a226e" class="message">Initial commit</a> [<a href="https://github.com/owlient">owlient</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/library.c" class="js-slide-to js-rewrite-sha" id="e9409246154e6aa6de6448c6cb9e65e1fe393ee8">library.c</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-11-09T05:33:27-08:00" title="2011-11-09 05:33:27">November 09, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/90a82d3d9cfe2f46d586a220195fc75d52aa3f0e" class="message">Fixed issue with ZSCORE in MULTI/EXEC context.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/library.h" class="js-slide-to js-rewrite-sha" id="55c4b2ca611339661cfa79a5ce4d4e912adb49b8">library.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-11-03T15:23:15-07:00" title="2011-11-03 15:23:15">November 04, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/27fc7c79a2937365bce5984a820cc6a607314dad" class="message">Bugfix for hgetall used with serializer.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/mkdeb-apache2.sh" class="js-slide-to js-rewrite-sha" id="f546d48564d22bf2139b121327b897f8244491a3">mkdeb-apache2.sh</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2010-09-17T04:57:40-07:00" title="2010-09-17 04:57:40">September 17, 2010</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/c55a28344594540eb8e626a789845fac2d39df2b" class="message">Refactoring</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/php_redis.h" class="js-slide-to js-rewrite-sha" id="ed7ef45e34812ce692703a6c7e22dd04363607a0">php_redis.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-08-01T14:37:22-07:00" title="2011-08-01 14:37:22">August 02, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/b783d7e3aa45f2e36157e90f5858a533f2a0c473" class="message">Better variadic function, variadic HDEL.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis.c" class="js-slide-to js-rewrite-sha" id="5615069061f861503a3f557daf473a3345dad463">redis.c</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-11-13T13:19:25-08:00" title="2011-11-13 13:19:25">November 14, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/3b6f94aaa15641cc0a0763dd255464cc71c48eca" class="message">Fixed memory issue with timeouts.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_array.c" class="js-slide-to js-rewrite-sha" id="1d8fd415aa5f9eecd946201bbf982d997a7f8b46">redis_array.c</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-09-20T11:47:26-07:00" title="2011-09-20 11:47:26">September 21, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/ecf0e8eeb8c80fa6d13390e4978d011e2bffc189" class="message">Fixed duplicate symbol (GitHub issue </a><a href="https://github.com/nicolasff/phpredis/issues/50" title="make failed (osx), duplicate symbol _redis_array_ce [49bc7c]" class="issue-link">#50</a><a href="https://github.com/nicolasff/phpredis/commit/ecf0e8eeb8c80fa6d13390e4978d011e2bffc189" class="message">)</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_array.h" class="js-slide-to js-rewrite-sha" id="51d950f2811f640ef3c2cb4d6f14b862e19a2bae">redis_array.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-09-20T11:47:26-07:00" title="2011-09-20 11:47:26">September 21, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/ecf0e8eeb8c80fa6d13390e4978d011e2bffc189" class="message">Fixed duplicate symbol (GitHub issue </a><a href="https://github.com/nicolasff/phpredis/issues/50" title="make failed (osx), duplicate symbol _redis_array_ce [49bc7c]" class="issue-link">#50</a><a href="https://github.com/nicolasff/phpredis/commit/ecf0e8eeb8c80fa6d13390e4978d011e2bffc189" class="message">)</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_array_impl.c" class="js-slide-to js-rewrite-sha" id="a0496b0eea447b79643f550c486bd7f95eab26f6">redis_array_impl.c</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-10-27T00:19:36-07:00" title="2011-10-27 00:19:36">October 27, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/6bfc493e8dc4a931ab5a0ce9f417fdf702ae9330" class="message">Fix for PHP 5.2 compatibility.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_array_impl.h" class="js-slide-to js-rewrite-sha" id="e56c6742bbcc6b6254a522758fe04d6cbf5307ff">redis_array_impl.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-09-13T15:23:45-07:00" title="2011-09-13 15:23:45">September 14, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/62862cd920f87c4537c2b062c1da83d3de902909" class="message">Added missing index on MSET.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_session.c" class="js-slide-to js-rewrite-sha" id="43d2e35480be2aaaa7037b4911bc1502db4f5567">redis_session.c</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-06-25T15:09:09-07:00" title="2011-06-25 15:09:09">June 26, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/73d99c3ec85d7b4da6e0b187e5a396335db72d35" class="message">Added configure flag to disable sessions.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="alt">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/redis_session.h" class="js-slide-to js-rewrite-sha" id="ce74e23f6bd249ff2a7e7dff821c16b1531b19f5">redis_session.h</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2011-06-25T15:09:09-07:00" title="2011-06-25 15:09:09">June 26, 2011</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/73d99c3ec85d7b4da6e0b187e5a396335db72d35" class="message">Added configure flag to disable sessions.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
          <tr class="">
            <td class="icon"> <img alt="file" src="phpredis_files/txt.png" height="16" width="16"> </td>
            <td class="content"> <a href="https://github.com/nicolasff/phpredis/blob/master/serialize.list" class="js-slide-to js-rewrite-sha" id="d0971e287a82fb58f6680ca2b7bf3a3d79bf4e5b">serialize.list</a></td>
            <td class="age"> <time class="js-relative-date" datetime="2010-12-12T13:25:08-08:00" title="2010-12-12 13:25:08">December 13, 2010</time> </td>
            <td class="message"> <a href="https://github.com/nicolasff/phpredis/commit/40780e0fe3393978113658d434599352c612c0ce" class="message">Fixed tests, tested getMultiple.</a> [<a href="https://github.com/nicolasff">nicolasff</a>] </td>
          </tr>
      </tbody></table>

      
      <div class="announce instapaper_body markdown" data-path="/" id="readme"><span class="name">README.markdown</span><div class="wikistyle"><h1>PhpRedis</h1>

<p>The phpredis extension provides an API for communicating with the <a href="http://redis.io/">Redis</a> key-value store. It is released under the <a href="http://www.php.net/license/3_01.txt">PHP License, version 3.01</a>.
This code has been developed and maintained by Owlient from November 2009 to March 2011.</p>

<p>You can send comments, patches, questions <a href="https://github.com/nicolasff/phpredis/issues">here on github</a> or to <a href="mailto:n.favrefelix@gmail.com">n.favrefelix@gmail.com</a> (<a href="http://twitter.com/yowgi">@yowgi</a>).</p>

<h1>Installing/Configuring</h1>

<pre>phpize
./configure
make &amp;&amp; make install
</pre>

<p><code>make install</code> copies <code>redis.so</code> to an 
appropriate location, but you still need to enable the module in the PHP
 config file. To do so, either edit your php.ini or add a redis.ini file
 in <code>/etc/php5/conf.d</code> with the following contents: <code>extension=redis.so</code>.</p>

<p>You can generate a debian package for PHP5, accessible from Apache 2 by running <code>./mkdeb-apache2.sh</code> or with <code>dpkg-buildpackage</code> or <code>svn-buildpackage</code>.</p>

<p>This extension exports a single class, <code>Redis</code> (and <code>RedisException</code> used in case of errors). Check out <a href="https://github.com/ukko/phpredis-phpdoc">https://github.com/ukko/phpredis-phpdoc</a> for a PHP stub that you can use in your IDE for code completion.</p>

<h1>Install on OSX</h1>

<p>If the install fails on OSX, type the following commands in your shell before trying again:</p>

<pre>MACOSX_DEPLOYMENT_TARGET=10.6
CFLAGS="-arch i386 -arch x86_64 -g -Os -pipe -no-cpp-precomp"
CCFLAGS="-arch i386 -arch x86_64 -g -Os -pipe"
CXXFLAGS="-arch i386 -arch x86_64 -g -Os -pipe"
LDFLAGS="-arch i386 -arch x86_64 -bind_at_load"
export CFLAGS CXXFLAGS LDFLAGS CCFLAGS MACOSX_DEPLOYMENT_TARGET
</pre>

<p>See also: <a href="http://www.lecloud.net/post/3378834922/install-redis-php-extension-phpredis-with-macports">Install Redis &amp; PHP Extension PHPRedis with Macports</a>.</p>

<h1>Session handler (new)</h1>

<p>phpredis can be used to store PHP sessions. To do this, configure <code>session.save_handler</code> and <code>session.save_path</code> in your php.ini to tell phpredis where to store the sessions:</p>

<pre>session.save_handler = redis
session.save_path = "tcp://host1:6379?weight=1, tcp://host2:6379?weight=2&amp;timeout=2.5, tcp://host3:6379?weight=2"
</pre>

<p><code>session.save_path</code> can have a simple <code>host:port</code> format too, but you need to provide the <code>tcp://</code> scheme if you want to use the parameters. The following parameters are available:</p>

<ul>
<li>weight (integer): the weight of a host is used in comparison with 
the others in order to customize the session distribution on several 
hosts. If host A has twice the weight of host B, it will get twice the 
amount of sessions. In the example, <em>host1</em> stores 20% of all the sessions (1/(1+2+2)) while <em>host2</em> and <em>host3</em>
 each store 40% (2/1+2+2). The target host is determined once and for 
all at the start of the session, and doesn't change. The default weight 
is 1.</li>
<li>timeout (float): the connection timeout to a redis host, expressed 
in seconds. If the host is unreachable in that amount of time, the 
session storage will be unavailable for the client. The default timeout 
is very high (86400 seconds).</li>
<li>persistent (integer, should be 1 or 0): defines if a persistent connection should be used. <strong>(experimental setting)</strong>
</li>
<li>prefix (string, defaults to "PHPREDIS_SESSION:"): used as a prefix 
to the Redis key in which the session is stored. The key is composed of 
the prefix followed by the session ID.</li>
<li>auth (string, empty by default): used to authenticate with the Redis server prior to sending commands.</li>
</ul><p>Sessions have a lifetime expressed in seconds and stored in the INI variable "session.gc_maxlifetime". You can change it with <a href="http://php.net/ini_set"><code>ini_set()</code></a>.
The session handler requires a version of Redis with the <code>SETEX</code> command (at least 2.0).</p>

<h1>Distributed Redis Array</h1>

<p>See <a href="https://github.com/nicolasff/phpredis/blob/master/arrays.markdown#readme">dedicated page</a>.</p>

<h1>Error handling</h1>

<p>phpredis throws a <code>RedisException</code> object if it can't 
reach the Redis server. That can happen in case of connectivity issues, 
if the Redis service is down, or if the redis host is overloaded. In any
 other problematic case that does not involve an unreachable server 
(such as a key not existing, an invalid command, etc), phpredis will 
return <code>FALSE</code>.</p>

<h1>Methods</h1>

<h2>Redis::__construct</h2>

<h5><em>Description</em></h5>

<p>Creates a Redis client</p>

<h5><em>Example</em></h5>

<pre>$redis = new Redis();
</pre>

<h2>connect, open</h2>

<h5><em>Description</em></h5>

<p>Connects to a Redis instance.</p>

<h5><em>Parameters</em></h5>

<p><em>host</em>: string. can be a host, or the path to a unix domain socket<br><em>port</em>: int, optional<br><em>timeout</em>: float, value in seconds (optional, default is 0 meaning unlimited)  </p>

<h5><em>Return Value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> on success, <code>FALSE</code> on error.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;connect('127.0.0.1', 6379);
$redis-&gt;connect('127.0.0.1'); // port 6379 by default
$redis-&gt;connect('127.0.0.1', 6379, 2.5); // 2.5 sec timeout.
$redis-&gt;connect('/tmp/redis.sock'); // unix domain socket.
</pre>

<h2>pconnect, popen</h2>

<h5><em>Description</em></h5>

<p>Connects to a Redis instance or reuse a connection already established with <code>pconnect</code>/<code>popen</code>.</p>

<p>The connection will not be closed on <code>close</code> or end of request until the php process ends.
So be patient on to many open FD's (specially on redis server side) when using persistent
connections on many servers connecting to one redis server.</p>

<p>Also more than one persistent connection can be made identified by either host + port + timeout
or host + persistent_id or unix socket + timeout.</p>

<p>This feature is not available in threaded versions. <code>pconnect</code> and <code>popen</code> then working like their non
persistent equivalents.</p>

<h5><em>Parameters</em></h5>

<p><em>host</em>: string. can be a host, or the path to a unix domain socket<br><em>port</em>: int, optional<br><em>timeout</em>: float, value in seconds (optional, default is 0 meaning unlimited)<br><em>persistent_id</em>: string. identity for the requested persistent connection</p>

<h5><em>Return Value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> on success, <code>FALSE</code> on error.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;pconnect('127.0.0.1', 6379);
$redis-&gt;pconnect('127.0.0.1'); // port 6379 by default - same connection like before.
$redis-&gt;pconnect('127.0.0.1', 6379, 2.5); // 2.5 sec timeout and would be another connection than the two before.
$redis-&gt;pconnect('127.0.0.1', 6379, 2.5, 'x'); // x is sent as persistent_id and would be another connection the the three before.
$redis-&gt;pconnect('/tmp/redis.sock'); // unix domain socket - would be another connection than the four before.
</pre>

<h2>close</h2>

<h5><em>Description</em></h5>

<p>Disconnects from the Redis instance, except when <code>pconnect</code> is used.</p>

<h2>setOption</h2>

<h5><em>Description</em></h5>

<p>Set client option.</p>

<h5><em>Parameters</em></h5>

<p><em>parameter name</em><br><em>parameter value</em>  </p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> on success, <code>FALSE</code> on error.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE);   // don't serialize data
$redis-&gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);    // use built-in serialize/unserialize
$redis-&gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY);   // use igBinary serialize/unserialize

$redis-&gt;setOption(Redis::OPT_PREFIX, 'myAppName:'); // use custom prefix on all keys
</pre>

<h2>getOption</h2>

<h5><em>Description</em></h5>

<p>Get client option.</p>

<h5><em>Parameters</em></h5>

<p><em>parameter name</em>  </p>

<h5><em>Return value</em></h5>

<p>Parameter value.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;getOption(Redis::OPT_SERIALIZER);   // return Redis::SERIALIZER_NONE, Redis::SERIALIZER_PHP, or Redis::SERIALIZER_IGBINARY.
</pre>

<h2>ping</h2>

<h5><em>Description</em></h5>

<p>Check the current connection status</p>

<h5><em>Parameters</em></h5>

<p>(none)</p>

<h5><em>Return Value</em></h5>

<p><em>STRING</em>: <code>+PONG</code> on success. Throws a RedisException object on connectivity error, as described above.</p>

<h2>get</h2>

<h5><em>Description</em></h5>

<p>Get the value related to the specified key</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return Value</em></h5>

<p><em>String</em> or <em>Bool</em>: If key didn't exist, <code>FALSE</code> is returned. Otherwise, the value related to this key is returned.</p>

<h5><em>Examples</em></h5>

<pre>$redis-&gt;get('key');
</pre>

<h2>set</h2>

<h5>Description</h5>

<p>Set the string value in argument as value of the key.</p>

<h5>Parameters</h5>

<p><em>Key</em><br><em>Value</em><br><em>Timeout</em> (optional). Calling <code>SETEX</code> is preferred if you want a timeout.  </p>

<h5>Return value</h5>

<p><em>Bool</em> <code>TRUE</code> if the command is successful.</p>

<h5>Examples</h5>

<pre>$redis-&gt;set('key', 'value');
</pre>

<h2>setex</h2>

<h5>Description</h5>

<p>Set the string value in argument as value of the key, with a time to live.</p>

<h5>Parameters</h5>

<p><em>Key</em>
<em>TTL</em>
<em>Value</em></p>

<h5>Return value</h5>

<p><em>Bool</em> <code>TRUE</code> if the command is successful.</p>

<h5>Examples</h5>

<pre>$redis-&gt;setex('key', 3600, 'value'); // sets key → value, with 1h TTL.
</pre>

<h2>setnx</h2>

<h5>Description</h5>

<p>Set the string value in argument as value of the key if the key doesn't already exist in the database.</p>

<h5>Parameters</h5>

<p><em>key</em>
<em>value</em></p>

<h5>Return value</h5>

<p><em>Bool</em> <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5>Examples</h5>

<pre>$redis-&gt;setnx('key', 'value'); /* return TRUE */
$redis-&gt;setnx('key', 'value'); /* return FALSE */
</pre>

<h2>del, delete</h2>

<h5>Description</h5>

<p>Remove specified keys.</p>

<h5>Parameters</h5>

<p>An array of keys, or an undefined number of parameters, each a key: <em>key1</em> <em>key2</em> <em>key3</em> ... <em>keyN</em></p>

<h5>Return value</h5>

<p><em>Long</em> Number of keys deleted.</p>

<h5>Examples</h5>

<pre>$redis-&gt;set('key1', 'val1');
$redis-&gt;set('key2', 'val2');
$redis-&gt;set('key3', 'val3');
$redis-&gt;set('key4', 'val4');

$redis-&gt;delete('key1', 'key2'); /* return 2 */
$redis-&gt;delete(array('key3', 'key4')); /* return 2 */
</pre>

<h2>multi, exec, discard.</h2>

<h5>Description</h5>

<p>Enter and exit transactional mode.  </p>

<h5>Parameters</h5>

<p>(optional) <code>Redis::MULTI</code> or <code>Redis::PIPELINE</code>. Defaults to <code>Redis::MULTI</code>. A <code>Redis::MULTI</code> block of commands runs as a single transaction; a <code>Redis::PIPELINE</code> block is simply transmitted faster to the server, but without any guarantee of atomicity. <code>discard</code> cancels a transaction.  </p>

<h5>Return value</h5>

<p><code>multi()</code> returns the Redis instance and enters multi-mode. Once in multi-mode, all subsequent method calls return the same object until <code>exec()</code> is called.</p>

<h5>Example</h5>

<pre>$ret = $redis-&gt;multi()
    -&gt;set('key1', 'val1')
    -&gt;get('key1')
    -&gt;set('key2', 'val2')
    -&gt;get('key2')
    -&gt;exec();

/*
$ret == array(
    0 =&gt; TRUE,
    1 =&gt; 'val1',
    2 =&gt; TRUE,
    3 =&gt; 'val2');
*/
</pre>

<h2>watch, unwatch</h2>

<h5>Description</h5>

<p>Watches a key for modifications by another client. If the key is modified between <code>WATCH</code> and <code>EXEC</code>, the MULTI/EXEC transaction will fail (return <code>FALSE</code>). <code>unwatch</code> cancels all the watching of all keys by this client.</p>

<h5>Parameters</h5>

<p><em>keys</em>: a list of keys</p>

<h5>Example</h5>

<pre>$redis-&gt;watch('x');
/* long code here during the execution of which other clients could well modify `x` */
$ret = $redis-&gt;multi()
    -&gt;incr('x')
    -&gt;exec();
/*
$ret = FALSE if x has been modified between the call to WATCH and the call to EXEC.
*/
</pre>

<h2>subscribe</h2>

<h5>Description</h5>

<p>Subscribe to channels. Warning: this function will probably change in the future.</p>

<h5>Parameters</h5>

<p><em>channels</em>: an array of channels to subscribe to<br><em>callback</em>:
 either a string or an array($instance, 'method_name'). The callback 
function receives 3 parameters: the redis instance, the channel name, 
and the message.  </p>

<h5>Example</h5>

<pre>function f($redis, $chan, $msg) {
    switch($chan) {
        case 'chan-1':
            ...
            break;

        case 'chan-2':
            ...
            break;

        case 'chan-2':
            ...
            break;
    }
}

$redis-&gt;subscribe(array('chan-1', 'chan-2', 'chan-3'), 'f'); // subscribe to 3 chans
</pre>

<h2>publish</h2>

<h5>Description</h5>

<p>Publish messages to channels. Warning: this function will probably change in the future.</p>

<h5>Parameters</h5>

<p><em>channel</em>: a channel to publish to<br><em>messsage</em>: string  </p>

<h5>Example</h5>

<pre>$redis-&gt;publish('chan-1', 'hello, world!'); // send message.
</pre>

<h2>exists</h2>

<h5>Description</h5>

<p>Verify if the specified key exists.</p>

<h5>Parameters</h5>

<p><em>key</em></p>

<h5>Return value</h5>

<p><em>BOOL</em>: If the key exists, return <code>TRUE</code>, otherwise return <code>FALSE</code>.</p>

<h5>Examples</h5>

<pre>$redis-&gt;set('key', 'value');
$redis-&gt;exists('key'); /*  TRUE */
$redis-&gt;exists('NonExistingKey'); /* FALSE */
</pre>

<h2>incr, incrBy</h2>

<h5>Description</h5>

<p>Increment the number stored at key by one. If the second argument is 
filled, it will be used as the integer value of the increment.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em>: value that will be added to key (only for incrBy)</p>

<h5>Return value</h5>

<p><em>INT</em> the new value</p>

<h5>Examples</h5>

<pre>$redis-&gt;incr('key1'); /* key1 didn't exists, set to 0 before the increment */
                      /* and now has the value 1  */

$redis-&gt;incr('key1'); /* 2 */
$redis-&gt;incr('key1'); /* 3 */
$redis-&gt;incr('key1'); /* 4 */
$redis-&gt;incrBy('key1', 10); /* 14 */
</pre>

<h2>decr, decrBy</h2>

<h5>Description</h5>

<p>Decrement the number stored at key by one. If the second argument is 
filled, it will be used as the integer value of the decrement.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em>: value that will be substracted to key (only for decrBy)</p>

<h5>Return value</h5>

<p><em>INT</em> the new value</p>

<h5>Examples</h5>

<pre>$redis-&gt;decr('key1'); /* key1 didn't exists, set to 0 before the increment */
                      /* and now has the value -1  */

$redis-&gt;decr('key1'); /* -2 */
$redis-&gt;decr('key1'); /* -3 */
$redis-&gt;decrBy('key1', 10); /* -13 */
</pre>

<h2>getMultiple</h2>

<h5>Description</h5>

<p>Get the values of all the specified keys. If one or more keys dont exist, the array will contain <code>FALSE</code> at the position of the key.</p>

<h5>Parameters</h5>

<p><em>Array</em>: Array containing the list of the keys</p>

<h5>Return value</h5>

<p><em>Array</em>: Array containing the values related to keys in argument</p>

<h5>Examples</h5>

<pre>$redis-&gt;set('key1', 'value1');
$redis-&gt;set('key2', 'value2');
$redis-&gt;set('key3', 'value3');
$redis-&gt;getMultiple(array('key1', 'key2', 'key3')); /* array('value1', 'value2', 'value3');
$redis-&gt;getMultiple(array('key0', 'key1', 'key5')); /* array(`FALSE`, 'value2', `FALSE`);
</pre>

<h2>lPush</h2>

<h5>Description</h5>

<p>Adds the string value to the head (left) of the list. Creates the 
list if the key didn't exist. If the key exists and is not a list, <code>FALSE</code> is returned.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em> String, value to push in key</p>

<h5>Return value</h5>

<p><em>LONG</em> The new length of the list in case of success, <code>FALSE</code> in case of Failure.</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('key1');
$redis-&gt;lPush('key1', 'C'); // returns 1
$redis-&gt;lPush('key1', 'B'); // returns 2
$redis-&gt;lPush('key1', 'A'); // returns 3
/* key1 now points to the following list: [ 'A', 'B', 'C' ] */
</pre>

<h2>rPush</h2>

<h5>Description</h5>

<p>Adds the string value to the tail (right) of the list. Creates the 
list if the key didn't exist. If the key exists and is not a list, <code>FALSE</code> is returned.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em> String, value to push in key</p>

<h5>Return value</h5>

<p><em>LONG</em> The new length of the list in case of success, <code>FALSE</code> in case of Failure.</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('key1');
$redis-&gt;rPush('key1', 'A'); // returns 1
$redis-&gt;rPush('key1', 'B'); // returns 2
$redis-&gt;rPush('key1', 'C'); // returns 3
/* key1 now points to the following list: [ 'A', 'B', 'C' ] */
</pre>

<h2>lPushx</h2>

<h5>Description</h5>

<p>Adds the string value to the head (left) of the list if the list exists.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em> String, value to push in key</p>

<h5>Return value</h5>

<p><em>LONG</em> The new length of the list in case of success, <code>FALSE</code> in case of Failure.</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('key1');
$redis-&gt;lPushx('key1', 'A'); // returns 0
$redis-&gt;lPush('key1', 'A'); // returns 1
$redis-&gt;lPushx('key1', 'B'); // returns 2
$redis-&gt;lPushx('key1', 'C'); // returns 3
/* key1 now points to the following list: [ 'A', 'B', 'C' ] */
</pre>

<h2>rPushx</h2>

<h5>Description</h5>

<p>Adds the string value to the tail (right) of the list if the ist exists. <code>FALSE</code> in case of Failure.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em> String, value to push in key</p>

<h5>Return value</h5>

<p><em>LONG</em> The new length of the list in case of success, <code>FALSE</code> in case of Failure.</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('key1');
$redis-&gt;rPushx('key1', 'A'); // returns 0
$redis-&gt;rPush('key1', 'A'); // returns 1
$redis-&gt;rPushx('key1', 'B'); // returns 2
$redis-&gt;rPushx('key1', 'C'); // returns 3
/* key1 now points to the following list: [ 'A', 'B', 'C' ] */
</pre>

<h2>lPop</h2>

<h5><em>Description</em></h5>

<p>Return and remove the first element of the list.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>STRING</em> if command executed successfully
<em>BOOL</em> <code>FALSE</code> in case of failure (empty list)</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C'); /* key1 =&gt; [ 'A', 'B', 'C' ] */
$redis-&gt;lPop('key1'); /* key1 =&gt; [ 'B', 'C' ] */
</pre>

<h2>rPop</h2>

<h5><em>Description</em></h5>

<p>Returns and removes the first element of the list.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>STRING</em> if command executed successfully
<em>BOOL</em> <code>FALSE</code> in case of failure (empty list)</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C'); /* key1 =&gt; [ 'A', 'B', 'C' ] */
$redis-&gt;rPop('key1'); /* key1 =&gt; [ 'A', 'B' ] */
</pre>

<h2>blPop, brPop</h2>

<h5><em>Description</em></h5>

<p>Is a blocking lPop(rPop) primitive. If at least one of the lists 
contains at least one element, the element will be popped from the head 
of the list and returned to the caller.
Il all the list identified by the keys passed in arguments are empty, 
blPop will block during the specified timeout until an element is pushed
 to one of those lists. This element will be popped.</p>

<h5><em>Parameters</em></h5>

<p><em>ARRAY</em> Array containing the keys of the lists
<em>INTEGER</em> Timeout
Or
<em>STRING</em> Key1
<em>STRING</em> Key2
<em>STRING</em> Key3
...
<em>STRING</em> Keyn
<em>INTEGER</em> Timeout</p>

<h5><em>Return value</em></h5>

<p><em>ARRAY</em> array('listName', 'element')</p>

<h5><em>Example</em></h5>

<pre>/* Non blocking feature */
$redis-&gt;lPush('key1', 'A');
$redis-&gt;delete('key2');

$redis-&gt;blPop('key1', 'key2', 10); /* array('key1', 'A') */
/* OR */
$redis-&gt;blPop(array('key1', 'key2'), 10); /* array('key1', 'A') */

$redis-&gt;brPop('key1', 'key2', 10); /* array('key1', 'A') */
/* OR */
$redis-&gt;brPop(array('key1', 'key2'), 10); /* array('key1', 'A') */

/* Blocking feature */

/* process 1 */
$redis-&gt;delete('key1');
$redis-&gt;blPop('key1', 10);
/* blocking for 10 seconds */

/* process 2 */
$redis-&gt;lPush('key1', 'A');

/* process 1 */
/* array('key1', 'A') is returned*/

</pre>

<h2>lSize</h2>

<h5><em>Description</em></h5>

<p>Returns the size of a list identified by Key. If the list didn't 
exist or is empty, the command returns 0. If the data type identified by
 Key is not a list, the command return <code>FALSE</code>.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em></p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> The size of the list identified by Key exists.<br><em>BOOL</em> <code>FALSE</code> if the data type identified by Key is not list</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C'); /* key1 =&gt; [ 'A', 'B', 'C' ] */
$redis-&gt;lSize('key1');/* 3 */
$redis-&gt;rPop('key1'); 
$redis-&gt;lSize('key1');/* 2 */
</pre>

<h2>lIndex, lGet</h2>

<h5><em>Description</em></h5>

<p>Return the specified element of the list stored at the specified key.
0 the first element, 1 the second ...
-1 the last element, -2 the penultimate ...
Return <code>FALSE</code> in case of a bad index or a key that doesn't point to a list.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>index</em></p>

<h5><em>Return value</em></h5>

<p><em>String</em> the element at this index<br><em>Bool</em> <code>FALSE</code> if the key identifies a non-string data type, or no value corresponds to this index in the list <code>Key</code>.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C'); /* key1 =&gt; [ 'A', 'B', 'C' ] */
$redis-&gt;lGet('key1', 0); /* 'A' */
$redis-&gt;lGet('key1', -1); /* 'C' */
$redis-&gt;lGet('key1', 10); /* `FALSE` */
</pre>

<h2>lSet</h2>

<h5><em>Description</em></h5>

<p>Set the list at index with the new value.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>index</em>
<em>value</em></p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> if the new value is setted. <code>FALSE</code> if the index is out of range, or data type identified by key is not a list.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C'); /* key1 =&gt; [ 'A', 'B', 'C' ] */
$redis-&gt;lGet('key1', 0); /* 'A' */
$redis-&gt;lSet('key1', 0, 'X');
$redis-&gt;lGet('key1', 0); /* 'X' */ 
</pre>

<h2>lRange, lGetRange</h2>

<h5><em>Description</em></h5>

<p>Returns the specified elements of the list stored at the specified 
key in the range [start, end]. start and stop are interpretated as 
indices:
0 the first element, 1 the second ...
-1 the last element, -2 the penultimate ...</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>start</em>
<em>end</em></p>

<h5><em>Return value</em></h5>

<p><em>Array</em> containing the values in specified range. </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C');
$redis-&gt;lRange('key1', 0, -1); /* array('A', 'B', 'C') */
</pre>

<h2>lTrim, listTrim</h2>

<h5><em>Description</em></h5>

<p>Trims an existing list so that it will contain only a specified range of elements.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>start</em>
<em>stop</em></p>

<h5><em>Return value</em></h5>

<p><em>Array</em><br><em>Bool</em> return <code>FALSE</code> if the key identify a non-list value.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;rPush('key1', 'A');
$redis-&gt;rPush('key1', 'B');
$redis-&gt;rPush('key1', 'C');
$redis-&gt;lRange('key1', 0, -1); /* array('A', 'B', 'C') */
$redis-&gt;lTrim('key1', 0, 1);
$redis-&gt;lRange('key1', 0, -1); /* array('A', 'B') */
</pre>

<h2>lRem, lRemove</h2>

<h5><em>Description</em></h5>

<p>Removes the first <code>count</code> occurences of the value element 
from the list. If count is zero, all the matching elements are removed. 
If count is negative, elements are removed from tail to head.</p>

<p><strong>Note</strong>: The argument order is not the same as in the Redis documentation. This difference is kept for compatibility reasons.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>value</em><br><em>count</em>  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> the number of elements to remove<br><em>BOOL</em> <code>FALSE</code> if the value identified by key is not a list.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;lPush('key1', 'A');
$redis-&gt;lPush('key1', 'B');
$redis-&gt;lPush('key1', 'C'); 
$redis-&gt;lPush('key1', 'A'); 
$redis-&gt;lPush('key1', 'A'); 

$redis-&gt;lRange('key1', 0, -1); /* array('A', 'A', 'C', 'B', 'A') */
$redis-&gt;lRem('key1', 'A', 2); /* 2 */
$redis-&gt;lRange('key1', 0, -1); /* array('C', 'B', 'A') */
</pre>

<h2>lInsert</h2>

<h5><em>Description</em></h5>

<p>Insert value in the list before or after the pivot value. the 
parameter options specify the position of the insert (before or after).
If the list didn't exists, or the pivot didn't exists, the value is not 
inserted.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>position</em>  Redis::BEFORE | Redis::AFTER
<em>pivot</em>
<em>value</em></p>

<h5><em>Return value</em></h5>

<p>The number of the elements in the list, -1 if the pivot didn't exists.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('key1');
$redis-&gt;lInsert('key1', Redis::AFTER, 'A', 'X'); /* 0 */

$redis-&gt;lPush('key1', 'A');
$redis-&gt;lPush('key1', 'B');
$redis-&gt;lPush('key1', 'C');

$redis-&gt;lInsert('key1', Redis::BEFORE, 'C', 'X'); /* 4 */
$redis-&gt;lRange('key1', 0, -1); /* array('A', 'B', 'X', 'C') */

$redis-&gt;lInsert('key1', Redis::AFTER, 'C', 'Y'); /* 5 */
$redis-&gt;lRange('key1', 0, -1); /* array('A', 'B', 'X', 'C', 'Y') */

$redis-&gt;lInsert('key1', Redis::AFTER, 'W', 'value'); /* -1 */

</pre>

<h2>sAdd</h2>

<h5><em>Description</em></h5>

<p>Adds a value to the set value stored at key. If this value is already in the set, <code>FALSE</code> is returned.  </p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>value</em></p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> if value didn't exist and was added successfully, <code>FALSE</code> if the value is already present.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); /* TRUE, 'key1' =&gt; {'set1'} */
$redis-&gt;sAdd('key1' , 'set2'); /* TRUE, 'key1' =&gt; {'set1', 'set2'}*/
$redis-&gt;sAdd('key1' , 'set2'); /* FALSE, 'key1' =&gt; {'set1', 'set2'}*/
</pre>

<h2>sRem, sRemove</h2>

<h5><em>Description</em></h5>

<p>Removes the specified member from the set value stored at key.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>member</em></p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> if the member was present in the set, <code>FALSE</code> if it didn't.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); 
$redis-&gt;sAdd('key1' , 'set2'); 
$redis-&gt;sAdd('key1' , 'set3'); /* 'key1' =&gt; {'set1', 'set2', 'set3'}*/
$redis-&gt;sRem('key1', 'set2'); /* 'key1' =&gt; {'set1', 'set3'} */
</pre>

<h2>sMove</h2>

<h5><em>Description</em></h5>

<p>Moves the specified member from the set at srcKey to the set at dstKey.</p>

<h5><em>Parameters</em></h5>

<p><em>srcKey</em>
<em>dstKey</em>
<em>member</em></p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> If the operation is successful, return <code>TRUE</code>. If the srcKey and/or dstKey didn't exist, and/or the member didn't exist in srcKey, <code>FALSE</code> is returned.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set11'); 
$redis-&gt;sAdd('key1' , 'set12'); 
$redis-&gt;sAdd('key1' , 'set13'); /* 'key1' =&gt; {'set11', 'set12', 'set13'}*/
$redis-&gt;sAdd('key2' , 'set21'); 
$redis-&gt;sAdd('key2' , 'set22'); /* 'key2' =&gt; {'set21', 'set22'}*/
$redis-&gt;sMove('key1', 'key2', 'set13'); /* 'key1' =&gt;  {'set11', 'set12'} */
                    /* 'key2' =&gt;  {'set21', 'set22', 'set13'} */

</pre>

<h2>sIsMember, sContains</h2>

<h5><em>Description</em></h5>

<p>Checks if <code>value</code> is a member of the set stored at the key <code>key</code>.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>value</em></p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> if <code>value</code> is a member of the set at key <code>key</code>, <code>FALSE</code> otherwise.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); 
$redis-&gt;sAdd('key1' , 'set2'); 
$redis-&gt;sAdd('key1' , 'set3'); /* 'key1' =&gt; {'set1', 'set2', 'set3'}*/

$redis-&gt;sIsMember('key1', 'set1'); /* TRUE */
$redis-&gt;sIsMember('key1', 'setX'); /* FALSE */

</pre>

<h2>sCard, sSize</h2>

<h5><em>Description</em></h5>

<p>Returns the cardinality of the set identified by key.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> the cardinality of the set identified by key, 0 if the set doesn't exist.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); 
$redis-&gt;sAdd('key1' , 'set2'); 
$redis-&gt;sAdd('key1' , 'set3'); /* 'key1' =&gt; {'set1', 'set2', 'set3'}*/
$redis-&gt;sCard('key1'); /* 3 */
$redis-&gt;sCard('keyX'); /* 0 */
</pre>

<h2>sPop</h2>

<h5><em>Description</em></h5>

<p>Removes and returns a random element from the set value at Key.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>String</em> "popped" value<br><em>Bool</em> <code>FALSE</code> if set identified by key is empty or doesn't exist.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); 
$redis-&gt;sAdd('key1' , 'set2'); 
$redis-&gt;sAdd('key1' , 'set3'); /* 'key1' =&gt; {'set3', 'set1', 'set2'}*/
$redis-&gt;sPop('key1'); /* 'set1', 'key1' =&gt; {'set3', 'set2'} */
$redis-&gt;sPop('key1'); /* 'set3', 'key1' =&gt; {'set2'} */
</pre>

<h2>sRandMember</h2>

<h5><em>Description</em></h5>

<p>Returns a random element from the set value at Key, without removing it.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>String</em> value from the set<br><em>Bool</em> <code>FALSE</code> if set identified by key is empty or doesn't exist.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1' , 'set1'); 
$redis-&gt;sAdd('key1' , 'set2'); 
$redis-&gt;sAdd('key1' , 'set3'); /* 'key1' =&gt; {'set3', 'set1', 'set2'}*/
$redis-&gt;sRandMember('key1'); /* 'set1', 'key1' =&gt; {'set3', 'set1', 'set2'} */
$redis-&gt;sRandMember('key1'); /* 'set3', 'key1' =&gt; {'set3', 'set1', 'set2'} */
</pre>

<h2>sInter</h2>

<h5><em>Description</em></h5>

<p>Returns the members of a set resulting from the intersection of all the sets held at the specified keys.
If just a single key is specified, then this command produces the members of this set. If one of the keys
is missing, <code>FALSE</code> is returned.</p>

<h5><em>Parameters</em></h5>

<p>key1, key2, keyN: keys identifying the different sets on which we will apply the intersection.</p>

<h5><em>Return value</em></h5>

<p>Array, contain the result of the intersection between those keys. If 
the intersection beteen the different sets is empty, the return value 
will be empty array.</p>

<h5><em>Examples</em></h5>

<pre>$redis-&gt;sAdd('key1', 'val1');
$redis-&gt;sAdd('key1', 'val2');
$redis-&gt;sAdd('key1', 'val3');
$redis-&gt;sAdd('key1', 'val4');

$redis-&gt;sAdd('key2', 'val3');
$redis-&gt;sAdd('key2', 'val4');

$redis-&gt;sAdd('key3', 'val3');
$redis-&gt;sAdd('key3', 'val4');

var_dump($redis-&gt;sInter('key1', 'key2', 'key3'));
</pre>

<p>Output:</p>

<pre>array(2) {
  [0]=&gt;
  string(4) "val4"
  [1]=&gt;
  string(4) "val3"
}
</pre>

<h2>sInterStore</h2>

<h5><em>Description</em></h5>

<p>Performs a sInter command and stores the result in a new set.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: dstkey, the key to store the diff into.</p>

<p><em>Keys</em>: key1, key2... keyN. key1..keyN are intersected as in sInter.</p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em>: The cardinality of the resulting set, or <code>FALSE</code> in case of a missing key.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;sAdd('key1', 'val1');
$redis-&gt;sAdd('key1', 'val2');
$redis-&gt;sAdd('key1', 'val3');
$redis-&gt;sAdd('key1', 'val4');

$redis-&gt;sAdd('key2', 'val3');
$redis-&gt;sAdd('key2', 'val4');

$redis-&gt;sAdd('key3', 'val3');
$redis-&gt;sAdd('key3', 'val4');

var_dump($redis-&gt;sInterStore('output', 'key1', 'key2', 'key3'));
var_dump($redis-&gt;sMembers('output'));
</pre>

<p>Output:</p>

<pre>int(2)

array(2) {
  [0]=&gt;
  string(4) "val4"
  [1]=&gt;
  string(4) "val3"
}
</pre>

<h2>sUnion</h2>

<h5><em>Description</em></h5>

<p>Performs the union between N sets and returns it.</p>

<h5><em>Parameters</em></h5>

<p><em>Keys</em>: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.</p>

<h5><em>Return value</em></h5>

<p><em>Array of strings</em>: The union of all these sets.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s0', 's1', 's2');

$redis-&gt;sAdd('s0', '1');
$redis-&gt;sAdd('s0', '2');
$redis-&gt;sAdd('s1', '3');
$redis-&gt;sAdd('s1', '1');
$redis-&gt;sAdd('s2', '3');
$redis-&gt;sAdd('s2', '4');

var_dump($redis-&gt;sUnion('s0', 's1', 's2'));
</pre>

<p>Return value: all elements that are either in s0 or in s1 or in s2.</p>

<pre>array(4) {
  [0]=&gt;
  string(1) "3"
  [1]=&gt;
  string(1) "4"
  [2]=&gt;
  string(1) "1"
  [3]=&gt;
  string(1) "2"
}
</pre>

<h2>sUnionStore</h2>

<h5><em>Description</em></h5>

<p>Performs the same action as sUnion, but stores the result in the first key</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: dstkey, the key to store the diff into.</p>

<p><em>Keys</em>: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.</p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em>: The cardinality of the resulting set, or <code>FALSE</code> in case of a missing key.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s0', 's1', 's2');

$redis-&gt;sAdd('s0', '1');
$redis-&gt;sAdd('s0', '2');
$redis-&gt;sAdd('s1', '3');
$redis-&gt;sAdd('s1', '1');
$redis-&gt;sAdd('s2', '3');
$redis-&gt;sAdd('s2', '4');

var_dump($redis-&gt;sUnionStore('dst', 's0', 's1', 's2'));
var_dump($redis-&gt;sMembers('dst'));
</pre>

<p>Return value: the number of elements that are either in s0 or in s1 or in s2.</p>

<pre>int(4)
array(4) {
  [0]=&gt;
  string(1) "3"
  [1]=&gt;
  string(1) "4"
  [2]=&gt;
  string(1) "1"
  [3]=&gt;
  string(1) "2"
}
</pre>

<h2>sDiff</h2>

<h5><em>Description</em></h5>

<p>Performs the difference between N sets and returns it.</p>

<h5><em>Parameters</em></h5>

<p><em>Keys</em>: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.</p>

<h5><em>Return value</em></h5>

<p><em>Array of strings</em>: The difference of the first set will all the others.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s0', 's1', 's2');

$redis-&gt;sAdd('s0', '1');
$redis-&gt;sAdd('s0', '2');
$redis-&gt;sAdd('s0', '3');
$redis-&gt;sAdd('s0', '4');

$redis-&gt;sAdd('s1', '1');
$redis-&gt;sAdd('s2', '3');

var_dump($redis-&gt;sDiff('s0', 's1', 's2'));
</pre>

<p>Return value: all elements of s0 that are neither in s1 nor in s2.</p>

<pre>array(2) {
  [0]=&gt;
  string(1) "4"
  [1]=&gt;
  string(1) "2"
}
</pre>

<h2>sDiffStore</h2>

<h5><em>Description</em></h5>

<p>Performs the same action as sDiff, but stores the result in the first key</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: dstkey, the key to store the diff into.</p>

<p><em>Keys</em>: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis</p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em>: The cardinality of the resulting set, or <code>FALSE</code> in case of a missing key.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s0', 's1', 's2');

$redis-&gt;sAdd('s0', '1');
$redis-&gt;sAdd('s0', '2');
$redis-&gt;sAdd('s0', '3');
$redis-&gt;sAdd('s0', '4');

$redis-&gt;sAdd('s1', '1');
$redis-&gt;sAdd('s2', '3');

var_dump($redis-&gt;sDiffStore('dst', 's0', 's1', 's2'));
var_dump($redis-&gt;sMembers('dst'));
</pre>

<p>Return value: the number of elements of s0 that are neither in s1 nor in s2.</p>

<pre>int(2)
array(2) {
  [0]=&gt;
  string(1) "4"
  [1]=&gt;
  string(1) "2"
}
</pre>

<h2>sMembers, sGetMembers</h2>

<h5><em>Description</em></h5>

<p>Returns the contents of a set.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>An array of elements, the contents of the set.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s');
$redis-&gt;sAdd('s', 'a');
$redis-&gt;sAdd('s', 'b');
$redis-&gt;sAdd('s', 'a');
$redis-&gt;sAdd('s', 'c');
var_dump($redis-&gt;sMembers('s'));
</pre>

<p>Output:</p>

<pre>array(3) {
  [0]=&gt;
  string(1) "c"
  [1]=&gt;
  string(1) "a"
  [2]=&gt;
  string(1) "b"
}
</pre>

<p>The order is random and corresponds to redis' own internal representation of the set structure.</p>

<h2>getSet</h2>

<h5><em>Description</em></h5>

<p>Sets a value and returns the previous entry at that key.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<p><em>STRING</em>: value</p>

<h5><em>Return value</em></h5>

<p>A string, the previous value located at this key.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('x', '42');
$exValue = $redis-&gt;getSet('x', 'lol');  // return '42', replaces x by 'lol'
$newValue = $redis-&gt;get('x')'       // return 'lol'
</pre>

<h2>randomKey</h2>

<h5><em>Description</em></h5>

<p>Returns a random key.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>STRING</em>: an existing key in redis.</p>

<h5><em>Example</em></h5>

<pre>$key = $redis-&gt;randomKey();
$surprise = $redis-&gt;get($key);  // who knows what's in there.
</pre>

<h2>select</h2>

<h5><em>Description</em></h5>

<p>Switches to a given database.</p>

<h5><em>Parameters</em></h5>

<p><em>INTEGER</em>: dbindex, the database number to switch to.</p>

<h5><em>Return value</em></h5>

<p><code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<p>(See following function)</p>

<h2>move</h2>

<h5><em>Description</em></h5>

<p>Moves a key to a different database.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key, the key to move.</p>

<p><em>INTEGER</em>: dbindex, the database number to move the key to.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;select(0);  // switch to DB 0
$redis-&gt;set('x', '42'); // write 42 to x
$redis-&gt;move('x', 1);   // move to DB 1
$redis-&gt;select(1);  // switch to DB 1
$redis-&gt;get('x');   // will return 42
</pre>

<h2>rename, renameKey</h2>

<h5><em>Description</em></h5>

<p>Renames a key.</p>

<h5><em>Parameters</em></h5>

<p><em>STRING</em>: srckey, the key to rename.</p>

<p><em>STRING</em>: dstkey, the new name for the key.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('x', '42');
$redis-&gt;rename('x', 'y');
$redis-&gt;get('y');   // → 42
$redis-&gt;get('x');   // → `FALSE`
</pre>

<h2>renameNx</h2>

<h5><em>Description</em></h5>

<p>Same as rename, but will not replace a key if the destination already exists. This is the same behaviour as setNx.</p>

<h2>setTimeout, expire</h2>

<h5><em>Description</em></h5>

<p>Sets an expiration date (a timeout) on an item.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key. The key that will disappear.</p>

<p><em>Integer</em>: ttl. The key's remaining Time To Live, in seconds.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('x', '42');
$redis-&gt;setTimeout('x', 3); // x will disappear in 3 seconds.
sleep(5);               // wait 5 seconds
$redis-&gt;get('x');       // will return `FALSE`, as 'x' has expired.
</pre>

<h2>expireAt</h2>

<h5><em>Description</em></h5>

<p>Sets an expiration date (a timestamp) on an item.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key. The key that will disappear.</p>

<p><em>Integer</em>: Unix timestamp. The key's date of death, in seconds from Epoch time.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('x', '42');
$now = time(NULL); // current timestamp
$redis-&gt;expireAt('x', $now + 3);    // x will disappear in 3 seconds.
sleep(5);               // wait 5 seconds
$redis-&gt;get('x');       // will return `FALSE`, as 'x' has expired.
</pre>

<h2>keys, getKeys</h2>

<h5><em>Description</em></h5>

<p>Returns the keys that match a certain pattern.</p>

<h5><em>Description</em></h5>

<h5><em>Parameters</em></h5>

<p><em>STRING</em>: pattern, using '*' as a wildcard.</p>

<h5><em>Return value</em></h5>

<p><em>Array of STRING</em>: The keys that match a certain pattern.</p>

<h5><em>Example</em></h5>

<pre>$allKeys = $redis-&gt;keys('*');   // all keys will match this.
$keyWithUserPrefix = $redis-&gt;keys('user*');
</pre>

<h2>dbSize</h2>

<h5><em>Description</em></h5>

<p>Returns the current database's size.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em>: DB size, in number of keys.</p>

<h5><em>Example</em></h5>

<pre>$count = $redis-&gt;dbSize();
echo "Redis has $count keys\n";
</pre>

<h2>auth</h2>

<h5><em>Description</em></h5>

<p>Authenticate the connection using a password.
<em>Warning</em>: The password is sent in plain-text over the network.</p>

<h5><em>Parameters</em></h5>

<p><em>STRING</em>: password</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> if the connection is authenticated, <code>FALSE</code> otherwise.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;auth('foobared');
</pre>

<h2>bgrewriteaof</h2>

<h5><em>Description</em></h5>

<p>Starts the background rewrite of AOF (Append-Only File)</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;bgrewriteaof();
</pre>

<h2>slaveof</h2>

<h5><em>Description</em></h5>

<p>Changes the slave status</p>

<h5><em>Parameters</em></h5>

<p>Either host (string) and port (int), or no parameter to stop being a slave.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;slaveof('10.0.1.7', 6379);
/* ... */
$redis-&gt;slaveof();
</pre>

<h2>object</h2>

<h5><em>Description</em></h5>

<p>Describes the object pointed to by a key.</p>

<h5><em>Parameters</em></h5>

<p>The information to retrieve (string) and the key (string). Info can be one of the following:</p>

<ul>
<li>"encoding"</li>
<li>"refcount"</li>
<li>"idletime"</li>
</ul><h5><em>Return value</em></h5>

<p><em>STRING</em> for "encoding", <em>LONG</em> for "refcount" and "idletime", <code>FALSE</code> if the key doesn't exist.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;object("encoding", "l"); // → ziplist
$redis-&gt;object("refcount", "l"); // → 1
$redis-&gt;object("idletime", "l"); // → 400 (in seconds, with a precision of 10 seconds).
</pre>

<h2>save</h2>

<h5><em>Description</em></h5>

<p>Performs a synchronous save.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure. If a save is already running, this command will fail and return <code>FALSE</code>.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;save();
</pre>

<h2>bgsave</h2>

<h5><em>Description</em></h5>

<p>Performs a background save.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure. If a save is already running, this command will fail and return <code>FALSE</code>.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;bgSave();
</pre>

<h2>lastSave</h2>

<h5><em>Description</em></h5>

<p>Returns the timestamp of the last disk save.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>INT</em>: timestamp.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;lastSave();
</pre>

<h2>type</h2>

<h5><em>Description</em></h5>

<p>Returns the type of data pointed by a given key.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>Depending on the type of the data pointed by the key, this method will return the following value:<br>
string: Redis::REDIS_STRING<br>
set: Redis::REDIS_SET<br>
list: Redis::REDIS_LIST<br>
zset: Redis::REDIS_ZSET<br>
hash: Redis::REDIS_HASH<br>
other: Redis::REDIS_NOT_FOUND  </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;type('key');
</pre>

<h2>append</h2>

<h5><em>Description</em></h5>

<p>Append specified string to the string stored in specified key.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>
<em>Value</em></p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em>: Size of the value after the append</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', 'value1');
$redis-&gt;append('key', 'value2'); /* 12 */
$redis-&gt;get('key'); /* 'value1value2' */
</pre>

<h2>getRange (substr also supported but deprecated in redis)</h2>

<h5><em>Description</em></h5>

<p>Return a substring of a larger string </p>

<h5><em>Parameters</em></h5>

<p><em>key</em>
<em>start</em>
<em>end</em></p>

<h5><em>Return value</em></h5>

<p><em>STRING</em>: the substring </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', 'string value');
$redis-&gt;getRange('key', 0, 5); /* 'string' */
$redis-&gt;getRange('key', -5, -1); /* 'value' */
</pre>

<h2>setRange</h2>

<h5><em>Description</em></h5>

<p>Changes a substring of a larger string.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>offset</em><br><em>value</em>  </p>

<h5><em>Return value</em></h5>

<p><em>STRING</em>: the length of the string after it was modified.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', 'Hello world');
$redis-&gt;setRange('key', 6, "redis"); /* returns 11 */
$redis-&gt;get('key'); /* "Hello redis" */
</pre>

<h2>strlen</h2>

<h5><em>Description</em></h5>

<p>Get the length of a string value.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>INTEGER</em></p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', 'value');
$redis-&gt;strlen('key'); /* 5 */
</pre>

<h2>getBit</h2>

<h5><em>Description</em></h5>

<p>Return a single bit out of a larger string</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>offset</em>  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em>: the bit value (0 or 1)</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', "\x7f"); // this is 0111 1111
$redis-&gt;getBit('key', 0); /* 0 */
$redis-&gt;getBit('key', 1); /* 1 */
</pre>

<h2>setBit</h2>

<h5><em>Description</em></h5>

<p>Changes a single bit of a string.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>offset</em><br><em>value</em>: bool or int (1 or 0)  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em>: 0 or 1, the value of the bit before it was set.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;set('key', "*");    // ord("*") = 42 = 0x2f = "0010 1010"
$redis-&gt;setBit('key', 5, 1); /* returns 0 */
$redis-&gt;setBit('key', 7, 1); /* returns 0 */
$redis-&gt;get('key'); /* chr(0x2f) = "/" = b("0010 1111") */
</pre>

<h2>flushDB</h2>

<h5><em>Description</em></h5>

<p>Removes all entries from the current database.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: Always <code>TRUE</code>.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;flushDB();
</pre>

<h2>flushAll</h2>

<h5><em>Description</em></h5>

<p>Removes all entries from all databases.</p>

<h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: Always <code>TRUE</code>.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;flushAll();
</pre>

<h2>sort</h2>

<h5><em>Description</em></h5>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key
<em>Options</em>: array(key =&gt; value, ...) - optional, with the following keys and values:</p>

<pre>    'by' =&gt; 'some_pattern_*',
    'limit' =&gt; array(0, 1),
    'get' =&gt; 'some_other_pattern_*' or an array of patterns,
    'sort' =&gt; 'asc' or 'desc',
    'alpha' =&gt; TRUE,
    'store' =&gt; 'external-key'
</pre>

<h5><em>Return value</em></h5>

<p>An array of values, or a number corresponding to the number of elements stored if that was used.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('s');
$redis-&gt;sadd('s', 5);
$redis-&gt;sadd('s', 4);
$redis-&gt;sadd('s', 2);
$redis-&gt;sadd('s', 1);
$redis-&gt;sadd('s', 3);

var_dump($redis-&gt;sort('s')); // 1,2,3,4,5
var_dump($redis-&gt;sort('s', array('sort' =&gt; 'desc'))); // 5,4,3,2,1
var_dump($redis-&gt;sort('s', array('sort' =&gt; 'desc', 'store' =&gt; 'out'))); // (int)5
</pre>

<h2>info</h2>

<h5><em>Description</em></h5>

<p>Returns an associative array of strings and integers, with the following keys:</p>

<ul>
<li>redis_version</li>
<li>arch_bits</li>
<li>uptime_in_seconds</li>
<li>uptime_in_days</li>
<li>connected_clients</li>
<li>connected_slaves</li>
<li>used_memory</li>
<li>changes_since_last_save</li>
<li>bgsave_in_progress</li>
<li>last_save_time</li>
<li>total_connections_received</li>
<li>total_commands_processed</li>
<li>role</li>
</ul><h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;info();
</pre>

<h2>resetStat</h2>

<h5><em>Description</em></h5>

<p>Resets the statistics reported by Redis using the INFO command (<code>info()</code> function).</p>

<p>These are the counters that are reset:</p>

<ul>
<li>Keyspace hits</li>
<li>Keyspace misses</li>
<li>Number of commands processed</li>
<li>Number of connections received</li>
<li>Number of expired keys</li>
</ul><h5><em>Parameters</em></h5>

<p>None.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;resetStat();
</pre>

<h2>ttl</h2>

<h5><em>Description</em></h5>

<p>Returns the time to live left for a given key, in seconds. If the key doesn't exist, <code>FALSE</code> is returned.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>Long, the time left to live in seconds.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;ttl('key');
</pre>

<h2>persist</h2>

<h5><em>Description</em></h5>

<p>Remove the expiration timer from a key.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em>: <code>TRUE</code> if a timeout was removed, <code>FALSE</code> if the key didn’t exist or didn’t have an expiration timer.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;persist('key');
</pre>

<h2>mset, msetnx</h2>

<h5><em>Description</em></h5>

<p>Sets multiple key-value pairs in one atomic command. MSETNX only returns TRUE if all the keys were set (see SETNX).</p>

<h5><em>Parameters</em></h5>

<p><em>Pairs</em>: array(key =&gt; value, ...)</p>

<h5><em>Return value</em></h5>

<p><em>Bool</em> <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>
$redis-&gt;mset(array('key0' =&gt; 'value0', 'key1' =&gt; 'value1'));
var_dump($redis-&gt;get('key0'));
var_dump($redis-&gt;get('key1'));

</pre>

<p>Output:</p>

<pre>string(6) "value0"
string(6) "value1"
</pre>

<h2>rpoplpush (redis &gt;= 1.1)</h2>

<h5><em>Description</em></h5>

<p>Pops a value from the tail of a list, and pushes it to the front of another list. Also return this value.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: srckey<br><em>Key</em>: dstkey</p>

<h5><em>Return value</em></h5>

<p><em>STRING</em> The element that was moved in case of success, <code>FALSE</code> in case of failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('x', 'y');

$redis-&gt;lPush('x', 'abc');
$redis-&gt;lPush('x', 'def');
$redis-&gt;lPush('y', '123');
$redis-&gt;lPush('y', '456');

// move the last of x to the front of y.
var_dump($redis-&gt;rpoplpush('x', 'y'));
var_dump($redis-&gt;lRange('x', 0, -1));
var_dump($redis-&gt;lRange('y', 0, -1));

</pre>

<p>Output:</p>

<pre>string(3) "abc"
array(1) {
  [0]=&gt;
  string(3) "def"
}
array(3) {
  [0]=&gt;
  string(3) "abc"
  [1]=&gt;
  string(3) "456"
  [2]=&gt;
  string(3) "123"
}
</pre>

<h2>brpoplpush</h2>

<h5><em>Description</em></h5>

<p>A blocking version of <code>rpoplpush</code>, with an integral timeout in the third parameter.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: srckey<br><em>Key</em>: dstkey<br><em>Long</em>: timeout</p>

<h5><em>Return value</em></h5>

<p><em>STRING</em> The element that was moved in case of success, <code>FALSE</code> in case of timeout.</p>

<h2>zAdd</h2>

<h5><em>Description</em></h5>

<p>Adds the specified member with a given score to the sorted set stored at key.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>score</em> : double<br><em>value</em>: string  </p>

<h5><em>Return value</em></h5>

<p><em>Long</em> 1 if the element is added. 0 otherwise.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 1, 'val1');
$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 5, 'val5');
$redis-&gt;zRange('key', 0, -1); // array(val0, val1, val5)
</pre>

<h2>zRange</h2>

<h5><em>Description</em></h5>

<p>Returns a range of elements from the ordered set stored at the 
specified key, with values in the range [start, end]. start and stop are
 interpreted as zero-based indices:
0 the first element, 1 the second ...
-1 the last element, -2 the penultimate ...</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: long<br><em>end</em>: long<br><em>withscores</em>: bool = false  </p>

<h5><em>Return value</em></h5>

<p><em>Array</em> containing the values in specified range. </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key1', 0, 'val0');
$redis-&gt;zAdd('key1', 2, 'val2');
$redis-&gt;zAdd('key1', 10, 'val10');
$redis-&gt;zRange('key1', 0, -1); /* array('val0', 'val2', 'val10') */

// with scores
$redis-&gt;zRange('key1', 0, -1, true); /* array('val0' =&gt; 0, 'val2' =&gt; 2, 'val10' =&gt; 10) */
</pre>

<h2>zDelete, zRem</h2>

<h5><em>Description</em></h5>

<p>Deletes a specified member from the ordered set.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>member</em>  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> 1 on success, 0 on failure.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zDelete('key', 'val2');
$redis-&gt;zRange('key', 0, -1); /* array('val0', 'val10') */
</pre>

<h2>zRevRange</h2>

<h5><em>Description</em></h5>

<p>Returns the elements of the sorted set stored at the specified key in
 the range [start, end] in reverse order. start and stop are 
interpretated as zero-based indices:
0 the first element, 1 the second ...
-1 the last element, -2 the penultimate ...</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: long<br><em>end</em>: long<br><em>withscores</em>: bool = false  </p>

<h5><em>Return value</em></h5>

<p><em>Array</em> containing the values in specified range. </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zRevRange('key', 0, -1); /* array('val10', 'val2', 'val0') */

// with scores
$redis-&gt;zRevRange('key', 0, -1, true); /* array('val10' =&gt; 10, 'val2' =&gt; 2, 'val0' =&gt; 0) */
</pre>

<h2>zRangeByScore, zRevRangeByScore</h2>

<h5><em>Description</em></h5>

<p>Returns the elements of the sorted set stored at the specified key 
which have scores in the range [start,end]. Adding a parenthesis before <code>start</code> or <code>end</code>
 excludes it from the range. +inf and -inf are also valid limits. 
zRevRangeByScore returns the same items in reverse order, when the <code>start</code> and <code>end</code> parameters are swapped.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: string<br><em>end</em>: string<br><em>options</em>: array  </p>

<p>Two options are available: <code>withscores =&gt; TRUE</code>, and <code>limit =&gt; array($offset, $count)</code></p>

<h5><em>Return value</em></h5>

<p><em>Array</em> containing the values in specified range. </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zRangeByScore('key', 0, 3); /* array('val0', 'val2') */
$redis-&gt;zRangeByScore('key', 0, 3, array('withscores' =&gt; TRUE); /* array('val0' =&gt; 0, 'val2' =&gt; 2) */
$redis-&gt;zRangeByScore('key', 0, 3, array('limit' =&gt; array(1, 1)); /* array('val2' =&gt; 2) */
$redis-&gt;zRangeByScore('key', 0, 3, array('limit' =&gt; array(1, 1)); /* array('val2') */
$redis-&gt;zRangeByScore('key', 0, 3, array('withscores' =&gt; TRUE, 'limit' =&gt; array(1, 1)); /* array('val2' =&gt; 2) */
</pre>

<h2>zCount</h2>

<h5><em>Description</em></h5>

<p>Returns the <em>number</em> of elements of the sorted set stored at 
the specified key which have scores in the range [start,end]. Adding a 
parenthesis before <code>start</code> or <code>end</code> excludes it from the range. +inf and -inf are also valid limits.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: string<br><em>end</em>: string  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> the size of a corresponding zRangeByScore.  </p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zCount('key', 0, 3); /* 2, corresponding to array('val0', 'val2') */
</pre>

<h2>zRemRangeByScore, zDeleteRangeByScore</h2>

<h5><em>Description</em></h5>

<p>Deletes the elements of the sorted set stored at the specified key which have scores in the range [start,end].</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: double or "+inf" or "-inf" string<br><em>end</em>: double or "+inf" or "-inf" string  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> The number of values deleted from the sorted set</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zRemRangeByScore('key', 0, 3); /* 2 */
</pre>

<h2>zRemRangeByRank, zDeleteRangeByRank</h2>

<h5><em>Description</em></h5>

<p>Deletes the elements of the sorted set stored at the specified key which have rank in the range [start,end].</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>start</em>: LONG<br><em>end</em>: LONG  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> The number of values deleted from the sorted set</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 1, 'one');
$redis-&gt;zAdd('key', 2, 'two');
$redis-&gt;zAdd('key', 3, 'three');
$redis-&gt;zRemRangeByRank('key', 0, 1); /* 2 */
$redis-&gt;zRange('key', 0, -1, array('withscores' =&gt; TRUE)); /* array('three' =&gt; 3) */
</pre>

<h2>zSize, zCard</h2>

<h5><em>Description</em></h5>

<p>Returns the cardinality of an ordered set.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>Long</em>, the set's cardinality</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 0, 'val0');
$redis-&gt;zAdd('key', 2, 'val2');
$redis-&gt;zAdd('key', 10, 'val10');
$redis-&gt;zSize('key'); /* 3 */
</pre>

<h2>zScore</h2>

<h5><em>Description</em></h5>

<p>Returns the score of a given member in the specified sorted set.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>member</em>  </p>

<h5><em>Return value</em></h5>

<p><em>Double</em></p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;zAdd('key', 2.5, 'val2');
$redis-&gt;zScore('key', 'val2'); /* 2.5 */
</pre>

<h2>zRank, zRevRank</h2>

<h5><em>Description</em></h5>

<p>Returns the rank of a given member in the specified sorted set, 
starting at 0 for the item with the smallest score. zRevRank starts at 0
 for the item with the <em>largest</em> score.</p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>member</em>  </p>

<h5><em>Return value</em></h5>

<p><em>Long</em>, the item's score.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('z');
$redis-&gt;zAdd('key', 1, 'one');
$redis-&gt;zAdd('key', 2, 'two');
$redis-&gt;zRank('key', 'one'); /* 0 */
$redis-&gt;zRank('key', 'two'); /* 1 */
$redis-&gt;zRevRank('key', 'one'); /* 1 */
$redis-&gt;zRevRank('key', 'two'); /* 0 */
</pre>

<h2>zIncrBy</h2>

<h5>Description</h5>

<p>Increments the score of a member from a sorted set by a given amount.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>value</em>: (double) value that will be added to the member's score<br><em>member</em>  </p>

<h5>Return value</h5>

<p><em>DOUBLE</em> the new value</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('key');
$redis-&gt;zIncrBy('key', 2.5, 'member1'); /* key or member1 didn't exist, so member1's score is to 0 before the increment */
                      /* and now has the value 2.5  */
$redis-&gt;zIncrBy('key', 1, 'member1'); /* 3.5 */
</pre>

<h2>zUnion</h2>

<h5><em>Description</em></h5>

<p>Creates an union of sorted sets given in second argument. The result 
of the union will be stored in the sorted set defined by the first 
argument.
The third optionnel argument defines <code>weights</code> to apply to the sorted sets in input. In this case, the <code>weights</code> will be multiplied by the score of each element in the sorted set before applying the aggregation.
The forth argument defines the <code>AGGREGATE</code> option which specify how the results of the union are aggregated.</p>

<h5><em>Parameters</em></h5>

<p><em>keyOutput</em><br><em>arrayZSetKeys</em><br><em>arrayWeights</em><br><em>aggregateFunction</em> Either "SUM", "MIN", or "MAX": defines the behaviour to use on duplicate entries during the zUnion.  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> The number of values in the new sorted set.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('k1');
$redis-&gt;delete('k2');
$redis-&gt;delete('k3');
$redis-&gt;delete('ko1');
$redis-&gt;delete('ko2');
$redis-&gt;delete('ko3');

$redis-&gt;zAdd('k1', 0, 'val0');
$redis-&gt;zAdd('k1', 1, 'val1');

$redis-&gt;zAdd('k2', 2, 'val2');
$redis-&gt;zAdd('k2', 3, 'val3');

$redis-&gt;zUnion('ko1', array('k1', 'k2')); /* 4, 'ko1' =&gt; array('val0', 'val1', 'val2', 'val3') */

/* Weighted zUnion */
$redis-&gt;zUnion('ko2', array('k1', 'k2'), array(1, 1)); /* 4, 'ko1' =&gt; array('val0', 'val1', 'val2', 'val3') */
$redis-&gt;zUnion('ko3', array('k1', 'k2'), array(5, 1)); /* 4, 'ko1' =&gt; array('val0', 'val2', 'val3', 'val1') */
</pre>

<h2>zInter</h2>

<h5><em>Description</em></h5>

<p>Creates an intersection of sorted sets given in second argument. The 
result of the union will be stored in the sorted set defined by the 
first argument.
The third optionnel argument defines <code>weights</code> to apply to the sorted sets in input. In this case, the <code>weights</code> will be multiplied by the score of each element in the sorted set before applying the aggregation.
The forth argument defines the <code>AGGREGATE</code> option which specify how the results of the union are aggregated.</p>

<h5><em>Parameters</em></h5>

<p><em>keyOutput</em><br><em>arrayZSetKeys</em><br><em>arrayWeights</em><br><em>aggregateFunction</em> Either "SUM", "MIN", or "MAX": defines the behaviour to use on duplicate entries during the zInter.  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> The number of values in the new sorted set.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('k1');
$redis-&gt;delete('k2');
$redis-&gt;delete('k3');

$redis-&gt;delete('ko1');
$redis-&gt;delete('ko2');
$redis-&gt;delete('ko3');
$redis-&gt;delete('ko4');

$redis-&gt;zAdd('k1', 0, 'val0');
$redis-&gt;zAdd('k1', 1, 'val1');
$redis-&gt;zAdd('k1', 3, 'val3');

$redis-&gt;zAdd('k2', 2, 'val1');
$redis-&gt;zAdd('k2', 3, 'val3');

$redis-&gt;zInter('ko1', array('k1', 'k2'));               /* 2, 'ko1' =&gt; array('val1', 'val3') */
$redis-&gt;zInter('ko2', array('k1', 'k2'), array(1, 1));  /* 2, 'ko2' =&gt; array('val1', 'val3') */

/* Weighted zInter */
$redis-&gt;zInter('ko3', array('k1', 'k2'), array(1, 5), 'min'); /* 2, 'ko3' =&gt; array('val1', 'val3') */
$redis-&gt;zInter('ko4', array('k1', 'k2'), array(1, 5), 'max'); /* 2, 'ko4' =&gt; array('val3', 'val1') */

</pre>

<h2>hSet</h2>

<h5><em>Description</em></h5>

<p>Adds a value to the hash stored at key. If this value is already in the hash, <code>FALSE</code> is returned.  </p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>hashKey</em><br><em>value</em>  </p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> <code>1</code> if value didn't exist and was added successfully, <code>0</code> if the value was already present and was replaced, <code>FALSE</code> if there was an error.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h')
$redis-&gt;hSet('h', 'key1', 'hello'); /* 1, 'key1' =&gt; 'hello' in the hash at "h" */
$redis-&gt;hGet('h', 'key1'); /* returns "hello" */

$redis-&gt;hSet('h', 'key1', 'plop'); /* 0, value was replaced. */
$redis-&gt;hGet('h', 'key1'); /* returns "plop" */
</pre>

<h2>hSetNx</h2>

<h5><em>Description</em></h5>

<p>Adds a value to the hash stored at key only if this field isn't already in the hash.</p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> if the field was set, <code>FALSE</code> if it was already present.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h')
$redis-&gt;hSetNx('h', 'key1', 'hello'); /* TRUE, 'key1' =&gt; 'hello' in the hash at "h" */
$redis-&gt;hSetNx('h', 'key1', 'world'); /* FALSE, 'key1' =&gt; 'hello' in the hash at "h". No change since the field wasn't replaced. */
</pre>

<h2>hGet</h2>

<h5><em>Description</em></h5>

<p>Gets a value from the hash stored at key. If the hash table doesn't exist, or the key doesn't exist, <code>FALSE</code> is returned.  </p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>hashKey</em>  </p>

<h5><em>Return value</em></h5>

<p><em>STRING</em> The value, if the command executed successfully
<em>BOOL</em> <code>FALSE</code> in case of failure</p>

<h2>hLen</h2>

<h5><em>Description</em></h5>

<p>Returns the length of a hash, in number of items</p>

<h5><em>Parameters</em></h5>

<p><em>key</em></p>

<h5><em>Return value</em></h5>

<p><em>LONG</em> the number of items in a hash, <code>FALSE</code> if the key doesn't exist or isn't a hash.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h')
$redis-&gt;hSet('h', 'key1', 'hello');
$redis-&gt;hSet('h', 'key2', 'plop');
$redis-&gt;hLen('h'); /* returns 2 */
</pre>

<h2>hDel</h2>

<h5><em>Description</em></h5>

<p>Removes a value from the hash stored at key. If the hash table doesn't exist, or the key doesn't exist, <code>FALSE</code> is returned.  </p>

<h5><em>Parameters</em></h5>

<p><em>key</em><br><em>hashKey</em>  </p>

<h5><em>Return value</em></h5>

<p><em>BOOL</em> <code>TRUE</code> in case of success, <code>FALSE</code> in case of failure</p>

<h2>hKeys</h2>

<h5><em>Description</em></h5>

<p>Returns the keys in a hash, as an array of strings.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>An array of elements, the keys of the hash. This works like PHP's array_keys().</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h');
$redis-&gt;hSet('h', 'a', 'x');
$redis-&gt;hSet('h', 'b', 'y');
$redis-&gt;hSet('h', 'c', 'z');
$redis-&gt;hSet('h', 'd', 't');
var_dump($redis-&gt;hKeys('h'));
</pre>

<p>Output:</p>

<pre>array(4) {
  [0]=&gt;
  string(1) "a"
  [1]=&gt;
  string(1) "b"
  [2]=&gt;
  string(1) "c"
  [3]=&gt;
  string(1) "d"
}
</pre>

<p>The order is random and corresponds to redis' own internal representation of the set structure.</p>

<h2>hVals</h2>

<h5><em>Description</em></h5>

<p>Returns the values in a hash, as an array of strings.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>An array of elements, the values of the hash. This works like PHP's array_values().</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h');
$redis-&gt;hSet('h', 'a', 'x');
$redis-&gt;hSet('h', 'b', 'y');
$redis-&gt;hSet('h', 'c', 'z');
$redis-&gt;hSet('h', 'd', 't');
var_dump($redis-&gt;hVals('h'));
</pre>

<p>Output:</p>

<pre>array(4) {
  [0]=&gt;
  string(1) "x"
  [1]=&gt;
  string(1) "y"
  [2]=&gt;
  string(1) "z"
  [3]=&gt;
  string(1) "t"
}
</pre>

<p>The order is random and corresponds to redis' own internal representation of the set structure.</p>

<h2>hGetAll</h2>

<h5><em>Description</em></h5>

<p>Returns the whole hash, as an array of strings indexed by strings.</p>

<h5><em>Parameters</em></h5>

<p><em>Key</em>: key</p>

<h5><em>Return value</em></h5>

<p>An array of elements, the contents of the hash.</p>

<h5><em>Example</em></h5>

<pre>$redis-&gt;delete('h');
$redis-&gt;hSet('h', 'a', 'x');
$redis-&gt;hSet('h', 'b', 'y');
$redis-&gt;hSet('h', 'c', 'z');
$redis-&gt;hSet('h', 'd', 't');
var_dump($redis-&gt;hGetAll('h'));
</pre>

<p>Output:</p>

<pre>array(4) {
  ["a"]=&gt;
  string(1) "x"
  ["b"]=&gt;
  string(1) "y"
  ["c"]=&gt;
  string(1) "z"
  ["d"]=&gt;
  string(1) "t"
}
</pre>

<p>The order is random and corresponds to redis' own internal representation of the set structure.</p>

<h2>hExists</h2>

<h5>Description</h5>

<p>Verify if the specified member exists in a key.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>memberKey</em></p>

<h5>Return value</h5>

<p><em>BOOL</em>: If the member exists in the hash table, return <code>TRUE</code>, otherwise return <code>FALSE</code>.</p>

<h5>Examples</h5>

<pre>$redis-&gt;hSet('h', 'a', 'x');
$redis-&gt;hExists('h', 'a'); /*  TRUE */
$redis-&gt;hExists('h', 'NonExistingKey'); /* FALSE */
</pre>

<h2>hIncrBy</h2>

<h5>Description</h5>

<p>Increments the value of a member from a hash by a given amount.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>member</em><br><em>value</em>: (integer) value that will be added to the member's value  </p>

<h5>Return value</h5>

<p><em>LONG</em> the new value</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('h');
$redis-&gt;hIncrBy('h', 'x', 2); /* returns 2: h[x] = 2 now. */
$redis-&gt;hIncrBy('h', 'x', 1); /* h[x] ← 2 + 1. Returns 3 */
</pre>

<h2>hMset</h2>

<h5>Description</h5>

<p>Fills in a whole hash. Non-string values are converted to string, using the standard <code>(string)</code> cast. NULL values are stored as empty strings.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>members</em>: key → value array  </p>

<h5>Return value</h5>

<p><em>BOOL</em>  </p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('user:1');
$redis-&gt;hMset('user:1', array('name' =&gt; 'Joe', 'salary' =&gt; 2000));
$redis-&gt;hIncrBy('user:1', 'salary', 100); // Joe earns 100 more now.
</pre>

<h2>hMGet</h2>

<h5>Description</h5>

<p>Retirieve the values associated to the specified fields in the hash.</p>

<h5>Parameters</h5>

<p><em>key</em><br><em>memberKeys</em> Array  </p>

<h5>Return value</h5>

<p><em>Array</em> An array of elements, the values of the specified fields in the hash, with the hash keys as array keys.</p>

<h5>Examples</h5>

<pre>$redis-&gt;delete('h');
$redis-&gt;hSet('h', 'field1', 'value1');
$redis-&gt;hSet('h', 'field2', 'value2');
$redis-&gt;hmGet('h', array('field1', 'field2')); /* returns array('field1' =&gt; 'value1', 'field2' =&gt; 'value2') */
</pre></div></div>
    </div>
  </div>
  <br style="clear:both;">


<br style="clear:both;">

<div class="frame frame-loading" style="display:none;" data-tree-list-url="/nicolasff/phpredis/tree-list/c9914377683f54f36efaa8a70717929fb19b2b67" data-blob-url-prefix="/nicolasff/phpredis/blob/c9914377683f54f36efaa8a70717929fb19b2b67">
  <img src="phpredis_files/big_spinner_336699.gif" height="32" width="32">
</div>



  </div>

    </div>

    </div>

    <!-- footer -->
    <div id="footer">
      
  <div class="upper_footer">
     <div class="site">

       <!--[if IE]><h4 id="blacktocat_ie">GitHub Links</h4><![endif]-->
       <!--[if !IE]--><h4 id="blacktocat">GitHub Links</h4><!--[endif]-->

       <ul class="footer_nav">
         <h4>GitHub</h4>
         <li><a href="https://github.com/about">About</a></li>
         <li><a href="https://github.com/blog">Blog</a></li>
         <li><a href="https://github.com/features">Features</a></li>
         <li><a href="https://github.com/contact">Contact &amp; Support</a></li>
         <li><a href="https://github.com/training">Training</a></li>
         <li><a href="http://status.github.com/">Site Status</a></li>
       </ul>

       <ul class="footer_nav">
         <h4>Tools</h4>
         <li><a href="http://mac.github.com/">GitHub for Mac</a></li>
         <li><a href="http://mobile.github.com/">Issues for iPhone</a></li>
         <li><a href="https://gist.github.com/">Gist: Code Snippets</a></li>
         <li><a href="http://enterprise.github.com/">GitHub Enterprise</a></li>
         <li><a href="http://jobs.github.com/">Job Board</a></li>
       </ul>

       <ul class="footer_nav">
         <h4>Extras</h4>
         <li><a href="http://shop.github.com/">GitHub Shop</a></li>
         <li><a href="http://octodex.github.com/">The Octodex</a></li>
       </ul>

       <ul class="footer_nav">
         <h4>Documentation</h4>
         <li><a href="http://help.github.com/">GitHub Help</a></li>
         <li><a href="http://developer.github.com/">Developer API</a></li>
         <li><a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a></li>
         <li><a href="http://pages.github.com/">GitHub Pages</a></li>
       </ul>

     </div><!-- /.site -->
  </div><!-- /.upper_footer -->

<div class="lower_footer">
  <div class="site">
    <!--[if IE]><div id="legal_ie"><![endif]-->
    <!--[if !IE]--><div id="legal"><!--[endif]-->
      <ul>
          <li><a href="https://github.com/site/terms">Terms of Service</a></li>
          <li><a href="https://github.com/site/privacy">Privacy</a></li>
          <li><a href="https://github.com/security">Security</a></li>
      </ul>

      <p>© 2011 <span id="_rrt" title="0.07459s from fe3.rs.github.com">GitHub</span> Inc. All rights reserved.</p>
    </div><!-- /#legal or /#legal_ie-->

      <div class="sponsor">
        <a href="http://www.rackspace.com/" class="logo">
          <img alt="Dedicated Server" src="phpredis_files/rackspace_logo.png" height="36" width="38">
        </a>
        Powered by the <a href="http://www.rackspace.com/">Dedicated
        Servers</a> and<br> <a href="http://www.rackspacecloud.com/">Cloud
        Computing</a> of Rackspace Hosting<span>®</span>
      </div>
  </div><!-- /.site -->
</div><!-- /.lower_footer -->

    </div><!-- /#footer -->

    

<div id="keyboard_shortcuts_pane" class="instapaper_ignore readability-extra" style="display:none">
  <h2>Keyboard Shortcuts <small><a href="#" class="js-see-all-keyboard-shortcuts">(see all)</a></small></h2>

  <div class="columns threecols">
    <div class="column first">
      <h3>Site wide shortcuts</h3>
      <dl class="keyboard-mappings">
        <dt>s</dt>
        <dd>Focus site search</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>?</dt>
        <dd>Bring up this help dialog</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column middle" style="'display:none'">
      <h3>Commit list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selection down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selection up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>c <em>or</em> o <em>or</em> enter</dt>
        <dd>Open commit</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>y</dt>
        <dd>Expand URL to its canonical form</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column last" style="'display:none'">
      <h3>Pull request list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selection down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selection up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>o <em>or</em> enter</dt>
        <dd>Open issue</dd>
      </dl>
    </div><!-- /.columns.last -->

  </div><!-- /.columns.equacols -->

  <div style="'display:none'">
    <div class="rule"></div>

    <h3>Issues</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selection down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selection up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>x</dt>
          <dd>Toggle selection</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open issue</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column middle">
        <dl class="keyboard-mappings">
          <dt>I</dt>
          <dd>Mark selection as read</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>U</dt>
          <dd>Mark selection as unread</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>e</dt>
          <dd>Close selection</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>y</dt>
          <dd>Remove selection from view</dd>
        </dl>
      </div><!-- /.column.middle -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>c</dt>
          <dd>Create issue</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Create label</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>i</dt>
          <dd>Back to inbox</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>u</dt>
          <dd>Back to issues</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>/</dt>
          <dd>Focus issues search</dd>
        </dl>
      </div>
    </div>
  </div>

  <div style="'display:none'">
    <div class="rule"></div>

    <h3>Issues Dashboard</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selection down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selection up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open issue</dd>
        </dl>
      </div><!-- /.column.first -->
    </div>
  </div>

  <div style="'display:none'">
    <div class="rule"></div>

    <h3>Network Graph</h3>
    <div class="columns equacols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt><span class="badmono">←</span> <em>or</em> h</dt>
          <dd>Scroll left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">→</span> <em>or</em> l</dt>
          <dd>Scroll right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↑</span> <em>or</em> k</dt>
          <dd>Scroll up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↓</span> <em>or</em> j</dt>
          <dd>Scroll down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Toggle visibility of head labels</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">←</span> <em>or</em> shift h</dt>
          <dd>Scroll all the way left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">→</span> <em>or</em> shift l</dt>
          <dd>Scroll all the way right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↑</span> <em>or</em> shift k</dt>
          <dd>Scroll all the way up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↓</span> <em>or</em> shift j</dt>
          <dd>Scroll all the way down</dd>
        </dl>
      </div><!-- /.column.last -->
    </div>
  </div>

  <div>
    <div class="rule"></div>
    <div class="columns threecols">
      <div class="column first">
        <h3>Source Code Browsing</h3>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Activates the file finder</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Jump to line</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>w</dt>
          <dd>Switch branch/tag</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>y</dt>
          <dd>Expand URL to its canonical form</dd>
        </dl>
      </div>
    </div>
  </div>
</div>

    <div id="markdown-help" class="instapaper_ignore readability-extra">
  <h2>Markdown Cheat Sheet</h2>

  <div class="cheatsheet-content">

  <div class="mod">
    <div class="col">
      <h3>Format Text</h3>
      <p>Headers</p>
      <pre># This is an &lt;h1&gt; tag
## This is an &lt;h2&gt; tag
###### This is an &lt;h6&gt; tag</pre>
     <p>Text styles</p>
     <pre>*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
</pre>
    </div>
    <div class="col">
      <h3>Lists</h3>
      <p>Unordered</p>
      <pre>* Item 1
* Item 2
  * Item 2a
  * Item 2b</pre>
     <p>Ordered</p>
     <pre>1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b</pre>
    </div>
    <div class="col">
      <h3>Miscellaneous</h3>
      <p>Images</p>
      <pre>![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
</pre>
     <p>Links</p>
     <pre>http://github.com - automatic!
[GitHub](http://github.com)</pre>
<p>Blockquotes</p>
     <pre>As Kanye West said:
&gt; We're living the future so
&gt; the present is our past.
</pre>
    </div>
  </div>
  <div class="rule"></div>

  <h3>Code Examples in Markdown</h3>
  <div class="col">
      <p>Syntax highlighting with <a href="http://github.github.com/github-flavored-markdown/" title="GitHub Flavored Markdown" target="_blank">GFM</a></p>
      <pre>```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```</pre>
    </div>
    <div class="col">
      <p>Or, indent your code 4 spaces</p>
      <pre>Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true</pre>
    </div>
    <div class="col">
      <p>Inline code for comments</p>
      <pre>I think you should use an
`&lt;addr&gt;` element here instead.</pre>
    </div>
  </div>

  </div>


    <div class="context-overlay"></div>

    <div class="ajax-error-message">
      <p><span class="icon"></span> Something went wrong with that request. Please try again. <a href="javascript:;" class="ajax-error-dismiss">Dismiss</a></p>
    </div>

    
    
    
  


</body></html>